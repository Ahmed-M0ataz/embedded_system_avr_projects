
timer0_fast_pwm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000082c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800060  00800060  000008a0  2**0
                  ALLOC
  2 .stab         00000b94  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000951  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 e2 03 	jmp	0x7c4	; 0x7c4 <__vector_10>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a5 36       	cpi	r26, 0x65	; 101
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <main>
  74:	0c 94 14 04 	jmp	0x828	; 0x828 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_INT>:
#include "ADC_private.h"
#include "ADC_Interface.h"


void ADC_INT(void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	set_bit(ADCSRA,2);//(prescalas =128) اقل تردد ممكن اشتغل بيه بقسم ال 8000000علي 128 وهو الي بيعمل كده
  84:	a6 e2       	ldi	r26, 0x26	; 38
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e6 e2       	ldi	r30, 0x26	; 38
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	84 60       	ori	r24, 0x04	; 4
  90:	8c 93       	st	X, r24
	set_bit(ADCSRA,1);//(prescalas =128) اقل تردد ممكن اشتغل بيه بقسم ال 8000000علي 128 وهو الي بيعمل كده
  92:	a6 e2       	ldi	r26, 0x26	; 38
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e6 e2       	ldi	r30, 0x26	; 38
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	82 60       	ori	r24, 0x02	; 2
  9e:	8c 93       	st	X, r24
	set_bit(ADCSRA,0);//(prescalas =128) اقل تردد ممكن اشتغل بيه بقسم ال 8000000علي 128 وهو الي بيعمل كده
  a0:	a6 e2       	ldi	r26, 0x26	; 38
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e6 e2       	ldi	r30, 0x26	; 38
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	8c 93       	st	X, r24

	clear_bit(ADMUX,REFRENCE_VOLT_BIT7);//refrance volt 5v avcc
  ae:	a7 e2       	ldi	r26, 0x27	; 39
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e7 e2       	ldi	r30, 0x27	; 39
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8f 77       	andi	r24, 0x7F	; 127
  ba:	8c 93       	st	X, r24
	set_bit(ADMUX,REFRENCE_VOLT_BIT6);//refrance volt 5v avcc
  bc:	a7 e2       	ldi	r26, 0x27	; 39
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e7 e2       	ldi	r30, 0x27	; 39
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	8c 93       	st	X, r24
	set_bit(ADMUX,LIFT_ADJUST_10BIT);//left adjustment
  ca:	a7 e2       	ldi	r26, 0x27	; 39
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e7 e2       	ldi	r30, 0x27	; 39
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	8c 93       	st	X, r24
	set_bit(ADCSRA,ADC_BIT_enable);//adc enable
  d8:	a6 e2       	ldi	r26, 0x26	; 38
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e6 e2       	ldi	r30, 0x26	; 38
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	8c 93       	st	X, r24
}
  e6:	cf 91       	pop	r28
  e8:	df 91       	pop	r29
  ea:	08 95       	ret

000000ec <ADC_READ>:

u16 ADC_READ(u8 channel)//تعبر عن ال بن chanal
{
  ec:	df 93       	push	r29
  ee:	cf 93       	push	r28
  f0:	00 d0       	rcall	.+0      	; 0xf2 <ADC_READ+0x6>
  f2:	0f 92       	push	r0
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	8b 83       	std	Y+3, r24	; 0x03

	ADMUX &=0b11100000; //ال الأند مع الواحد هحافظ علي اول تلات بتات الي هما الخاصين الكونفجريشن الي اول بتين بالرفرنس فولت والتالته بتاعت الليفت والاند مع الزيرو بيصفر كل حاجه
  fa:	a7 e2       	ldi	r26, 0x27	; 39
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	e7 e2       	ldi	r30, 0x27	; 39
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 7e       	andi	r24, 0xE0	; 224
 106:	8c 93       	st	X, r24
ADMUX |=channel;//اوور عشان احط الإتشنل الي هو عاوزها وكده كده بيتحطو في اول 5 بت
 108:	a7 e2       	ldi	r26, 0x27	; 39
 10a:	b0 e0       	ldi	r27, 0x00	; 0
 10c:	e7 e2       	ldi	r30, 0x27	; 39
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	90 81       	ld	r25, Z
 112:	8b 81       	ldd	r24, Y+3	; 0x03
 114:	89 2b       	or	r24, r25
 116:	8c 93       	st	X, r24
set_bit(ADCSRA,6);//start conv
 118:	a6 e2       	ldi	r26, 0x26	; 38
 11a:	b0 e0       	ldi	r27, 0x00	; 0
 11c:	e6 e2       	ldi	r30, 0x26	; 38
 11e:	f0 e0       	ldi	r31, 0x00	; 0
 120:	80 81       	ld	r24, Z
 122:	80 64       	ori	r24, 0x40	; 64
 124:	8c 93       	st	X, r24

while (get_bit(ADCSRA,ADC_FLAG_BIT)==0);//طول ما الفلاج ب زيرو خليك لووب هنا لو بقي ب واحد اخرج من اللوب
 126:	e6 e2       	ldi	r30, 0x26	; 38
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	82 95       	swap	r24
 12e:	8f 70       	andi	r24, 0x0F	; 15
 130:	88 2f       	mov	r24, r24
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	81 70       	andi	r24, 0x01	; 1
 136:	90 70       	andi	r25, 0x00	; 0
 138:	00 97       	sbiw	r24, 0x00	; 0
 13a:	a9 f3       	breq	.-22     	; 0x126 <ADC_READ+0x3a>
//set_bit(ADCSRA,4);
//u16 res=ADCH;
//res= (res<<2)|(ADCL>>6);
u16 res=(ADCL>>6);
 13c:	e4 e2       	ldi	r30, 0x24	; 36
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	80 81       	ld	r24, Z
 142:	82 95       	swap	r24
 144:	86 95       	lsr	r24
 146:	86 95       	lsr	r24
 148:	83 70       	andi	r24, 0x03	; 3
 14a:	88 2f       	mov	r24, r24
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	9a 83       	std	Y+2, r25	; 0x02
 150:	89 83       	std	Y+1, r24	; 0x01
res|= (ADCH<<2);
 152:	e5 e2       	ldi	r30, 0x25	; 37
 154:	f0 e0       	ldi	r31, 0x00	; 0
 156:	80 81       	ld	r24, Z
 158:	88 2f       	mov	r24, r24
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	88 0f       	add	r24, r24
 15e:	99 1f       	adc	r25, r25
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	9c 01       	movw	r18, r24
 166:	89 81       	ldd	r24, Y+1	; 0x01
 168:	9a 81       	ldd	r25, Y+2	; 0x02
 16a:	82 2b       	or	r24, r18
 16c:	93 2b       	or	r25, r19
 16e:	9a 83       	std	Y+2, r25	; 0x02
 170:	89 83       	std	Y+1, r24	; 0x01
return res;
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	9a 81       	ldd	r25, Y+2	; 0x02

}
 176:	0f 90       	pop	r0
 178:	0f 90       	pop	r0
 17a:	0f 90       	pop	r0
 17c:	cf 91       	pop	r28
 17e:	df 91       	pop	r29
 180:	08 95       	ret

00000182 <DIO_set_pin_value>:
#include"STD_TYPES.h"
#include "DIO_Configuration.h"
#include "DIO_Private.h"
#include "DIO_Interface.h"

u8 DIO_set_pin_value(u8 Port_no,u8 Pin_no,u8 Pin_value){
 182:	df 93       	push	r29
 184:	cf 93       	push	r28
 186:	00 d0       	rcall	.+0      	; 0x188 <DIO_set_pin_value+0x6>
 188:	00 d0       	rcall	.+0      	; 0x18a <DIO_set_pin_value+0x8>
 18a:	00 d0       	rcall	.+0      	; 0x18c <DIO_set_pin_value+0xa>
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	8a 83       	std	Y+2, r24	; 0x02
 192:	6b 83       	std	Y+3, r22	; 0x03
 194:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_state=0;
 196:	19 82       	std	Y+1, r1	; 0x01
	if(Port_no>=DIO_max_port_no){
 198:	8a 81       	ldd	r24, Y+2	; 0x02
 19a:	84 30       	cpi	r24, 0x04	; 4
 19c:	18 f0       	brcs	.+6      	; 0x1a4 <DIO_set_pin_value+0x22>
		Error_state=1;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	89 83       	std	Y+1, r24	; 0x01
 1a2:	e0 c0       	rjmp	.+448    	; 0x364 <DIO_set_pin_value+0x1e2>
	}else if(Pin_no>=DIO_max_pin_no){
 1a4:	8b 81       	ldd	r24, Y+3	; 0x03
 1a6:	88 30       	cpi	r24, 0x08	; 8
 1a8:	18 f0       	brcs	.+6      	; 0x1b0 <DIO_set_pin_value+0x2e>
		Error_state=2;
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	89 83       	std	Y+1, r24	; 0x01
 1ae:	da c0       	rjmp	.+436    	; 0x364 <DIO_set_pin_value+0x1e2>
	}else if((Pin_value!=DIO_Low)&&(Pin_value!=DIO_High)){
 1b0:	8c 81       	ldd	r24, Y+4	; 0x04
 1b2:	88 23       	and	r24, r24
 1b4:	31 f0       	breq	.+12     	; 0x1c2 <DIO_set_pin_value+0x40>
 1b6:	8c 81       	ldd	r24, Y+4	; 0x04
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	19 f0       	breq	.+6      	; 0x1c2 <DIO_set_pin_value+0x40>
		Error_state=3;
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	89 83       	std	Y+1, r24	; 0x01
 1c0:	d1 c0       	rjmp	.+418    	; 0x364 <DIO_set_pin_value+0x1e2>
	}else{
		switch(Port_no){
 1c2:	8a 81       	ldd	r24, Y+2	; 0x02
 1c4:	28 2f       	mov	r18, r24
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	3e 83       	std	Y+6, r19	; 0x06
 1ca:	2d 83       	std	Y+5, r18	; 0x05
 1cc:	8d 81       	ldd	r24, Y+5	; 0x05
 1ce:	9e 81       	ldd	r25, Y+6	; 0x06
 1d0:	81 30       	cpi	r24, 0x01	; 1
 1d2:	91 05       	cpc	r25, r1
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <DIO_set_pin_value+0x56>
 1d6:	43 c0       	rjmp	.+134    	; 0x25e <DIO_set_pin_value+0xdc>
 1d8:	2d 81       	ldd	r18, Y+5	; 0x05
 1da:	3e 81       	ldd	r19, Y+6	; 0x06
 1dc:	22 30       	cpi	r18, 0x02	; 2
 1de:	31 05       	cpc	r19, r1
 1e0:	2c f4       	brge	.+10     	; 0x1ec <DIO_set_pin_value+0x6a>
 1e2:	8d 81       	ldd	r24, Y+5	; 0x05
 1e4:	9e 81       	ldd	r25, Y+6	; 0x06
 1e6:	00 97       	sbiw	r24, 0x00	; 0
 1e8:	71 f0       	breq	.+28     	; 0x206 <DIO_set_pin_value+0x84>
 1ea:	bc c0       	rjmp	.+376    	; 0x364 <DIO_set_pin_value+0x1e2>
 1ec:	2d 81       	ldd	r18, Y+5	; 0x05
 1ee:	3e 81       	ldd	r19, Y+6	; 0x06
 1f0:	22 30       	cpi	r18, 0x02	; 2
 1f2:	31 05       	cpc	r19, r1
 1f4:	09 f4       	brne	.+2      	; 0x1f8 <DIO_set_pin_value+0x76>
 1f6:	5f c0       	rjmp	.+190    	; 0x2b6 <DIO_set_pin_value+0x134>
 1f8:	8d 81       	ldd	r24, Y+5	; 0x05
 1fa:	9e 81       	ldd	r25, Y+6	; 0x06
 1fc:	83 30       	cpi	r24, 0x03	; 3
 1fe:	91 05       	cpc	r25, r1
 200:	09 f4       	brne	.+2      	; 0x204 <DIO_set_pin_value+0x82>
 202:	85 c0       	rjmp	.+266    	; 0x30e <DIO_set_pin_value+0x18c>
 204:	af c0       	rjmp	.+350    	; 0x364 <DIO_set_pin_value+0x1e2>
		case Group_A: assign_bit(DIO_u8_PORTA,Pin_no,Pin_value);
 206:	8c 81       	ldd	r24, Y+4	; 0x04
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	a1 f4       	brne	.+40     	; 0x234 <DIO_set_pin_value+0xb2>
 20c:	ab e3       	ldi	r26, 0x3B	; 59
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	eb e3       	ldi	r30, 0x3B	; 59
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	48 2f       	mov	r20, r24
 218:	8b 81       	ldd	r24, Y+3	; 0x03
 21a:	28 2f       	mov	r18, r24
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	02 2e       	mov	r0, r18
 224:	02 c0       	rjmp	.+4      	; 0x22a <DIO_set_pin_value+0xa8>
 226:	88 0f       	add	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	0a 94       	dec	r0
 22c:	e2 f7       	brpl	.-8      	; 0x226 <DIO_set_pin_value+0xa4>
 22e:	84 2b       	or	r24, r20
 230:	8c 93       	st	X, r24
 232:	98 c0       	rjmp	.+304    	; 0x364 <DIO_set_pin_value+0x1e2>
 234:	ab e3       	ldi	r26, 0x3B	; 59
 236:	b0 e0       	ldi	r27, 0x00	; 0
 238:	eb e3       	ldi	r30, 0x3B	; 59
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	80 81       	ld	r24, Z
 23e:	48 2f       	mov	r20, r24
 240:	8b 81       	ldd	r24, Y+3	; 0x03
 242:	28 2f       	mov	r18, r24
 244:	30 e0       	ldi	r19, 0x00	; 0
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	02 2e       	mov	r0, r18
 24c:	02 c0       	rjmp	.+4      	; 0x252 <DIO_set_pin_value+0xd0>
 24e:	88 0f       	add	r24, r24
 250:	99 1f       	adc	r25, r25
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <DIO_set_pin_value+0xcc>
 256:	80 95       	com	r24
 258:	84 23       	and	r24, r20
 25a:	8c 93       	st	X, r24
 25c:	83 c0       	rjmp	.+262    	; 0x364 <DIO_set_pin_value+0x1e2>
		break;
		case Group_B: assign_bit(DIO_u8_PORTB,Pin_no,Pin_value);
 25e:	8c 81       	ldd	r24, Y+4	; 0x04
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	a1 f4       	brne	.+40     	; 0x28c <DIO_set_pin_value+0x10a>
 264:	a8 e3       	ldi	r26, 0x38	; 56
 266:	b0 e0       	ldi	r27, 0x00	; 0
 268:	e8 e3       	ldi	r30, 0x38	; 56
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	48 2f       	mov	r20, r24
 270:	8b 81       	ldd	r24, Y+3	; 0x03
 272:	28 2f       	mov	r18, r24
 274:	30 e0       	ldi	r19, 0x00	; 0
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	02 2e       	mov	r0, r18
 27c:	02 c0       	rjmp	.+4      	; 0x282 <DIO_set_pin_value+0x100>
 27e:	88 0f       	add	r24, r24
 280:	99 1f       	adc	r25, r25
 282:	0a 94       	dec	r0
 284:	e2 f7       	brpl	.-8      	; 0x27e <DIO_set_pin_value+0xfc>
 286:	84 2b       	or	r24, r20
 288:	8c 93       	st	X, r24
 28a:	6c c0       	rjmp	.+216    	; 0x364 <DIO_set_pin_value+0x1e2>
 28c:	a8 e3       	ldi	r26, 0x38	; 56
 28e:	b0 e0       	ldi	r27, 0x00	; 0
 290:	e8 e3       	ldi	r30, 0x38	; 56
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	48 2f       	mov	r20, r24
 298:	8b 81       	ldd	r24, Y+3	; 0x03
 29a:	28 2f       	mov	r18, r24
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 2e       	mov	r0, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_set_pin_value+0x128>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	0a 94       	dec	r0
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_set_pin_value+0x124>
 2ae:	80 95       	com	r24
 2b0:	84 23       	and	r24, r20
 2b2:	8c 93       	st	X, r24
 2b4:	57 c0       	rjmp	.+174    	; 0x364 <DIO_set_pin_value+0x1e2>
		break;
		case Group_C: assign_bit(DIO_u8_PORTC,Pin_no,Pin_value);
 2b6:	8c 81       	ldd	r24, Y+4	; 0x04
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	a1 f4       	brne	.+40     	; 0x2e4 <DIO_set_pin_value+0x162>
 2bc:	a5 e3       	ldi	r26, 0x35	; 53
 2be:	b0 e0       	ldi	r27, 0x00	; 0
 2c0:	e5 e3       	ldi	r30, 0x35	; 53
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	48 2f       	mov	r20, r24
 2c8:	8b 81       	ldd	r24, Y+3	; 0x03
 2ca:	28 2f       	mov	r18, r24
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 2e       	mov	r0, r18
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <DIO_set_pin_value+0x158>
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	0a 94       	dec	r0
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <DIO_set_pin_value+0x154>
 2de:	84 2b       	or	r24, r20
 2e0:	8c 93       	st	X, r24
 2e2:	40 c0       	rjmp	.+128    	; 0x364 <DIO_set_pin_value+0x1e2>
 2e4:	a5 e3       	ldi	r26, 0x35	; 53
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	e5 e3       	ldi	r30, 0x35	; 53
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	48 2f       	mov	r20, r24
 2f0:	8b 81       	ldd	r24, Y+3	; 0x03
 2f2:	28 2f       	mov	r18, r24
 2f4:	30 e0       	ldi	r19, 0x00	; 0
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	02 2e       	mov	r0, r18
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_set_pin_value+0x180>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	0a 94       	dec	r0
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_set_pin_value+0x17c>
 306:	80 95       	com	r24
 308:	84 23       	and	r24, r20
 30a:	8c 93       	st	X, r24
 30c:	2b c0       	rjmp	.+86     	; 0x364 <DIO_set_pin_value+0x1e2>
		break;
		case Group_D: assign_bit(DIO_u8_PORTD,Pin_no,Pin_value);
 30e:	8c 81       	ldd	r24, Y+4	; 0x04
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	a1 f4       	brne	.+40     	; 0x33c <DIO_set_pin_value+0x1ba>
 314:	a2 e3       	ldi	r26, 0x32	; 50
 316:	b0 e0       	ldi	r27, 0x00	; 0
 318:	e2 e3       	ldi	r30, 0x32	; 50
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	48 2f       	mov	r20, r24
 320:	8b 81       	ldd	r24, Y+3	; 0x03
 322:	28 2f       	mov	r18, r24
 324:	30 e0       	ldi	r19, 0x00	; 0
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	02 2e       	mov	r0, r18
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_set_pin_value+0x1b0>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	0a 94       	dec	r0
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_set_pin_value+0x1ac>
 336:	84 2b       	or	r24, r20
 338:	8c 93       	st	X, r24
 33a:	14 c0       	rjmp	.+40     	; 0x364 <DIO_set_pin_value+0x1e2>
 33c:	a2 e3       	ldi	r26, 0x32	; 50
 33e:	b0 e0       	ldi	r27, 0x00	; 0
 340:	e2 e3       	ldi	r30, 0x32	; 50
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	80 81       	ld	r24, Z
 346:	48 2f       	mov	r20, r24
 348:	8b 81       	ldd	r24, Y+3	; 0x03
 34a:	28 2f       	mov	r18, r24
 34c:	30 e0       	ldi	r19, 0x00	; 0
 34e:	81 e0       	ldi	r24, 0x01	; 1
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	02 2e       	mov	r0, r18
 354:	02 c0       	rjmp	.+4      	; 0x35a <DIO_set_pin_value+0x1d8>
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	0a 94       	dec	r0
 35c:	e2 f7       	brpl	.-8      	; 0x356 <DIO_set_pin_value+0x1d4>
 35e:	80 95       	com	r24
 360:	84 23       	and	r24, r20
 362:	8c 93       	st	X, r24
		break;
		}
	}
	return Error_state;
 364:	89 81       	ldd	r24, Y+1	; 0x01
}
 366:	26 96       	adiw	r28, 0x06	; 6
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	f8 94       	cli
 36c:	de bf       	out	0x3e, r29	; 62
 36e:	0f be       	out	0x3f, r0	; 63
 370:	cd bf       	out	0x3d, r28	; 61
 372:	cf 91       	pop	r28
 374:	df 91       	pop	r29
 376:	08 95       	ret

00000378 <DIO_set_pin_direction>:

u8 DIO_set_pin_direction(u8 Port_no,u8 Pin_no,u8 Pin_direction){
 378:	df 93       	push	r29
 37a:	cf 93       	push	r28
 37c:	00 d0       	rcall	.+0      	; 0x37e <DIO_set_pin_direction+0x6>
 37e:	00 d0       	rcall	.+0      	; 0x380 <DIO_set_pin_direction+0x8>
 380:	00 d0       	rcall	.+0      	; 0x382 <DIO_set_pin_direction+0xa>
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	8a 83       	std	Y+2, r24	; 0x02
 388:	6b 83       	std	Y+3, r22	; 0x03
 38a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_state=0;
 38c:	19 82       	std	Y+1, r1	; 0x01
		if(Port_no>=DIO_max_port_no){
 38e:	8a 81       	ldd	r24, Y+2	; 0x02
 390:	84 30       	cpi	r24, 0x04	; 4
 392:	18 f0       	brcs	.+6      	; 0x39a <DIO_set_pin_direction+0x22>
			Error_state=1;
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	89 83       	std	Y+1, r24	; 0x01
 398:	e0 c0       	rjmp	.+448    	; 0x55a <DIO_set_pin_direction+0x1e2>
		}else if(Pin_no>=DIO_max_pin_no){
 39a:	8b 81       	ldd	r24, Y+3	; 0x03
 39c:	88 30       	cpi	r24, 0x08	; 8
 39e:	18 f0       	brcs	.+6      	; 0x3a6 <DIO_set_pin_direction+0x2e>
			Error_state=2;
 3a0:	82 e0       	ldi	r24, 0x02	; 2
 3a2:	89 83       	std	Y+1, r24	; 0x01
 3a4:	da c0       	rjmp	.+436    	; 0x55a <DIO_set_pin_direction+0x1e2>
		}else if((Pin_direction!=DIO_Input)&&(Pin_direction!=DIO_Output)){
 3a6:	8c 81       	ldd	r24, Y+4	; 0x04
 3a8:	88 23       	and	r24, r24
 3aa:	31 f0       	breq	.+12     	; 0x3b8 <DIO_set_pin_direction+0x40>
 3ac:	8c 81       	ldd	r24, Y+4	; 0x04
 3ae:	81 30       	cpi	r24, 0x01	; 1
 3b0:	19 f0       	breq	.+6      	; 0x3b8 <DIO_set_pin_direction+0x40>
			Error_state=3;
 3b2:	83 e0       	ldi	r24, 0x03	; 3
 3b4:	89 83       	std	Y+1, r24	; 0x01
 3b6:	d1 c0       	rjmp	.+418    	; 0x55a <DIO_set_pin_direction+0x1e2>
		}else{
			switch(Port_no){
 3b8:	8a 81       	ldd	r24, Y+2	; 0x02
 3ba:	28 2f       	mov	r18, r24
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	3e 83       	std	Y+6, r19	; 0x06
 3c0:	2d 83       	std	Y+5, r18	; 0x05
 3c2:	8d 81       	ldd	r24, Y+5	; 0x05
 3c4:	9e 81       	ldd	r25, Y+6	; 0x06
 3c6:	81 30       	cpi	r24, 0x01	; 1
 3c8:	91 05       	cpc	r25, r1
 3ca:	09 f4       	brne	.+2      	; 0x3ce <DIO_set_pin_direction+0x56>
 3cc:	43 c0       	rjmp	.+134    	; 0x454 <DIO_set_pin_direction+0xdc>
 3ce:	2d 81       	ldd	r18, Y+5	; 0x05
 3d0:	3e 81       	ldd	r19, Y+6	; 0x06
 3d2:	22 30       	cpi	r18, 0x02	; 2
 3d4:	31 05       	cpc	r19, r1
 3d6:	2c f4       	brge	.+10     	; 0x3e2 <DIO_set_pin_direction+0x6a>
 3d8:	8d 81       	ldd	r24, Y+5	; 0x05
 3da:	9e 81       	ldd	r25, Y+6	; 0x06
 3dc:	00 97       	sbiw	r24, 0x00	; 0
 3de:	71 f0       	breq	.+28     	; 0x3fc <DIO_set_pin_direction+0x84>
 3e0:	bc c0       	rjmp	.+376    	; 0x55a <DIO_set_pin_direction+0x1e2>
 3e2:	2d 81       	ldd	r18, Y+5	; 0x05
 3e4:	3e 81       	ldd	r19, Y+6	; 0x06
 3e6:	22 30       	cpi	r18, 0x02	; 2
 3e8:	31 05       	cpc	r19, r1
 3ea:	09 f4       	brne	.+2      	; 0x3ee <DIO_set_pin_direction+0x76>
 3ec:	5f c0       	rjmp	.+190    	; 0x4ac <DIO_set_pin_direction+0x134>
 3ee:	8d 81       	ldd	r24, Y+5	; 0x05
 3f0:	9e 81       	ldd	r25, Y+6	; 0x06
 3f2:	83 30       	cpi	r24, 0x03	; 3
 3f4:	91 05       	cpc	r25, r1
 3f6:	09 f4       	brne	.+2      	; 0x3fa <DIO_set_pin_direction+0x82>
 3f8:	85 c0       	rjmp	.+266    	; 0x504 <DIO_set_pin_direction+0x18c>
 3fa:	af c0       	rjmp	.+350    	; 0x55a <DIO_set_pin_direction+0x1e2>
			case Group_A: assign_bit(DIO_u8_DDRA,Pin_no,Pin_direction);
 3fc:	8c 81       	ldd	r24, Y+4	; 0x04
 3fe:	81 30       	cpi	r24, 0x01	; 1
 400:	a1 f4       	brne	.+40     	; 0x42a <DIO_set_pin_direction+0xb2>
 402:	aa e3       	ldi	r26, 0x3A	; 58
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	ea e3       	ldi	r30, 0x3A	; 58
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	80 81       	ld	r24, Z
 40c:	48 2f       	mov	r20, r24
 40e:	8b 81       	ldd	r24, Y+3	; 0x03
 410:	28 2f       	mov	r18, r24
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	81 e0       	ldi	r24, 0x01	; 1
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	02 2e       	mov	r0, r18
 41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_set_pin_direction+0xa8>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	0a 94       	dec	r0
 422:	e2 f7       	brpl	.-8      	; 0x41c <DIO_set_pin_direction+0xa4>
 424:	84 2b       	or	r24, r20
 426:	8c 93       	st	X, r24
 428:	98 c0       	rjmp	.+304    	; 0x55a <DIO_set_pin_direction+0x1e2>
 42a:	aa e3       	ldi	r26, 0x3A	; 58
 42c:	b0 e0       	ldi	r27, 0x00	; 0
 42e:	ea e3       	ldi	r30, 0x3A	; 58
 430:	f0 e0       	ldi	r31, 0x00	; 0
 432:	80 81       	ld	r24, Z
 434:	48 2f       	mov	r20, r24
 436:	8b 81       	ldd	r24, Y+3	; 0x03
 438:	28 2f       	mov	r18, r24
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	02 2e       	mov	r0, r18
 442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_set_pin_direction+0xd0>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	0a 94       	dec	r0
 44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_set_pin_direction+0xcc>
 44c:	80 95       	com	r24
 44e:	84 23       	and	r24, r20
 450:	8c 93       	st	X, r24
 452:	83 c0       	rjmp	.+262    	; 0x55a <DIO_set_pin_direction+0x1e2>
			break;
			case Group_B: assign_bit(DIO_u8_DDRB,Pin_no,Pin_direction);
 454:	8c 81       	ldd	r24, Y+4	; 0x04
 456:	81 30       	cpi	r24, 0x01	; 1
 458:	a1 f4       	brne	.+40     	; 0x482 <DIO_set_pin_direction+0x10a>
 45a:	a7 e3       	ldi	r26, 0x37	; 55
 45c:	b0 e0       	ldi	r27, 0x00	; 0
 45e:	e7 e3       	ldi	r30, 0x37	; 55
 460:	f0 e0       	ldi	r31, 0x00	; 0
 462:	80 81       	ld	r24, Z
 464:	48 2f       	mov	r20, r24
 466:	8b 81       	ldd	r24, Y+3	; 0x03
 468:	28 2f       	mov	r18, r24
 46a:	30 e0       	ldi	r19, 0x00	; 0
 46c:	81 e0       	ldi	r24, 0x01	; 1
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	02 2e       	mov	r0, r18
 472:	02 c0       	rjmp	.+4      	; 0x478 <DIO_set_pin_direction+0x100>
 474:	88 0f       	add	r24, r24
 476:	99 1f       	adc	r25, r25
 478:	0a 94       	dec	r0
 47a:	e2 f7       	brpl	.-8      	; 0x474 <DIO_set_pin_direction+0xfc>
 47c:	84 2b       	or	r24, r20
 47e:	8c 93       	st	X, r24
 480:	6c c0       	rjmp	.+216    	; 0x55a <DIO_set_pin_direction+0x1e2>
 482:	a7 e3       	ldi	r26, 0x37	; 55
 484:	b0 e0       	ldi	r27, 0x00	; 0
 486:	e7 e3       	ldi	r30, 0x37	; 55
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	48 2f       	mov	r20, r24
 48e:	8b 81       	ldd	r24, Y+3	; 0x03
 490:	28 2f       	mov	r18, r24
 492:	30 e0       	ldi	r19, 0x00	; 0
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	02 2e       	mov	r0, r18
 49a:	02 c0       	rjmp	.+4      	; 0x4a0 <DIO_set_pin_direction+0x128>
 49c:	88 0f       	add	r24, r24
 49e:	99 1f       	adc	r25, r25
 4a0:	0a 94       	dec	r0
 4a2:	e2 f7       	brpl	.-8      	; 0x49c <DIO_set_pin_direction+0x124>
 4a4:	80 95       	com	r24
 4a6:	84 23       	and	r24, r20
 4a8:	8c 93       	st	X, r24
 4aa:	57 c0       	rjmp	.+174    	; 0x55a <DIO_set_pin_direction+0x1e2>
			break;
			case Group_C: assign_bit(DIO_u8_DDRC,Pin_no,Pin_direction);
 4ac:	8c 81       	ldd	r24, Y+4	; 0x04
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	a1 f4       	brne	.+40     	; 0x4da <DIO_set_pin_direction+0x162>
 4b2:	a4 e3       	ldi	r26, 0x34	; 52
 4b4:	b0 e0       	ldi	r27, 0x00	; 0
 4b6:	e4 e3       	ldi	r30, 0x34	; 52
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	80 81       	ld	r24, Z
 4bc:	48 2f       	mov	r20, r24
 4be:	8b 81       	ldd	r24, Y+3	; 0x03
 4c0:	28 2f       	mov	r18, r24
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	02 2e       	mov	r0, r18
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <DIO_set_pin_direction+0x158>
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	0a 94       	dec	r0
 4d2:	e2 f7       	brpl	.-8      	; 0x4cc <DIO_set_pin_direction+0x154>
 4d4:	84 2b       	or	r24, r20
 4d6:	8c 93       	st	X, r24
 4d8:	40 c0       	rjmp	.+128    	; 0x55a <DIO_set_pin_direction+0x1e2>
 4da:	a4 e3       	ldi	r26, 0x34	; 52
 4dc:	b0 e0       	ldi	r27, 0x00	; 0
 4de:	e4 e3       	ldi	r30, 0x34	; 52
 4e0:	f0 e0       	ldi	r31, 0x00	; 0
 4e2:	80 81       	ld	r24, Z
 4e4:	48 2f       	mov	r20, r24
 4e6:	8b 81       	ldd	r24, Y+3	; 0x03
 4e8:	28 2f       	mov	r18, r24
 4ea:	30 e0       	ldi	r19, 0x00	; 0
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 2e       	mov	r0, r18
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_set_pin_direction+0x180>
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	0a 94       	dec	r0
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_set_pin_direction+0x17c>
 4fc:	80 95       	com	r24
 4fe:	84 23       	and	r24, r20
 500:	8c 93       	st	X, r24
 502:	2b c0       	rjmp	.+86     	; 0x55a <DIO_set_pin_direction+0x1e2>
			break;
			case Group_D: assign_bit(DIO_u8_DDRD,Pin_no,Pin_direction);
 504:	8c 81       	ldd	r24, Y+4	; 0x04
 506:	81 30       	cpi	r24, 0x01	; 1
 508:	a1 f4       	brne	.+40     	; 0x532 <DIO_set_pin_direction+0x1ba>
 50a:	a1 e3       	ldi	r26, 0x31	; 49
 50c:	b0 e0       	ldi	r27, 0x00	; 0
 50e:	e1 e3       	ldi	r30, 0x31	; 49
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	80 81       	ld	r24, Z
 514:	48 2f       	mov	r20, r24
 516:	8b 81       	ldd	r24, Y+3	; 0x03
 518:	28 2f       	mov	r18, r24
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	02 2e       	mov	r0, r18
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_set_pin_direction+0x1b0>
 524:	88 0f       	add	r24, r24
 526:	99 1f       	adc	r25, r25
 528:	0a 94       	dec	r0
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_set_pin_direction+0x1ac>
 52c:	84 2b       	or	r24, r20
 52e:	8c 93       	st	X, r24
 530:	14 c0       	rjmp	.+40     	; 0x55a <DIO_set_pin_direction+0x1e2>
 532:	a1 e3       	ldi	r26, 0x31	; 49
 534:	b0 e0       	ldi	r27, 0x00	; 0
 536:	e1 e3       	ldi	r30, 0x31	; 49
 538:	f0 e0       	ldi	r31, 0x00	; 0
 53a:	80 81       	ld	r24, Z
 53c:	48 2f       	mov	r20, r24
 53e:	8b 81       	ldd	r24, Y+3	; 0x03
 540:	28 2f       	mov	r18, r24
 542:	30 e0       	ldi	r19, 0x00	; 0
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	02 2e       	mov	r0, r18
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_set_pin_direction+0x1d8>
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	0a 94       	dec	r0
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_set_pin_direction+0x1d4>
 554:	80 95       	com	r24
 556:	84 23       	and	r24, r20
 558:	8c 93       	st	X, r24
			break;
			}
		}
		return Error_state;
 55a:	89 81       	ldd	r24, Y+1	; 0x01
}
 55c:	26 96       	adiw	r28, 0x06	; 6
 55e:	0f b6       	in	r0, 0x3f	; 63
 560:	f8 94       	cli
 562:	de bf       	out	0x3e, r29	; 62
 564:	0f be       	out	0x3f, r0	; 63
 566:	cd bf       	out	0x3d, r28	; 61
 568:	cf 91       	pop	r28
 56a:	df 91       	pop	r29
 56c:	08 95       	ret

0000056e <DIO_get_pin_value>:

u8 DIO_get_pin_value(u8 Port_no,u8 Pin_no,u8*Pin_value){
 56e:	df 93       	push	r29
 570:	cf 93       	push	r28
 572:	cd b7       	in	r28, 0x3d	; 61
 574:	de b7       	in	r29, 0x3e	; 62
 576:	27 97       	sbiw	r28, 0x07	; 7
 578:	0f b6       	in	r0, 0x3f	; 63
 57a:	f8 94       	cli
 57c:	de bf       	out	0x3e, r29	; 62
 57e:	0f be       	out	0x3f, r0	; 63
 580:	cd bf       	out	0x3d, r28	; 61
 582:	8a 83       	std	Y+2, r24	; 0x02
 584:	6b 83       	std	Y+3, r22	; 0x03
 586:	5d 83       	std	Y+5, r21	; 0x05
 588:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_state=0;
 58a:	19 82       	std	Y+1, r1	; 0x01
			if(Port_no>=DIO_max_port_no){
 58c:	8a 81       	ldd	r24, Y+2	; 0x02
 58e:	84 30       	cpi	r24, 0x04	; 4
 590:	18 f0       	brcs	.+6      	; 0x598 <DIO_get_pin_value+0x2a>
				Error_state=1;
 592:	81 e0       	ldi	r24, 0x01	; 1
 594:	89 83       	std	Y+1, r24	; 0x01
 596:	76 c0       	rjmp	.+236    	; 0x684 <DIO_get_pin_value+0x116>
			}else if(Pin_no>=DIO_max_pin_no){
 598:	8b 81       	ldd	r24, Y+3	; 0x03
 59a:	88 30       	cpi	r24, 0x08	; 8
 59c:	18 f0       	brcs	.+6      	; 0x5a4 <DIO_get_pin_value+0x36>
				Error_state=2;
 59e:	82 e0       	ldi	r24, 0x02	; 2
 5a0:	89 83       	std	Y+1, r24	; 0x01
 5a2:	70 c0       	rjmp	.+224    	; 0x684 <DIO_get_pin_value+0x116>
			}else{
				switch(Port_no){
 5a4:	8a 81       	ldd	r24, Y+2	; 0x02
 5a6:	28 2f       	mov	r18, r24
 5a8:	30 e0       	ldi	r19, 0x00	; 0
 5aa:	3f 83       	std	Y+7, r19	; 0x07
 5ac:	2e 83       	std	Y+6, r18	; 0x06
 5ae:	4e 81       	ldd	r20, Y+6	; 0x06
 5b0:	5f 81       	ldd	r21, Y+7	; 0x07
 5b2:	41 30       	cpi	r20, 0x01	; 1
 5b4:	51 05       	cpc	r21, r1
 5b6:	59 f1       	breq	.+86     	; 0x60e <DIO_get_pin_value+0xa0>
 5b8:	8e 81       	ldd	r24, Y+6	; 0x06
 5ba:	9f 81       	ldd	r25, Y+7	; 0x07
 5bc:	82 30       	cpi	r24, 0x02	; 2
 5be:	91 05       	cpc	r25, r1
 5c0:	34 f4       	brge	.+12     	; 0x5ce <DIO_get_pin_value+0x60>
 5c2:	2e 81       	ldd	r18, Y+6	; 0x06
 5c4:	3f 81       	ldd	r19, Y+7	; 0x07
 5c6:	21 15       	cp	r18, r1
 5c8:	31 05       	cpc	r19, r1
 5ca:	69 f0       	breq	.+26     	; 0x5e6 <DIO_get_pin_value+0x78>
 5cc:	5b c0       	rjmp	.+182    	; 0x684 <DIO_get_pin_value+0x116>
 5ce:	4e 81       	ldd	r20, Y+6	; 0x06
 5d0:	5f 81       	ldd	r21, Y+7	; 0x07
 5d2:	42 30       	cpi	r20, 0x02	; 2
 5d4:	51 05       	cpc	r21, r1
 5d6:	79 f1       	breq	.+94     	; 0x636 <DIO_get_pin_value+0xc8>
 5d8:	8e 81       	ldd	r24, Y+6	; 0x06
 5da:	9f 81       	ldd	r25, Y+7	; 0x07
 5dc:	83 30       	cpi	r24, 0x03	; 3
 5de:	91 05       	cpc	r25, r1
 5e0:	09 f4       	brne	.+2      	; 0x5e4 <DIO_get_pin_value+0x76>
 5e2:	3d c0       	rjmp	.+122    	; 0x65e <DIO_get_pin_value+0xf0>
 5e4:	4f c0       	rjmp	.+158    	; 0x684 <DIO_get_pin_value+0x116>
				case Group_A: *Pin_value=get_bit(DIO_u8_PINA,Pin_no);
 5e6:	e9 e3       	ldi	r30, 0x39	; 57
 5e8:	f0 e0       	ldi	r31, 0x00	; 0
 5ea:	80 81       	ld	r24, Z
 5ec:	28 2f       	mov	r18, r24
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	8b 81       	ldd	r24, Y+3	; 0x03
 5f2:	88 2f       	mov	r24, r24
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	a9 01       	movw	r20, r18
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <DIO_get_pin_value+0x90>
 5fa:	55 95       	asr	r21
 5fc:	47 95       	ror	r20
 5fe:	8a 95       	dec	r24
 600:	e2 f7       	brpl	.-8      	; 0x5fa <DIO_get_pin_value+0x8c>
 602:	ca 01       	movw	r24, r20
 604:	81 70       	andi	r24, 0x01	; 1
 606:	ec 81       	ldd	r30, Y+4	; 0x04
 608:	fd 81       	ldd	r31, Y+5	; 0x05
 60a:	80 83       	st	Z, r24
 60c:	3b c0       	rjmp	.+118    	; 0x684 <DIO_get_pin_value+0x116>
				break;
				case Group_B: *Pin_value=get_bit(DIO_u8_PINB,Pin_no);
 60e:	e6 e3       	ldi	r30, 0x36	; 54
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	28 2f       	mov	r18, r24
 616:	30 e0       	ldi	r19, 0x00	; 0
 618:	8b 81       	ldd	r24, Y+3	; 0x03
 61a:	88 2f       	mov	r24, r24
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	a9 01       	movw	r20, r18
 620:	02 c0       	rjmp	.+4      	; 0x626 <DIO_get_pin_value+0xb8>
 622:	55 95       	asr	r21
 624:	47 95       	ror	r20
 626:	8a 95       	dec	r24
 628:	e2 f7       	brpl	.-8      	; 0x622 <DIO_get_pin_value+0xb4>
 62a:	ca 01       	movw	r24, r20
 62c:	81 70       	andi	r24, 0x01	; 1
 62e:	ec 81       	ldd	r30, Y+4	; 0x04
 630:	fd 81       	ldd	r31, Y+5	; 0x05
 632:	80 83       	st	Z, r24
 634:	27 c0       	rjmp	.+78     	; 0x684 <DIO_get_pin_value+0x116>
				break;
				case Group_C: *Pin_value=get_bit(DIO_u8_PINC,Pin_no);
 636:	e3 e3       	ldi	r30, 0x33	; 51
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	80 81       	ld	r24, Z
 63c:	28 2f       	mov	r18, r24
 63e:	30 e0       	ldi	r19, 0x00	; 0
 640:	8b 81       	ldd	r24, Y+3	; 0x03
 642:	88 2f       	mov	r24, r24
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	a9 01       	movw	r20, r18
 648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_get_pin_value+0xe0>
 64a:	55 95       	asr	r21
 64c:	47 95       	ror	r20
 64e:	8a 95       	dec	r24
 650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_get_pin_value+0xdc>
 652:	ca 01       	movw	r24, r20
 654:	81 70       	andi	r24, 0x01	; 1
 656:	ec 81       	ldd	r30, Y+4	; 0x04
 658:	fd 81       	ldd	r31, Y+5	; 0x05
 65a:	80 83       	st	Z, r24
 65c:	13 c0       	rjmp	.+38     	; 0x684 <DIO_get_pin_value+0x116>
				break;
				case Group_D: *Pin_value=get_bit(DIO_u8_PIND,Pin_no);
 65e:	e0 e3       	ldi	r30, 0x30	; 48
 660:	f0 e0       	ldi	r31, 0x00	; 0
 662:	80 81       	ld	r24, Z
 664:	28 2f       	mov	r18, r24
 666:	30 e0       	ldi	r19, 0x00	; 0
 668:	8b 81       	ldd	r24, Y+3	; 0x03
 66a:	88 2f       	mov	r24, r24
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	a9 01       	movw	r20, r18
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_get_pin_value+0x108>
 672:	55 95       	asr	r21
 674:	47 95       	ror	r20
 676:	8a 95       	dec	r24
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_get_pin_value+0x104>
 67a:	ca 01       	movw	r24, r20
 67c:	81 70       	andi	r24, 0x01	; 1
 67e:	ec 81       	ldd	r30, Y+4	; 0x04
 680:	fd 81       	ldd	r31, Y+5	; 0x05
 682:	80 83       	st	Z, r24
				break;
				}
			}
			return Error_state;
 684:	89 81       	ldd	r24, Y+1	; 0x01
}
 686:	27 96       	adiw	r28, 0x07	; 7
 688:	0f b6       	in	r0, 0x3f	; 63
 68a:	f8 94       	cli
 68c:	de bf       	out	0x3e, r29	; 62
 68e:	0f be       	out	0x3f, r0	; 63
 690:	cd bf       	out	0x3d, r28	; 61
 692:	cf 91       	pop	r28
 694:	df 91       	pop	r29
 696:	08 95       	ret

00000698 <DIO_set_port_value>:

u8 DIO_set_port_value(u8 Port_no,u8 Port_value){
 698:	df 93       	push	r29
 69a:	cf 93       	push	r28
 69c:	00 d0       	rcall	.+0      	; 0x69e <DIO_set_port_value+0x6>
 69e:	00 d0       	rcall	.+0      	; 0x6a0 <DIO_set_port_value+0x8>
 6a0:	0f 92       	push	r0
 6a2:	cd b7       	in	r28, 0x3d	; 61
 6a4:	de b7       	in	r29, 0x3e	; 62
 6a6:	8a 83       	std	Y+2, r24	; 0x02
 6a8:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_state=0;
 6aa:	19 82       	std	Y+1, r1	; 0x01
		if(Port_no>=DIO_max_port_no){
 6ac:	8a 81       	ldd	r24, Y+2	; 0x02
 6ae:	84 30       	cpi	r24, 0x04	; 4
 6b0:	18 f0       	brcs	.+6      	; 0x6b8 <DIO_set_port_value+0x20>
			Error_state=1;
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	89 83       	std	Y+1, r24	; 0x01
 6b6:	32 c0       	rjmp	.+100    	; 0x71c <DIO_set_port_value+0x84>
		}else if(Port_value>DIO_max_port_value){
			Error_state=2;
		}else{
			switch(Port_no){
 6b8:	8a 81       	ldd	r24, Y+2	; 0x02
 6ba:	28 2f       	mov	r18, r24
 6bc:	30 e0       	ldi	r19, 0x00	; 0
 6be:	3d 83       	std	Y+5, r19	; 0x05
 6c0:	2c 83       	std	Y+4, r18	; 0x04
 6c2:	8c 81       	ldd	r24, Y+4	; 0x04
 6c4:	9d 81       	ldd	r25, Y+5	; 0x05
 6c6:	81 30       	cpi	r24, 0x01	; 1
 6c8:	91 05       	cpc	r25, r1
 6ca:	d1 f0       	breq	.+52     	; 0x700 <DIO_set_port_value+0x68>
 6cc:	2c 81       	ldd	r18, Y+4	; 0x04
 6ce:	3d 81       	ldd	r19, Y+5	; 0x05
 6d0:	22 30       	cpi	r18, 0x02	; 2
 6d2:	31 05       	cpc	r19, r1
 6d4:	2c f4       	brge	.+10     	; 0x6e0 <DIO_set_port_value+0x48>
 6d6:	8c 81       	ldd	r24, Y+4	; 0x04
 6d8:	9d 81       	ldd	r25, Y+5	; 0x05
 6da:	00 97       	sbiw	r24, 0x00	; 0
 6dc:	61 f0       	breq	.+24     	; 0x6f6 <DIO_set_port_value+0x5e>
 6de:	1e c0       	rjmp	.+60     	; 0x71c <DIO_set_port_value+0x84>
 6e0:	2c 81       	ldd	r18, Y+4	; 0x04
 6e2:	3d 81       	ldd	r19, Y+5	; 0x05
 6e4:	22 30       	cpi	r18, 0x02	; 2
 6e6:	31 05       	cpc	r19, r1
 6e8:	81 f0       	breq	.+32     	; 0x70a <DIO_set_port_value+0x72>
 6ea:	8c 81       	ldd	r24, Y+4	; 0x04
 6ec:	9d 81       	ldd	r25, Y+5	; 0x05
 6ee:	83 30       	cpi	r24, 0x03	; 3
 6f0:	91 05       	cpc	r25, r1
 6f2:	81 f0       	breq	.+32     	; 0x714 <DIO_set_port_value+0x7c>
 6f4:	13 c0       	rjmp	.+38     	; 0x71c <DIO_set_port_value+0x84>
			case Group_A: DIO_u8_PORTA=Port_value;
 6f6:	eb e3       	ldi	r30, 0x3B	; 59
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	8b 81       	ldd	r24, Y+3	; 0x03
 6fc:	80 83       	st	Z, r24
 6fe:	0e c0       	rjmp	.+28     	; 0x71c <DIO_set_port_value+0x84>
			break;
			case Group_B: DIO_u8_PORTB=Port_value;
 700:	e8 e3       	ldi	r30, 0x38	; 56
 702:	f0 e0       	ldi	r31, 0x00	; 0
 704:	8b 81       	ldd	r24, Y+3	; 0x03
 706:	80 83       	st	Z, r24
 708:	09 c0       	rjmp	.+18     	; 0x71c <DIO_set_port_value+0x84>
			break;
			case Group_C: DIO_u8_PORTC=Port_value;
 70a:	e5 e3       	ldi	r30, 0x35	; 53
 70c:	f0 e0       	ldi	r31, 0x00	; 0
 70e:	8b 81       	ldd	r24, Y+3	; 0x03
 710:	80 83       	st	Z, r24
 712:	04 c0       	rjmp	.+8      	; 0x71c <DIO_set_port_value+0x84>
			break;
			case Group_D: DIO_u8_PORTD=Port_value;
 714:	e2 e3       	ldi	r30, 0x32	; 50
 716:	f0 e0       	ldi	r31, 0x00	; 0
 718:	8b 81       	ldd	r24, Y+3	; 0x03
 71a:	80 83       	st	Z, r24
			break;
			}
		}
		return Error_state;
 71c:	89 81       	ldd	r24, Y+1	; 0x01
}
 71e:	0f 90       	pop	r0
 720:	0f 90       	pop	r0
 722:	0f 90       	pop	r0
 724:	0f 90       	pop	r0
 726:	0f 90       	pop	r0
 728:	cf 91       	pop	r28
 72a:	df 91       	pop	r29
 72c:	08 95       	ret

0000072e <DIO_set_port_direction>:

u8 DIO_set_port_direction(u8 Port_no,u8 Port_direction){
 72e:	df 93       	push	r29
 730:	cf 93       	push	r28
 732:	00 d0       	rcall	.+0      	; 0x734 <DIO_set_port_direction+0x6>
 734:	00 d0       	rcall	.+0      	; 0x736 <DIO_set_port_direction+0x8>
 736:	0f 92       	push	r0
 738:	cd b7       	in	r28, 0x3d	; 61
 73a:	de b7       	in	r29, 0x3e	; 62
 73c:	8a 83       	std	Y+2, r24	; 0x02
 73e:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_state=0;
 740:	19 82       	std	Y+1, r1	; 0x01
			if(Port_no>=DIO_max_port_no){
 742:	8a 81       	ldd	r24, Y+2	; 0x02
 744:	84 30       	cpi	r24, 0x04	; 4
 746:	18 f0       	brcs	.+6      	; 0x74e <DIO_set_port_direction+0x20>
				Error_state=1;
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	89 83       	std	Y+1, r24	; 0x01
 74c:	32 c0       	rjmp	.+100    	; 0x7b2 <DIO_set_port_direction+0x84>
			}else if(Port_direction>DIO_max_port_direction){
				Error_state=2;
			}else{
				switch(Port_no){
 74e:	8a 81       	ldd	r24, Y+2	; 0x02
 750:	28 2f       	mov	r18, r24
 752:	30 e0       	ldi	r19, 0x00	; 0
 754:	3d 83       	std	Y+5, r19	; 0x05
 756:	2c 83       	std	Y+4, r18	; 0x04
 758:	8c 81       	ldd	r24, Y+4	; 0x04
 75a:	9d 81       	ldd	r25, Y+5	; 0x05
 75c:	81 30       	cpi	r24, 0x01	; 1
 75e:	91 05       	cpc	r25, r1
 760:	d1 f0       	breq	.+52     	; 0x796 <DIO_set_port_direction+0x68>
 762:	2c 81       	ldd	r18, Y+4	; 0x04
 764:	3d 81       	ldd	r19, Y+5	; 0x05
 766:	22 30       	cpi	r18, 0x02	; 2
 768:	31 05       	cpc	r19, r1
 76a:	2c f4       	brge	.+10     	; 0x776 <DIO_set_port_direction+0x48>
 76c:	8c 81       	ldd	r24, Y+4	; 0x04
 76e:	9d 81       	ldd	r25, Y+5	; 0x05
 770:	00 97       	sbiw	r24, 0x00	; 0
 772:	61 f0       	breq	.+24     	; 0x78c <DIO_set_port_direction+0x5e>
 774:	1e c0       	rjmp	.+60     	; 0x7b2 <DIO_set_port_direction+0x84>
 776:	2c 81       	ldd	r18, Y+4	; 0x04
 778:	3d 81       	ldd	r19, Y+5	; 0x05
 77a:	22 30       	cpi	r18, 0x02	; 2
 77c:	31 05       	cpc	r19, r1
 77e:	81 f0       	breq	.+32     	; 0x7a0 <DIO_set_port_direction+0x72>
 780:	8c 81       	ldd	r24, Y+4	; 0x04
 782:	9d 81       	ldd	r25, Y+5	; 0x05
 784:	83 30       	cpi	r24, 0x03	; 3
 786:	91 05       	cpc	r25, r1
 788:	81 f0       	breq	.+32     	; 0x7aa <DIO_set_port_direction+0x7c>
 78a:	13 c0       	rjmp	.+38     	; 0x7b2 <DIO_set_port_direction+0x84>
				case Group_A: DIO_u8_DDRA=Port_direction;
 78c:	ea e3       	ldi	r30, 0x3A	; 58
 78e:	f0 e0       	ldi	r31, 0x00	; 0
 790:	8b 81       	ldd	r24, Y+3	; 0x03
 792:	80 83       	st	Z, r24
 794:	0e c0       	rjmp	.+28     	; 0x7b2 <DIO_set_port_direction+0x84>
				break;
				case Group_B: DIO_u8_DDRB=Port_direction;
 796:	e7 e3       	ldi	r30, 0x37	; 55
 798:	f0 e0       	ldi	r31, 0x00	; 0
 79a:	8b 81       	ldd	r24, Y+3	; 0x03
 79c:	80 83       	st	Z, r24
 79e:	09 c0       	rjmp	.+18     	; 0x7b2 <DIO_set_port_direction+0x84>
				break;
				case Group_C: DIO_u8_DDRC=Port_direction;
 7a0:	e4 e3       	ldi	r30, 0x34	; 52
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	8b 81       	ldd	r24, Y+3	; 0x03
 7a6:	80 83       	st	Z, r24
 7a8:	04 c0       	rjmp	.+8      	; 0x7b2 <DIO_set_port_direction+0x84>
				break;
				case Group_D: DIO_u8_DDRD=Port_direction;;
 7aa:	e1 e3       	ldi	r30, 0x31	; 49
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	8b 81       	ldd	r24, Y+3	; 0x03
 7b0:	80 83       	st	Z, r24
				break;
				}
			}
			return Error_state;
 7b2:	89 81       	ldd	r24, Y+1	; 0x01
}
 7b4:	0f 90       	pop	r0
 7b6:	0f 90       	pop	r0
 7b8:	0f 90       	pop	r0
 7ba:	0f 90       	pop	r0
 7bc:	0f 90       	pop	r0
 7be:	cf 91       	pop	r28
 7c0:	df 91       	pop	r29
 7c2:	08 95       	ret

000007c4 <__vector_10>:
u8 flag=0;
void __vector_10(void)  __attribute__((signal));


void __vector_10(void)
{
 7c4:	1f 92       	push	r1
 7c6:	0f 92       	push	r0
 7c8:	0f b6       	in	r0, 0x3f	; 63
 7ca:	0f 92       	push	r0
 7cc:	11 24       	eor	r1, r1
 7ce:	df 93       	push	r29
 7d0:	cf 93       	push	r28
 7d2:	cd b7       	in	r28, 0x3d	; 61
 7d4:	de b7       	in	r29, 0x3e	; 62
//count=0;
//TCNT0=192;//ارجعه تاني للربع الي عاوز اعده
//DIO_set_pin_value(Group_D,DIO_Pin_0,toggle_bit(state,0));
//led_counter++;//دا كده بيزيد لما يعدي ثانيه
//flag=1;
}
 7d6:	cf 91       	pop	r28
 7d8:	df 91       	pop	r29
 7da:	0f 90       	pop	r0
 7dc:	0f be       	out	0x3f, r0	; 63
 7de:	0f 90       	pop	r0
 7e0:	1f 90       	pop	r1
 7e2:	18 95       	reti

000007e4 <main>:
void main(void)
{static u8 state_1=0,state_2=0,state_3=0;
 7e4:	0f 93       	push	r16
 7e6:	1f 93       	push	r17
 7e8:	df 93       	push	r29
 7ea:	cf 93       	push	r28
 7ec:	cd b7       	in	r28, 0x3d	; 61
 7ee:	de b7       	in	r29, 0x3e	; 62

	DIO_set_pin_direction(Group_A,DIO_Pin_0,DIO_Input);
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	60 e0       	ldi	r22, 0x00	; 0
 7f4:	40 e0       	ldi	r20, 0x00	; 0
 7f6:	0e 94 bc 01 	call	0x378	; 0x378 <DIO_set_pin_direction>
	DIO_set_pin_direction(Group_B,DIO_Pin_3,DIO_Output);
 7fa:	81 e0       	ldi	r24, 0x01	; 1
 7fc:	63 e0       	ldi	r22, 0x03	; 3
 7fe:	41 e0       	ldi	r20, 0x01	; 1
 800:	0e 94 bc 01 	call	0x378	; 0x378 <DIO_set_pin_direction>
	//DIO_set_pin_direction(Group_D,DIO_Pin_2,DIO_Output);
ADC_INT();
 804:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_INT>

//REGISTER TCCR0 bit 5 and 4 put 1 and 1 to make pin oc0 (groub b bin 3 ) set oc0 on compare match , clear OC0 at TOP value (255) (mode inverted ) data sheet page 79
	TCCR0=0b01111010;//bit 3 and bit 6 for modes 1 and 1 fast pwm  mode and prescaler 8 mhz (divid 8000000/8 to get 1000000 mhz (prescaler bits 0,1,2)
 808:	e3 e5       	ldi	r30, 0x53	; 83
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	8a e7       	ldi	r24, 0x7A	; 122
 80e:	80 83       	st	Z, r24
	//TCNT0=192;//192 preload
	//set_bit(TIMSK,0);//enable over flow interupt like  sie (spisific intrupt enable)
	//set_bit(SREG,7);//enable over flow interupt like  gie (global intrupt enable)

	while(1){
	OCR0= ADC_READ(ADC_CH_0)/4;
 810:	0c e5       	ldi	r16, 0x5C	; 92
 812:	10 e0       	ldi	r17, 0x00	; 0
 814:	80 e0       	ldi	r24, 0x00	; 0
 816:	0e 94 76 00 	call	0xec	; 0xec <ADC_READ>
 81a:	96 95       	lsr	r25
 81c:	87 95       	ror	r24
 81e:	96 95       	lsr	r25
 820:	87 95       	ror	r24
 822:	f8 01       	movw	r30, r16
 824:	80 83       	st	Z, r24
 826:	f4 cf       	rjmp	.-24     	; 0x810 <main+0x2c>

00000828 <_exit>:
 828:	f8 94       	cli

0000082a <__stop_program>:
 82a:	ff cf       	rjmp	.-2      	; 0x82a <__stop_program>
