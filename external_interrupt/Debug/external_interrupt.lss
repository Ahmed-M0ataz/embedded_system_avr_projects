
external_interrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ab4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000007  00800060  00800060  00000b28  2**0
                  ALLOC
  2 .stab         00000cf0  00000000  00000000  00000b28  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000a23  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7b 04 	jmp	0x8f6	; 0x8f6 <__vector_1>
   8:	0c 94 a8 04 	jmp	0x950	; 0x950 <__vector_2>
   c:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__vector_3>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a7 36       	cpi	r26, 0x67	; 103
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 34 05 	call	0xa68	; 0xa68 <main>
  74:	0c 94 58 05 	jmp	0xab0	; 0xab0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_set_pin_value>:
#include"STD_TYPES.h"
#include "DIO_Configuration.h"
#include "DIO_Private.h"
#include "DIO_Interface.h"

u8 DIO_set_pin_value(u8 Port_no,u8 Pin_no,u8 Pin_value){
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_set_pin_value+0x6>
  82:	00 d0       	rcall	.+0      	; 0x84 <DIO_set_pin_value+0x8>
  84:	00 d0       	rcall	.+0      	; 0x86 <DIO_set_pin_value+0xa>
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	8a 83       	std	Y+2, r24	; 0x02
  8c:	6b 83       	std	Y+3, r22	; 0x03
  8e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_state=0;
  90:	19 82       	std	Y+1, r1	; 0x01
	if(Port_no>=DIO_max_port_no){
  92:	8a 81       	ldd	r24, Y+2	; 0x02
  94:	84 30       	cpi	r24, 0x04	; 4
  96:	18 f0       	brcs	.+6      	; 0x9e <DIO_set_pin_value+0x22>
		Error_state=1;
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	89 83       	std	Y+1, r24	; 0x01
  9c:	e0 c0       	rjmp	.+448    	; 0x25e <DIO_set_pin_value+0x1e2>
	}else if(Pin_no>=DIO_max_pin_no){
  9e:	8b 81       	ldd	r24, Y+3	; 0x03
  a0:	88 30       	cpi	r24, 0x08	; 8
  a2:	18 f0       	brcs	.+6      	; 0xaa <DIO_set_pin_value+0x2e>
		Error_state=2;
  a4:	82 e0       	ldi	r24, 0x02	; 2
  a6:	89 83       	std	Y+1, r24	; 0x01
  a8:	da c0       	rjmp	.+436    	; 0x25e <DIO_set_pin_value+0x1e2>
	}else if((Pin_value!=DIO_Low)&&(Pin_value!=DIO_High)){
  aa:	8c 81       	ldd	r24, Y+4	; 0x04
  ac:	88 23       	and	r24, r24
  ae:	31 f0       	breq	.+12     	; 0xbc <DIO_set_pin_value+0x40>
  b0:	8c 81       	ldd	r24, Y+4	; 0x04
  b2:	81 30       	cpi	r24, 0x01	; 1
  b4:	19 f0       	breq	.+6      	; 0xbc <DIO_set_pin_value+0x40>
		Error_state=3;
  b6:	83 e0       	ldi	r24, 0x03	; 3
  b8:	89 83       	std	Y+1, r24	; 0x01
  ba:	d1 c0       	rjmp	.+418    	; 0x25e <DIO_set_pin_value+0x1e2>
	}else{
		switch(Port_no){
  bc:	8a 81       	ldd	r24, Y+2	; 0x02
  be:	28 2f       	mov	r18, r24
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	3e 83       	std	Y+6, r19	; 0x06
  c4:	2d 83       	std	Y+5, r18	; 0x05
  c6:	8d 81       	ldd	r24, Y+5	; 0x05
  c8:	9e 81       	ldd	r25, Y+6	; 0x06
  ca:	81 30       	cpi	r24, 0x01	; 1
  cc:	91 05       	cpc	r25, r1
  ce:	09 f4       	brne	.+2      	; 0xd2 <DIO_set_pin_value+0x56>
  d0:	43 c0       	rjmp	.+134    	; 0x158 <DIO_set_pin_value+0xdc>
  d2:	2d 81       	ldd	r18, Y+5	; 0x05
  d4:	3e 81       	ldd	r19, Y+6	; 0x06
  d6:	22 30       	cpi	r18, 0x02	; 2
  d8:	31 05       	cpc	r19, r1
  da:	2c f4       	brge	.+10     	; 0xe6 <DIO_set_pin_value+0x6a>
  dc:	8d 81       	ldd	r24, Y+5	; 0x05
  de:	9e 81       	ldd	r25, Y+6	; 0x06
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	71 f0       	breq	.+28     	; 0x100 <DIO_set_pin_value+0x84>
  e4:	bc c0       	rjmp	.+376    	; 0x25e <DIO_set_pin_value+0x1e2>
  e6:	2d 81       	ldd	r18, Y+5	; 0x05
  e8:	3e 81       	ldd	r19, Y+6	; 0x06
  ea:	22 30       	cpi	r18, 0x02	; 2
  ec:	31 05       	cpc	r19, r1
  ee:	09 f4       	brne	.+2      	; 0xf2 <DIO_set_pin_value+0x76>
  f0:	5f c0       	rjmp	.+190    	; 0x1b0 <DIO_set_pin_value+0x134>
  f2:	8d 81       	ldd	r24, Y+5	; 0x05
  f4:	9e 81       	ldd	r25, Y+6	; 0x06
  f6:	83 30       	cpi	r24, 0x03	; 3
  f8:	91 05       	cpc	r25, r1
  fa:	09 f4       	brne	.+2      	; 0xfe <DIO_set_pin_value+0x82>
  fc:	85 c0       	rjmp	.+266    	; 0x208 <DIO_set_pin_value+0x18c>
  fe:	af c0       	rjmp	.+350    	; 0x25e <DIO_set_pin_value+0x1e2>
		case Group_A: assign_bit(DIO_u8_PORTA,Pin_no,Pin_value);
 100:	8c 81       	ldd	r24, Y+4	; 0x04
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	a1 f4       	brne	.+40     	; 0x12e <DIO_set_pin_value+0xb2>
 106:	ab e3       	ldi	r26, 0x3B	; 59
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	eb e3       	ldi	r30, 0x3B	; 59
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	48 2f       	mov	r20, r24
 112:	8b 81       	ldd	r24, Y+3	; 0x03
 114:	28 2f       	mov	r18, r24
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	02 2e       	mov	r0, r18
 11e:	02 c0       	rjmp	.+4      	; 0x124 <DIO_set_pin_value+0xa8>
 120:	88 0f       	add	r24, r24
 122:	99 1f       	adc	r25, r25
 124:	0a 94       	dec	r0
 126:	e2 f7       	brpl	.-8      	; 0x120 <DIO_set_pin_value+0xa4>
 128:	84 2b       	or	r24, r20
 12a:	8c 93       	st	X, r24
 12c:	98 c0       	rjmp	.+304    	; 0x25e <DIO_set_pin_value+0x1e2>
 12e:	ab e3       	ldi	r26, 0x3B	; 59
 130:	b0 e0       	ldi	r27, 0x00	; 0
 132:	eb e3       	ldi	r30, 0x3B	; 59
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	48 2f       	mov	r20, r24
 13a:	8b 81       	ldd	r24, Y+3	; 0x03
 13c:	28 2f       	mov	r18, r24
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	02 2e       	mov	r0, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_set_pin_value+0xd0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	0a 94       	dec	r0
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_set_pin_value+0xcc>
 150:	80 95       	com	r24
 152:	84 23       	and	r24, r20
 154:	8c 93       	st	X, r24
 156:	83 c0       	rjmp	.+262    	; 0x25e <DIO_set_pin_value+0x1e2>
		break;
		case Group_B: assign_bit(DIO_u8_PORTB,Pin_no,Pin_value);
 158:	8c 81       	ldd	r24, Y+4	; 0x04
 15a:	81 30       	cpi	r24, 0x01	; 1
 15c:	a1 f4       	brne	.+40     	; 0x186 <DIO_set_pin_value+0x10a>
 15e:	a8 e3       	ldi	r26, 0x38	; 56
 160:	b0 e0       	ldi	r27, 0x00	; 0
 162:	e8 e3       	ldi	r30, 0x38	; 56
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	48 2f       	mov	r20, r24
 16a:	8b 81       	ldd	r24, Y+3	; 0x03
 16c:	28 2f       	mov	r18, r24
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 2e       	mov	r0, r18
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_set_pin_value+0x100>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	0a 94       	dec	r0
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_set_pin_value+0xfc>
 180:	84 2b       	or	r24, r20
 182:	8c 93       	st	X, r24
 184:	6c c0       	rjmp	.+216    	; 0x25e <DIO_set_pin_value+0x1e2>
 186:	a8 e3       	ldi	r26, 0x38	; 56
 188:	b0 e0       	ldi	r27, 0x00	; 0
 18a:	e8 e3       	ldi	r30, 0x38	; 56
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	48 2f       	mov	r20, r24
 192:	8b 81       	ldd	r24, Y+3	; 0x03
 194:	28 2f       	mov	r18, r24
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 2e       	mov	r0, r18
 19e:	02 c0       	rjmp	.+4      	; 0x1a4 <DIO_set_pin_value+0x128>
 1a0:	88 0f       	add	r24, r24
 1a2:	99 1f       	adc	r25, r25
 1a4:	0a 94       	dec	r0
 1a6:	e2 f7       	brpl	.-8      	; 0x1a0 <DIO_set_pin_value+0x124>
 1a8:	80 95       	com	r24
 1aa:	84 23       	and	r24, r20
 1ac:	8c 93       	st	X, r24
 1ae:	57 c0       	rjmp	.+174    	; 0x25e <DIO_set_pin_value+0x1e2>
		break;
		case Group_C: assign_bit(DIO_u8_PORTC,Pin_no,Pin_value);
 1b0:	8c 81       	ldd	r24, Y+4	; 0x04
 1b2:	81 30       	cpi	r24, 0x01	; 1
 1b4:	a1 f4       	brne	.+40     	; 0x1de <DIO_set_pin_value+0x162>
 1b6:	a5 e3       	ldi	r26, 0x35	; 53
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	e5 e3       	ldi	r30, 0x35	; 53
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	48 2f       	mov	r20, r24
 1c2:	8b 81       	ldd	r24, Y+3	; 0x03
 1c4:	28 2f       	mov	r18, r24
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 2e       	mov	r0, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_set_pin_value+0x158>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	0a 94       	dec	r0
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_set_pin_value+0x154>
 1d8:	84 2b       	or	r24, r20
 1da:	8c 93       	st	X, r24
 1dc:	40 c0       	rjmp	.+128    	; 0x25e <DIO_set_pin_value+0x1e2>
 1de:	a5 e3       	ldi	r26, 0x35	; 53
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
 1e2:	e5 e3       	ldi	r30, 0x35	; 53
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	48 2f       	mov	r20, r24
 1ea:	8b 81       	ldd	r24, Y+3	; 0x03
 1ec:	28 2f       	mov	r18, r24
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 2e       	mov	r0, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_set_pin_value+0x180>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	0a 94       	dec	r0
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_set_pin_value+0x17c>
 200:	80 95       	com	r24
 202:	84 23       	and	r24, r20
 204:	8c 93       	st	X, r24
 206:	2b c0       	rjmp	.+86     	; 0x25e <DIO_set_pin_value+0x1e2>
		break;
		case Group_D: assign_bit(DIO_u8_PORTD,Pin_no,Pin_value);
 208:	8c 81       	ldd	r24, Y+4	; 0x04
 20a:	81 30       	cpi	r24, 0x01	; 1
 20c:	a1 f4       	brne	.+40     	; 0x236 <DIO_set_pin_value+0x1ba>
 20e:	a2 e3       	ldi	r26, 0x32	; 50
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	e2 e3       	ldi	r30, 0x32	; 50
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	48 2f       	mov	r20, r24
 21a:	8b 81       	ldd	r24, Y+3	; 0x03
 21c:	28 2f       	mov	r18, r24
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	02 2e       	mov	r0, r18
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_set_pin_value+0x1b0>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	0a 94       	dec	r0
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_set_pin_value+0x1ac>
 230:	84 2b       	or	r24, r20
 232:	8c 93       	st	X, r24
 234:	14 c0       	rjmp	.+40     	; 0x25e <DIO_set_pin_value+0x1e2>
 236:	a2 e3       	ldi	r26, 0x32	; 50
 238:	b0 e0       	ldi	r27, 0x00	; 0
 23a:	e2 e3       	ldi	r30, 0x32	; 50
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	80 81       	ld	r24, Z
 240:	48 2f       	mov	r20, r24
 242:	8b 81       	ldd	r24, Y+3	; 0x03
 244:	28 2f       	mov	r18, r24
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 2e       	mov	r0, r18
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_set_pin_value+0x1d8>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	0a 94       	dec	r0
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_set_pin_value+0x1d4>
 258:	80 95       	com	r24
 25a:	84 23       	and	r24, r20
 25c:	8c 93       	st	X, r24
		break;
		}
	}
	return Error_state;
 25e:	89 81       	ldd	r24, Y+1	; 0x01
}
 260:	26 96       	adiw	r28, 0x06	; 6
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	f8 94       	cli
 266:	de bf       	out	0x3e, r29	; 62
 268:	0f be       	out	0x3f, r0	; 63
 26a:	cd bf       	out	0x3d, r28	; 61
 26c:	cf 91       	pop	r28
 26e:	df 91       	pop	r29
 270:	08 95       	ret

00000272 <DIO_set_pin_direction>:

u8 DIO_set_pin_direction(u8 Port_no,u8 Pin_no,u8 Pin_direction){
 272:	df 93       	push	r29
 274:	cf 93       	push	r28
 276:	00 d0       	rcall	.+0      	; 0x278 <DIO_set_pin_direction+0x6>
 278:	00 d0       	rcall	.+0      	; 0x27a <DIO_set_pin_direction+0x8>
 27a:	00 d0       	rcall	.+0      	; 0x27c <DIO_set_pin_direction+0xa>
 27c:	cd b7       	in	r28, 0x3d	; 61
 27e:	de b7       	in	r29, 0x3e	; 62
 280:	8a 83       	std	Y+2, r24	; 0x02
 282:	6b 83       	std	Y+3, r22	; 0x03
 284:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_state=0;
 286:	19 82       	std	Y+1, r1	; 0x01
		if(Port_no>=DIO_max_port_no){
 288:	8a 81       	ldd	r24, Y+2	; 0x02
 28a:	84 30       	cpi	r24, 0x04	; 4
 28c:	18 f0       	brcs	.+6      	; 0x294 <DIO_set_pin_direction+0x22>
			Error_state=1;
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	89 83       	std	Y+1, r24	; 0x01
 292:	e0 c0       	rjmp	.+448    	; 0x454 <DIO_set_pin_direction+0x1e2>
		}else if(Pin_no>=DIO_max_pin_no){
 294:	8b 81       	ldd	r24, Y+3	; 0x03
 296:	88 30       	cpi	r24, 0x08	; 8
 298:	18 f0       	brcs	.+6      	; 0x2a0 <DIO_set_pin_direction+0x2e>
			Error_state=2;
 29a:	82 e0       	ldi	r24, 0x02	; 2
 29c:	89 83       	std	Y+1, r24	; 0x01
 29e:	da c0       	rjmp	.+436    	; 0x454 <DIO_set_pin_direction+0x1e2>
		}else if((Pin_direction!=DIO_Input)&&(Pin_direction!=DIO_Output)){
 2a0:	8c 81       	ldd	r24, Y+4	; 0x04
 2a2:	88 23       	and	r24, r24
 2a4:	31 f0       	breq	.+12     	; 0x2b2 <DIO_set_pin_direction+0x40>
 2a6:	8c 81       	ldd	r24, Y+4	; 0x04
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	19 f0       	breq	.+6      	; 0x2b2 <DIO_set_pin_direction+0x40>
			Error_state=3;
 2ac:	83 e0       	ldi	r24, 0x03	; 3
 2ae:	89 83       	std	Y+1, r24	; 0x01
 2b0:	d1 c0       	rjmp	.+418    	; 0x454 <DIO_set_pin_direction+0x1e2>
		}else{
			switch(Port_no){
 2b2:	8a 81       	ldd	r24, Y+2	; 0x02
 2b4:	28 2f       	mov	r18, r24
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	3e 83       	std	Y+6, r19	; 0x06
 2ba:	2d 83       	std	Y+5, r18	; 0x05
 2bc:	8d 81       	ldd	r24, Y+5	; 0x05
 2be:	9e 81       	ldd	r25, Y+6	; 0x06
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	91 05       	cpc	r25, r1
 2c4:	09 f4       	brne	.+2      	; 0x2c8 <DIO_set_pin_direction+0x56>
 2c6:	43 c0       	rjmp	.+134    	; 0x34e <DIO_set_pin_direction+0xdc>
 2c8:	2d 81       	ldd	r18, Y+5	; 0x05
 2ca:	3e 81       	ldd	r19, Y+6	; 0x06
 2cc:	22 30       	cpi	r18, 0x02	; 2
 2ce:	31 05       	cpc	r19, r1
 2d0:	2c f4       	brge	.+10     	; 0x2dc <DIO_set_pin_direction+0x6a>
 2d2:	8d 81       	ldd	r24, Y+5	; 0x05
 2d4:	9e 81       	ldd	r25, Y+6	; 0x06
 2d6:	00 97       	sbiw	r24, 0x00	; 0
 2d8:	71 f0       	breq	.+28     	; 0x2f6 <DIO_set_pin_direction+0x84>
 2da:	bc c0       	rjmp	.+376    	; 0x454 <DIO_set_pin_direction+0x1e2>
 2dc:	2d 81       	ldd	r18, Y+5	; 0x05
 2de:	3e 81       	ldd	r19, Y+6	; 0x06
 2e0:	22 30       	cpi	r18, 0x02	; 2
 2e2:	31 05       	cpc	r19, r1
 2e4:	09 f4       	brne	.+2      	; 0x2e8 <DIO_set_pin_direction+0x76>
 2e6:	5f c0       	rjmp	.+190    	; 0x3a6 <DIO_set_pin_direction+0x134>
 2e8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ea:	9e 81       	ldd	r25, Y+6	; 0x06
 2ec:	83 30       	cpi	r24, 0x03	; 3
 2ee:	91 05       	cpc	r25, r1
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <DIO_set_pin_direction+0x82>
 2f2:	85 c0       	rjmp	.+266    	; 0x3fe <DIO_set_pin_direction+0x18c>
 2f4:	af c0       	rjmp	.+350    	; 0x454 <DIO_set_pin_direction+0x1e2>
			case Group_A: assign_bit(DIO_u8_DDRA,Pin_no,Pin_direction);
 2f6:	8c 81       	ldd	r24, Y+4	; 0x04
 2f8:	81 30       	cpi	r24, 0x01	; 1
 2fa:	a1 f4       	brne	.+40     	; 0x324 <DIO_set_pin_direction+0xb2>
 2fc:	aa e3       	ldi	r26, 0x3A	; 58
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	ea e3       	ldi	r30, 0x3A	; 58
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	48 2f       	mov	r20, r24
 308:	8b 81       	ldd	r24, Y+3	; 0x03
 30a:	28 2f       	mov	r18, r24
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 2e       	mov	r0, r18
 314:	02 c0       	rjmp	.+4      	; 0x31a <DIO_set_pin_direction+0xa8>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <DIO_set_pin_direction+0xa4>
 31e:	84 2b       	or	r24, r20
 320:	8c 93       	st	X, r24
 322:	98 c0       	rjmp	.+304    	; 0x454 <DIO_set_pin_direction+0x1e2>
 324:	aa e3       	ldi	r26, 0x3A	; 58
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	ea e3       	ldi	r30, 0x3A	; 58
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	48 2f       	mov	r20, r24
 330:	8b 81       	ldd	r24, Y+3	; 0x03
 332:	28 2f       	mov	r18, r24
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	02 2e       	mov	r0, r18
 33c:	02 c0       	rjmp	.+4      	; 0x342 <DIO_set_pin_direction+0xd0>
 33e:	88 0f       	add	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	0a 94       	dec	r0
 344:	e2 f7       	brpl	.-8      	; 0x33e <DIO_set_pin_direction+0xcc>
 346:	80 95       	com	r24
 348:	84 23       	and	r24, r20
 34a:	8c 93       	st	X, r24
 34c:	83 c0       	rjmp	.+262    	; 0x454 <DIO_set_pin_direction+0x1e2>
			break;
			case Group_B: assign_bit(DIO_u8_DDRB,Pin_no,Pin_direction);
 34e:	8c 81       	ldd	r24, Y+4	; 0x04
 350:	81 30       	cpi	r24, 0x01	; 1
 352:	a1 f4       	brne	.+40     	; 0x37c <DIO_set_pin_direction+0x10a>
 354:	a7 e3       	ldi	r26, 0x37	; 55
 356:	b0 e0       	ldi	r27, 0x00	; 0
 358:	e7 e3       	ldi	r30, 0x37	; 55
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	80 81       	ld	r24, Z
 35e:	48 2f       	mov	r20, r24
 360:	8b 81       	ldd	r24, Y+3	; 0x03
 362:	28 2f       	mov	r18, r24
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	02 2e       	mov	r0, r18
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_set_pin_direction+0x100>
 36e:	88 0f       	add	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	0a 94       	dec	r0
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_set_pin_direction+0xfc>
 376:	84 2b       	or	r24, r20
 378:	8c 93       	st	X, r24
 37a:	6c c0       	rjmp	.+216    	; 0x454 <DIO_set_pin_direction+0x1e2>
 37c:	a7 e3       	ldi	r26, 0x37	; 55
 37e:	b0 e0       	ldi	r27, 0x00	; 0
 380:	e7 e3       	ldi	r30, 0x37	; 55
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	48 2f       	mov	r20, r24
 388:	8b 81       	ldd	r24, Y+3	; 0x03
 38a:	28 2f       	mov	r18, r24
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 2e       	mov	r0, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_set_pin_direction+0x128>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	0a 94       	dec	r0
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_set_pin_direction+0x124>
 39e:	80 95       	com	r24
 3a0:	84 23       	and	r24, r20
 3a2:	8c 93       	st	X, r24
 3a4:	57 c0       	rjmp	.+174    	; 0x454 <DIO_set_pin_direction+0x1e2>
			break;
			case Group_C: assign_bit(DIO_u8_DDRC,Pin_no,Pin_direction);
 3a6:	8c 81       	ldd	r24, Y+4	; 0x04
 3a8:	81 30       	cpi	r24, 0x01	; 1
 3aa:	a1 f4       	brne	.+40     	; 0x3d4 <DIO_set_pin_direction+0x162>
 3ac:	a4 e3       	ldi	r26, 0x34	; 52
 3ae:	b0 e0       	ldi	r27, 0x00	; 0
 3b0:	e4 e3       	ldi	r30, 0x34	; 52
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	48 2f       	mov	r20, r24
 3b8:	8b 81       	ldd	r24, Y+3	; 0x03
 3ba:	28 2f       	mov	r18, r24
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 2e       	mov	r0, r18
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <DIO_set_pin_direction+0x158>
 3c6:	88 0f       	add	r24, r24
 3c8:	99 1f       	adc	r25, r25
 3ca:	0a 94       	dec	r0
 3cc:	e2 f7       	brpl	.-8      	; 0x3c6 <DIO_set_pin_direction+0x154>
 3ce:	84 2b       	or	r24, r20
 3d0:	8c 93       	st	X, r24
 3d2:	40 c0       	rjmp	.+128    	; 0x454 <DIO_set_pin_direction+0x1e2>
 3d4:	a4 e3       	ldi	r26, 0x34	; 52
 3d6:	b0 e0       	ldi	r27, 0x00	; 0
 3d8:	e4 e3       	ldi	r30, 0x34	; 52
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	48 2f       	mov	r20, r24
 3e0:	8b 81       	ldd	r24, Y+3	; 0x03
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	02 2e       	mov	r0, r18
 3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <DIO_set_pin_direction+0x180>
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	0a 94       	dec	r0
 3f4:	e2 f7       	brpl	.-8      	; 0x3ee <DIO_set_pin_direction+0x17c>
 3f6:	80 95       	com	r24
 3f8:	84 23       	and	r24, r20
 3fa:	8c 93       	st	X, r24
 3fc:	2b c0       	rjmp	.+86     	; 0x454 <DIO_set_pin_direction+0x1e2>
			break;
			case Group_D: assign_bit(DIO_u8_DDRD,Pin_no,Pin_direction);
 3fe:	8c 81       	ldd	r24, Y+4	; 0x04
 400:	81 30       	cpi	r24, 0x01	; 1
 402:	a1 f4       	brne	.+40     	; 0x42c <DIO_set_pin_direction+0x1ba>
 404:	a1 e3       	ldi	r26, 0x31	; 49
 406:	b0 e0       	ldi	r27, 0x00	; 0
 408:	e1 e3       	ldi	r30, 0x31	; 49
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	48 2f       	mov	r20, r24
 410:	8b 81       	ldd	r24, Y+3	; 0x03
 412:	28 2f       	mov	r18, r24
 414:	30 e0       	ldi	r19, 0x00	; 0
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 2e       	mov	r0, r18
 41c:	02 c0       	rjmp	.+4      	; 0x422 <DIO_set_pin_direction+0x1b0>
 41e:	88 0f       	add	r24, r24
 420:	99 1f       	adc	r25, r25
 422:	0a 94       	dec	r0
 424:	e2 f7       	brpl	.-8      	; 0x41e <DIO_set_pin_direction+0x1ac>
 426:	84 2b       	or	r24, r20
 428:	8c 93       	st	X, r24
 42a:	14 c0       	rjmp	.+40     	; 0x454 <DIO_set_pin_direction+0x1e2>
 42c:	a1 e3       	ldi	r26, 0x31	; 49
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	e1 e3       	ldi	r30, 0x31	; 49
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	80 81       	ld	r24, Z
 436:	48 2f       	mov	r20, r24
 438:	8b 81       	ldd	r24, Y+3	; 0x03
 43a:	28 2f       	mov	r18, r24
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 2e       	mov	r0, r18
 444:	02 c0       	rjmp	.+4      	; 0x44a <DIO_set_pin_direction+0x1d8>
 446:	88 0f       	add	r24, r24
 448:	99 1f       	adc	r25, r25
 44a:	0a 94       	dec	r0
 44c:	e2 f7       	brpl	.-8      	; 0x446 <DIO_set_pin_direction+0x1d4>
 44e:	80 95       	com	r24
 450:	84 23       	and	r24, r20
 452:	8c 93       	st	X, r24
			break;
			}
		}
		return Error_state;
 454:	89 81       	ldd	r24, Y+1	; 0x01
}
 456:	26 96       	adiw	r28, 0x06	; 6
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	f8 94       	cli
 45c:	de bf       	out	0x3e, r29	; 62
 45e:	0f be       	out	0x3f, r0	; 63
 460:	cd bf       	out	0x3d, r28	; 61
 462:	cf 91       	pop	r28
 464:	df 91       	pop	r29
 466:	08 95       	ret

00000468 <DIO_get_pin_value>:

u8 DIO_get_pin_value(u8 Port_no,u8 Pin_no,u8*Pin_value){
 468:	df 93       	push	r29
 46a:	cf 93       	push	r28
 46c:	cd b7       	in	r28, 0x3d	; 61
 46e:	de b7       	in	r29, 0x3e	; 62
 470:	27 97       	sbiw	r28, 0x07	; 7
 472:	0f b6       	in	r0, 0x3f	; 63
 474:	f8 94       	cli
 476:	de bf       	out	0x3e, r29	; 62
 478:	0f be       	out	0x3f, r0	; 63
 47a:	cd bf       	out	0x3d, r28	; 61
 47c:	8a 83       	std	Y+2, r24	; 0x02
 47e:	6b 83       	std	Y+3, r22	; 0x03
 480:	5d 83       	std	Y+5, r21	; 0x05
 482:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_state=0;
 484:	19 82       	std	Y+1, r1	; 0x01
			if(Port_no>=DIO_max_port_no){
 486:	8a 81       	ldd	r24, Y+2	; 0x02
 488:	84 30       	cpi	r24, 0x04	; 4
 48a:	18 f0       	brcs	.+6      	; 0x492 <DIO_get_pin_value+0x2a>
				Error_state=1;
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	89 83       	std	Y+1, r24	; 0x01
 490:	76 c0       	rjmp	.+236    	; 0x57e <DIO_get_pin_value+0x116>
			}else if(Pin_no>=DIO_max_pin_no){
 492:	8b 81       	ldd	r24, Y+3	; 0x03
 494:	88 30       	cpi	r24, 0x08	; 8
 496:	18 f0       	brcs	.+6      	; 0x49e <DIO_get_pin_value+0x36>
				Error_state=2;
 498:	82 e0       	ldi	r24, 0x02	; 2
 49a:	89 83       	std	Y+1, r24	; 0x01
 49c:	70 c0       	rjmp	.+224    	; 0x57e <DIO_get_pin_value+0x116>
			}else{
				switch(Port_no){
 49e:	8a 81       	ldd	r24, Y+2	; 0x02
 4a0:	28 2f       	mov	r18, r24
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	3f 83       	std	Y+7, r19	; 0x07
 4a6:	2e 83       	std	Y+6, r18	; 0x06
 4a8:	4e 81       	ldd	r20, Y+6	; 0x06
 4aa:	5f 81       	ldd	r21, Y+7	; 0x07
 4ac:	41 30       	cpi	r20, 0x01	; 1
 4ae:	51 05       	cpc	r21, r1
 4b0:	59 f1       	breq	.+86     	; 0x508 <DIO_get_pin_value+0xa0>
 4b2:	8e 81       	ldd	r24, Y+6	; 0x06
 4b4:	9f 81       	ldd	r25, Y+7	; 0x07
 4b6:	82 30       	cpi	r24, 0x02	; 2
 4b8:	91 05       	cpc	r25, r1
 4ba:	34 f4       	brge	.+12     	; 0x4c8 <DIO_get_pin_value+0x60>
 4bc:	2e 81       	ldd	r18, Y+6	; 0x06
 4be:	3f 81       	ldd	r19, Y+7	; 0x07
 4c0:	21 15       	cp	r18, r1
 4c2:	31 05       	cpc	r19, r1
 4c4:	69 f0       	breq	.+26     	; 0x4e0 <DIO_get_pin_value+0x78>
 4c6:	5b c0       	rjmp	.+182    	; 0x57e <DIO_get_pin_value+0x116>
 4c8:	4e 81       	ldd	r20, Y+6	; 0x06
 4ca:	5f 81       	ldd	r21, Y+7	; 0x07
 4cc:	42 30       	cpi	r20, 0x02	; 2
 4ce:	51 05       	cpc	r21, r1
 4d0:	79 f1       	breq	.+94     	; 0x530 <DIO_get_pin_value+0xc8>
 4d2:	8e 81       	ldd	r24, Y+6	; 0x06
 4d4:	9f 81       	ldd	r25, Y+7	; 0x07
 4d6:	83 30       	cpi	r24, 0x03	; 3
 4d8:	91 05       	cpc	r25, r1
 4da:	09 f4       	brne	.+2      	; 0x4de <DIO_get_pin_value+0x76>
 4dc:	3d c0       	rjmp	.+122    	; 0x558 <DIO_get_pin_value+0xf0>
 4de:	4f c0       	rjmp	.+158    	; 0x57e <DIO_get_pin_value+0x116>
				case Group_A: *Pin_value=get_bit(DIO_u8_PINA,Pin_no);
 4e0:	e9 e3       	ldi	r30, 0x39	; 57
 4e2:	f0 e0       	ldi	r31, 0x00	; 0
 4e4:	80 81       	ld	r24, Z
 4e6:	28 2f       	mov	r18, r24
 4e8:	30 e0       	ldi	r19, 0x00	; 0
 4ea:	8b 81       	ldd	r24, Y+3	; 0x03
 4ec:	88 2f       	mov	r24, r24
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	a9 01       	movw	r20, r18
 4f2:	02 c0       	rjmp	.+4      	; 0x4f8 <DIO_get_pin_value+0x90>
 4f4:	55 95       	asr	r21
 4f6:	47 95       	ror	r20
 4f8:	8a 95       	dec	r24
 4fa:	e2 f7       	brpl	.-8      	; 0x4f4 <DIO_get_pin_value+0x8c>
 4fc:	ca 01       	movw	r24, r20
 4fe:	81 70       	andi	r24, 0x01	; 1
 500:	ec 81       	ldd	r30, Y+4	; 0x04
 502:	fd 81       	ldd	r31, Y+5	; 0x05
 504:	80 83       	st	Z, r24
 506:	3b c0       	rjmp	.+118    	; 0x57e <DIO_get_pin_value+0x116>
				break;
				case Group_B: *Pin_value=get_bit(DIO_u8_PINB,Pin_no);
 508:	e6 e3       	ldi	r30, 0x36	; 54
 50a:	f0 e0       	ldi	r31, 0x00	; 0
 50c:	80 81       	ld	r24, Z
 50e:	28 2f       	mov	r18, r24
 510:	30 e0       	ldi	r19, 0x00	; 0
 512:	8b 81       	ldd	r24, Y+3	; 0x03
 514:	88 2f       	mov	r24, r24
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	a9 01       	movw	r20, r18
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_get_pin_value+0xb8>
 51c:	55 95       	asr	r21
 51e:	47 95       	ror	r20
 520:	8a 95       	dec	r24
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_get_pin_value+0xb4>
 524:	ca 01       	movw	r24, r20
 526:	81 70       	andi	r24, 0x01	; 1
 528:	ec 81       	ldd	r30, Y+4	; 0x04
 52a:	fd 81       	ldd	r31, Y+5	; 0x05
 52c:	80 83       	st	Z, r24
 52e:	27 c0       	rjmp	.+78     	; 0x57e <DIO_get_pin_value+0x116>
				break;
				case Group_C: *Pin_value=get_bit(DIO_u8_PINC,Pin_no);
 530:	e3 e3       	ldi	r30, 0x33	; 51
 532:	f0 e0       	ldi	r31, 0x00	; 0
 534:	80 81       	ld	r24, Z
 536:	28 2f       	mov	r18, r24
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	8b 81       	ldd	r24, Y+3	; 0x03
 53c:	88 2f       	mov	r24, r24
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	a9 01       	movw	r20, r18
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_get_pin_value+0xe0>
 544:	55 95       	asr	r21
 546:	47 95       	ror	r20
 548:	8a 95       	dec	r24
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_get_pin_value+0xdc>
 54c:	ca 01       	movw	r24, r20
 54e:	81 70       	andi	r24, 0x01	; 1
 550:	ec 81       	ldd	r30, Y+4	; 0x04
 552:	fd 81       	ldd	r31, Y+5	; 0x05
 554:	80 83       	st	Z, r24
 556:	13 c0       	rjmp	.+38     	; 0x57e <DIO_get_pin_value+0x116>
				break;
				case Group_D: *Pin_value=get_bit(DIO_u8_PIND,Pin_no);
 558:	e0 e3       	ldi	r30, 0x30	; 48
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	80 81       	ld	r24, Z
 55e:	28 2f       	mov	r18, r24
 560:	30 e0       	ldi	r19, 0x00	; 0
 562:	8b 81       	ldd	r24, Y+3	; 0x03
 564:	88 2f       	mov	r24, r24
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	a9 01       	movw	r20, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_get_pin_value+0x108>
 56c:	55 95       	asr	r21
 56e:	47 95       	ror	r20
 570:	8a 95       	dec	r24
 572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_get_pin_value+0x104>
 574:	ca 01       	movw	r24, r20
 576:	81 70       	andi	r24, 0x01	; 1
 578:	ec 81       	ldd	r30, Y+4	; 0x04
 57a:	fd 81       	ldd	r31, Y+5	; 0x05
 57c:	80 83       	st	Z, r24
				break;
				}
			}
			return Error_state;
 57e:	89 81       	ldd	r24, Y+1	; 0x01
}
 580:	27 96       	adiw	r28, 0x07	; 7
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	f8 94       	cli
 586:	de bf       	out	0x3e, r29	; 62
 588:	0f be       	out	0x3f, r0	; 63
 58a:	cd bf       	out	0x3d, r28	; 61
 58c:	cf 91       	pop	r28
 58e:	df 91       	pop	r29
 590:	08 95       	ret

00000592 <DIO_set_port_value>:

u8 DIO_set_port_value(u8 Port_no,u8 Port_value){
 592:	df 93       	push	r29
 594:	cf 93       	push	r28
 596:	00 d0       	rcall	.+0      	; 0x598 <DIO_set_port_value+0x6>
 598:	00 d0       	rcall	.+0      	; 0x59a <DIO_set_port_value+0x8>
 59a:	0f 92       	push	r0
 59c:	cd b7       	in	r28, 0x3d	; 61
 59e:	de b7       	in	r29, 0x3e	; 62
 5a0:	8a 83       	std	Y+2, r24	; 0x02
 5a2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_state=0;
 5a4:	19 82       	std	Y+1, r1	; 0x01
		if(Port_no>=DIO_max_port_no){
 5a6:	8a 81       	ldd	r24, Y+2	; 0x02
 5a8:	84 30       	cpi	r24, 0x04	; 4
 5aa:	18 f0       	brcs	.+6      	; 0x5b2 <DIO_set_port_value+0x20>
			Error_state=1;
 5ac:	81 e0       	ldi	r24, 0x01	; 1
 5ae:	89 83       	std	Y+1, r24	; 0x01
 5b0:	32 c0       	rjmp	.+100    	; 0x616 <DIO_set_port_value+0x84>
		}else if(Port_value>DIO_max_port_value){
			Error_state=2;
		}else{
			switch(Port_no){
 5b2:	8a 81       	ldd	r24, Y+2	; 0x02
 5b4:	28 2f       	mov	r18, r24
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	3d 83       	std	Y+5, r19	; 0x05
 5ba:	2c 83       	std	Y+4, r18	; 0x04
 5bc:	8c 81       	ldd	r24, Y+4	; 0x04
 5be:	9d 81       	ldd	r25, Y+5	; 0x05
 5c0:	81 30       	cpi	r24, 0x01	; 1
 5c2:	91 05       	cpc	r25, r1
 5c4:	d1 f0       	breq	.+52     	; 0x5fa <DIO_set_port_value+0x68>
 5c6:	2c 81       	ldd	r18, Y+4	; 0x04
 5c8:	3d 81       	ldd	r19, Y+5	; 0x05
 5ca:	22 30       	cpi	r18, 0x02	; 2
 5cc:	31 05       	cpc	r19, r1
 5ce:	2c f4       	brge	.+10     	; 0x5da <DIO_set_port_value+0x48>
 5d0:	8c 81       	ldd	r24, Y+4	; 0x04
 5d2:	9d 81       	ldd	r25, Y+5	; 0x05
 5d4:	00 97       	sbiw	r24, 0x00	; 0
 5d6:	61 f0       	breq	.+24     	; 0x5f0 <DIO_set_port_value+0x5e>
 5d8:	1e c0       	rjmp	.+60     	; 0x616 <DIO_set_port_value+0x84>
 5da:	2c 81       	ldd	r18, Y+4	; 0x04
 5dc:	3d 81       	ldd	r19, Y+5	; 0x05
 5de:	22 30       	cpi	r18, 0x02	; 2
 5e0:	31 05       	cpc	r19, r1
 5e2:	81 f0       	breq	.+32     	; 0x604 <DIO_set_port_value+0x72>
 5e4:	8c 81       	ldd	r24, Y+4	; 0x04
 5e6:	9d 81       	ldd	r25, Y+5	; 0x05
 5e8:	83 30       	cpi	r24, 0x03	; 3
 5ea:	91 05       	cpc	r25, r1
 5ec:	81 f0       	breq	.+32     	; 0x60e <DIO_set_port_value+0x7c>
 5ee:	13 c0       	rjmp	.+38     	; 0x616 <DIO_set_port_value+0x84>
			case Group_A: DIO_u8_PORTA=Port_value;
 5f0:	eb e3       	ldi	r30, 0x3B	; 59
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	8b 81       	ldd	r24, Y+3	; 0x03
 5f6:	80 83       	st	Z, r24
 5f8:	0e c0       	rjmp	.+28     	; 0x616 <DIO_set_port_value+0x84>
			break;
			case Group_B: DIO_u8_PORTB=Port_value;
 5fa:	e8 e3       	ldi	r30, 0x38	; 56
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	8b 81       	ldd	r24, Y+3	; 0x03
 600:	80 83       	st	Z, r24
 602:	09 c0       	rjmp	.+18     	; 0x616 <DIO_set_port_value+0x84>
			break;
			case Group_C: DIO_u8_PORTC=Port_value;
 604:	e5 e3       	ldi	r30, 0x35	; 53
 606:	f0 e0       	ldi	r31, 0x00	; 0
 608:	8b 81       	ldd	r24, Y+3	; 0x03
 60a:	80 83       	st	Z, r24
 60c:	04 c0       	rjmp	.+8      	; 0x616 <DIO_set_port_value+0x84>
			break;
			case Group_D: DIO_u8_PORTD=Port_value;
 60e:	e2 e3       	ldi	r30, 0x32	; 50
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	8b 81       	ldd	r24, Y+3	; 0x03
 614:	80 83       	st	Z, r24
			break;
			}
		}
		return Error_state;
 616:	89 81       	ldd	r24, Y+1	; 0x01
}
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
 61c:	0f 90       	pop	r0
 61e:	0f 90       	pop	r0
 620:	0f 90       	pop	r0
 622:	cf 91       	pop	r28
 624:	df 91       	pop	r29
 626:	08 95       	ret

00000628 <DIO_set_port_direction>:

u8 DIO_set_port_direction(u8 Port_no,u8 Port_direction){
 628:	df 93       	push	r29
 62a:	cf 93       	push	r28
 62c:	00 d0       	rcall	.+0      	; 0x62e <DIO_set_port_direction+0x6>
 62e:	00 d0       	rcall	.+0      	; 0x630 <DIO_set_port_direction+0x8>
 630:	0f 92       	push	r0
 632:	cd b7       	in	r28, 0x3d	; 61
 634:	de b7       	in	r29, 0x3e	; 62
 636:	8a 83       	std	Y+2, r24	; 0x02
 638:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_state=0;
 63a:	19 82       	std	Y+1, r1	; 0x01
			if(Port_no>=DIO_max_port_no){
 63c:	8a 81       	ldd	r24, Y+2	; 0x02
 63e:	84 30       	cpi	r24, 0x04	; 4
 640:	18 f0       	brcs	.+6      	; 0x648 <DIO_set_port_direction+0x20>
				Error_state=1;
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	89 83       	std	Y+1, r24	; 0x01
 646:	32 c0       	rjmp	.+100    	; 0x6ac <DIO_set_port_direction+0x84>
			}else if(Port_direction>DIO_max_port_direction){
				Error_state=2;
			}else{
				switch(Port_no){
 648:	8a 81       	ldd	r24, Y+2	; 0x02
 64a:	28 2f       	mov	r18, r24
 64c:	30 e0       	ldi	r19, 0x00	; 0
 64e:	3d 83       	std	Y+5, r19	; 0x05
 650:	2c 83       	std	Y+4, r18	; 0x04
 652:	8c 81       	ldd	r24, Y+4	; 0x04
 654:	9d 81       	ldd	r25, Y+5	; 0x05
 656:	81 30       	cpi	r24, 0x01	; 1
 658:	91 05       	cpc	r25, r1
 65a:	d1 f0       	breq	.+52     	; 0x690 <DIO_set_port_direction+0x68>
 65c:	2c 81       	ldd	r18, Y+4	; 0x04
 65e:	3d 81       	ldd	r19, Y+5	; 0x05
 660:	22 30       	cpi	r18, 0x02	; 2
 662:	31 05       	cpc	r19, r1
 664:	2c f4       	brge	.+10     	; 0x670 <DIO_set_port_direction+0x48>
 666:	8c 81       	ldd	r24, Y+4	; 0x04
 668:	9d 81       	ldd	r25, Y+5	; 0x05
 66a:	00 97       	sbiw	r24, 0x00	; 0
 66c:	61 f0       	breq	.+24     	; 0x686 <DIO_set_port_direction+0x5e>
 66e:	1e c0       	rjmp	.+60     	; 0x6ac <DIO_set_port_direction+0x84>
 670:	2c 81       	ldd	r18, Y+4	; 0x04
 672:	3d 81       	ldd	r19, Y+5	; 0x05
 674:	22 30       	cpi	r18, 0x02	; 2
 676:	31 05       	cpc	r19, r1
 678:	81 f0       	breq	.+32     	; 0x69a <DIO_set_port_direction+0x72>
 67a:	8c 81       	ldd	r24, Y+4	; 0x04
 67c:	9d 81       	ldd	r25, Y+5	; 0x05
 67e:	83 30       	cpi	r24, 0x03	; 3
 680:	91 05       	cpc	r25, r1
 682:	81 f0       	breq	.+32     	; 0x6a4 <DIO_set_port_direction+0x7c>
 684:	13 c0       	rjmp	.+38     	; 0x6ac <DIO_set_port_direction+0x84>
				case Group_A: DIO_u8_DDRA=Port_direction;
 686:	ea e3       	ldi	r30, 0x3A	; 58
 688:	f0 e0       	ldi	r31, 0x00	; 0
 68a:	8b 81       	ldd	r24, Y+3	; 0x03
 68c:	80 83       	st	Z, r24
 68e:	0e c0       	rjmp	.+28     	; 0x6ac <DIO_set_port_direction+0x84>
				break;
				case Group_B: DIO_u8_DDRB=Port_direction;
 690:	e7 e3       	ldi	r30, 0x37	; 55
 692:	f0 e0       	ldi	r31, 0x00	; 0
 694:	8b 81       	ldd	r24, Y+3	; 0x03
 696:	80 83       	st	Z, r24
 698:	09 c0       	rjmp	.+18     	; 0x6ac <DIO_set_port_direction+0x84>
				break;
				case Group_C: DIO_u8_DDRC=Port_direction;
 69a:	e4 e3       	ldi	r30, 0x34	; 52
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	8b 81       	ldd	r24, Y+3	; 0x03
 6a0:	80 83       	st	Z, r24
 6a2:	04 c0       	rjmp	.+8      	; 0x6ac <DIO_set_port_direction+0x84>
				break;
				case Group_D: DIO_u8_DDRD=Port_direction;;
 6a4:	e1 e3       	ldi	r30, 0x31	; 49
 6a6:	f0 e0       	ldi	r31, 0x00	; 0
 6a8:	8b 81       	ldd	r24, Y+3	; 0x03
 6aa:	80 83       	st	Z, r24
				break;
				}
			}
			return Error_state;
 6ac:	89 81       	ldd	r24, Y+1	; 0x01
}
 6ae:	0f 90       	pop	r0
 6b0:	0f 90       	pop	r0
 6b2:	0f 90       	pop	r0
 6b4:	0f 90       	pop	r0
 6b6:	0f 90       	pop	r0
 6b8:	cf 91       	pop	r28
 6ba:	df 91       	pop	r29
 6bc:	08 95       	ret

000006be <INT_ENABLE_SPECIFIC_SIE>:

void (*pvoid_callback[3]) (void);

//enable  for prepheral
void INT_ENABLE_SPECIFIC_SIE(u8 INT_index)
{
 6be:	df 93       	push	r29
 6c0:	cf 93       	push	r28
 6c2:	00 d0       	rcall	.+0      	; 0x6c4 <INT_ENABLE_SPECIFIC_SIE+0x6>
 6c4:	0f 92       	push	r0
 6c6:	cd b7       	in	r28, 0x3d	; 61
 6c8:	de b7       	in	r29, 0x3e	; 62
 6ca:	89 83       	std	Y+1, r24	; 0x01
	switch (INT_index)
 6cc:	89 81       	ldd	r24, Y+1	; 0x01
 6ce:	28 2f       	mov	r18, r24
 6d0:	30 e0       	ldi	r19, 0x00	; 0
 6d2:	3b 83       	std	Y+3, r19	; 0x03
 6d4:	2a 83       	std	Y+2, r18	; 0x02
 6d6:	8a 81       	ldd	r24, Y+2	; 0x02
 6d8:	9b 81       	ldd	r25, Y+3	; 0x03
 6da:	81 30       	cpi	r24, 0x01	; 1
 6dc:	91 05       	cpc	r25, r1
 6de:	89 f0       	breq	.+34     	; 0x702 <INT_ENABLE_SPECIFIC_SIE+0x44>
 6e0:	2a 81       	ldd	r18, Y+2	; 0x02
 6e2:	3b 81       	ldd	r19, Y+3	; 0x03
 6e4:	22 30       	cpi	r18, 0x02	; 2
 6e6:	31 05       	cpc	r19, r1
 6e8:	a1 f0       	breq	.+40     	; 0x712 <INT_ENABLE_SPECIFIC_SIE+0x54>
 6ea:	8a 81       	ldd	r24, Y+2	; 0x02
 6ec:	9b 81       	ldd	r25, Y+3	; 0x03
 6ee:	00 97       	sbiw	r24, 0x00	; 0
 6f0:	b9 f4       	brne	.+46     	; 0x720 <INT_ENABLE_SPECIFIC_SIE+0x62>
	{
	case INT_0:
	set_bit(GICR,INT_0_E_BIT);//external interrupt pin 0
 6f2:	ab e5       	ldi	r26, 0x5B	; 91
 6f4:	b0 e0       	ldi	r27, 0x00	; 0
 6f6:	eb e5       	ldi	r30, 0x5B	; 91
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	80 81       	ld	r24, Z
 6fc:	80 64       	ori	r24, 0x40	; 64
 6fe:	8c 93       	st	X, r24
 700:	0f c0       	rjmp	.+30     	; 0x720 <INT_ENABLE_SPECIFIC_SIE+0x62>
	break;
	case INT_1:
		set_bit(GICR,INT_1_E_BIT);//external interrupt pin 1
 702:	ab e5       	ldi	r26, 0x5B	; 91
 704:	b0 e0       	ldi	r27, 0x00	; 0
 706:	eb e5       	ldi	r30, 0x5B	; 91
 708:	f0 e0       	ldi	r31, 0x00	; 0
 70a:	80 81       	ld	r24, Z
 70c:	80 68       	ori	r24, 0x80	; 128
 70e:	8c 93       	st	X, r24
 710:	07 c0       	rjmp	.+14     	; 0x720 <INT_ENABLE_SPECIFIC_SIE+0x62>
		break;
	case INT_2:
		set_bit(GICR,INT_2_E_BIT);//external interrupt pin 2
 712:	ab e5       	ldi	r26, 0x5B	; 91
 714:	b0 e0       	ldi	r27, 0x00	; 0
 716:	eb e5       	ldi	r30, 0x5B	; 91
 718:	f0 e0       	ldi	r31, 0x00	; 0
 71a:	80 81       	ld	r24, Z
 71c:	80 62       	ori	r24, 0x20	; 32
 71e:	8c 93       	st	X, r24
		break;
	}

}
 720:	0f 90       	pop	r0
 722:	0f 90       	pop	r0
 724:	0f 90       	pop	r0
 726:	cf 91       	pop	r28
 728:	df 91       	pop	r29
 72a:	08 95       	ret

0000072c <INT_DISABLE>:

// disable for prepheral
void INT_DISABLE(u8 INT_index)
{
 72c:	df 93       	push	r29
 72e:	cf 93       	push	r28
 730:	00 d0       	rcall	.+0      	; 0x732 <INT_DISABLE+0x6>
 732:	0f 92       	push	r0
 734:	cd b7       	in	r28, 0x3d	; 61
 736:	de b7       	in	r29, 0x3e	; 62
 738:	89 83       	std	Y+1, r24	; 0x01
	switch (INT_index)
 73a:	89 81       	ldd	r24, Y+1	; 0x01
 73c:	28 2f       	mov	r18, r24
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	3b 83       	std	Y+3, r19	; 0x03
 742:	2a 83       	std	Y+2, r18	; 0x02
 744:	8a 81       	ldd	r24, Y+2	; 0x02
 746:	9b 81       	ldd	r25, Y+3	; 0x03
 748:	81 30       	cpi	r24, 0x01	; 1
 74a:	91 05       	cpc	r25, r1
 74c:	89 f0       	breq	.+34     	; 0x770 <INT_DISABLE+0x44>
 74e:	2a 81       	ldd	r18, Y+2	; 0x02
 750:	3b 81       	ldd	r19, Y+3	; 0x03
 752:	22 30       	cpi	r18, 0x02	; 2
 754:	31 05       	cpc	r19, r1
 756:	a1 f0       	breq	.+40     	; 0x780 <INT_DISABLE+0x54>
 758:	8a 81       	ldd	r24, Y+2	; 0x02
 75a:	9b 81       	ldd	r25, Y+3	; 0x03
 75c:	00 97       	sbiw	r24, 0x00	; 0
 75e:	b9 f4       	brne	.+46     	; 0x78e <INT_DISABLE+0x62>
	{
	case INT_0:
	clear_bit(GICR,INT_0_E_BIT);//external interrupt pin 0
 760:	ab e5       	ldi	r26, 0x5B	; 91
 762:	b0 e0       	ldi	r27, 0x00	; 0
 764:	eb e5       	ldi	r30, 0x5B	; 91
 766:	f0 e0       	ldi	r31, 0x00	; 0
 768:	80 81       	ld	r24, Z
 76a:	8f 7b       	andi	r24, 0xBF	; 191
 76c:	8c 93       	st	X, r24
 76e:	0f c0       	rjmp	.+30     	; 0x78e <INT_DISABLE+0x62>
	break;
	case INT_1:
		clear_bit(GICR,INT_1_E_BIT);//external interrupt pin 1
 770:	ab e5       	ldi	r26, 0x5B	; 91
 772:	b0 e0       	ldi	r27, 0x00	; 0
 774:	eb e5       	ldi	r30, 0x5B	; 91
 776:	f0 e0       	ldi	r31, 0x00	; 0
 778:	80 81       	ld	r24, Z
 77a:	8f 77       	andi	r24, 0x7F	; 127
 77c:	8c 93       	st	X, r24
 77e:	07 c0       	rjmp	.+14     	; 0x78e <INT_DISABLE+0x62>
		break;
	case INT_2:
		clear_bit(GICR,INT_2_E_BIT);//external interrupt pin 2
 780:	ab e5       	ldi	r26, 0x5B	; 91
 782:	b0 e0       	ldi	r27, 0x00	; 0
 784:	eb e5       	ldi	r30, 0x5B	; 91
 786:	f0 e0       	ldi	r31, 0x00	; 0
 788:	80 81       	ld	r24, Z
 78a:	8f 7d       	andi	r24, 0xDF	; 223
 78c:	8c 93       	st	X, r24
		break;
	}

}
 78e:	0f 90       	pop	r0
 790:	0f 90       	pop	r0
 792:	0f 90       	pop	r0
 794:	cf 91       	pop	r28
 796:	df 91       	pop	r29
 798:	08 95       	ret

0000079a <INT_SET_LEVEL>:

//SET LOW LEVEL OR HIGH LEVEL OR RISING EDGE OR FALING EDGE

void INT_SET_LEVEL(u8 INT_index,u8 INT_level)//الحاله الي انا عاوزها int_level
{
 79a:	df 93       	push	r29
 79c:	cf 93       	push	r28
 79e:	00 d0       	rcall	.+0      	; 0x7a0 <INT_SET_LEVEL+0x6>
 7a0:	00 d0       	rcall	.+0      	; 0x7a2 <INT_SET_LEVEL+0x8>
 7a2:	cd b7       	in	r28, 0x3d	; 61
 7a4:	de b7       	in	r29, 0x3e	; 62
 7a6:	89 83       	std	Y+1, r24	; 0x01
 7a8:	6a 83       	std	Y+2, r22	; 0x02

	switch (INT_index)
 7aa:	89 81       	ldd	r24, Y+1	; 0x01
 7ac:	28 2f       	mov	r18, r24
 7ae:	30 e0       	ldi	r19, 0x00	; 0
 7b0:	3c 83       	std	Y+4, r19	; 0x04
 7b2:	2b 83       	std	Y+3, r18	; 0x03
 7b4:	8b 81       	ldd	r24, Y+3	; 0x03
 7b6:	9c 81       	ldd	r25, Y+4	; 0x04
 7b8:	81 30       	cpi	r24, 0x01	; 1
 7ba:	91 05       	cpc	r25, r1
 7bc:	c9 f1       	breq	.+114    	; 0x830 <INT_SET_LEVEL+0x96>
 7be:	2b 81       	ldd	r18, Y+3	; 0x03
 7c0:	3c 81       	ldd	r19, Y+4	; 0x04
 7c2:	22 30       	cpi	r18, 0x02	; 2
 7c4:	31 05       	cpc	r19, r1
 7c6:	09 f4       	brne	.+2      	; 0x7ca <INT_SET_LEVEL+0x30>
 7c8:	61 c0       	rjmp	.+194    	; 0x88c <__stack+0x2d>
 7ca:	8b 81       	ldd	r24, Y+3	; 0x03
 7cc:	9c 81       	ldd	r25, Y+4	; 0x04
 7ce:	00 97       	sbiw	r24, 0x00	; 0
 7d0:	09 f0       	breq	.+2      	; 0x7d4 <INT_SET_LEVEL+0x3a>
 7d2:	6e c0       	rjmp	.+220    	; 0x8b0 <__stack+0x51>
	{
	case INT_0:
		assign_bit(MCUCR,bit_0_regester_MCUCR,get_bit(INT_level,0));//    يروح علي اول بتايه من الإندكس الي باعتهولي هات الرقم الي فيها وحطه في اول بتايه في الريجستر بغض النظر هيا 0 او 1 م
 7d4:	8a 81       	ldd	r24, Y+2	; 0x02
 7d6:	88 2f       	mov	r24, r24
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	81 70       	andi	r24, 0x01	; 1
 7dc:	90 70       	andi	r25, 0x00	; 0
 7de:	88 23       	and	r24, r24
 7e0:	41 f0       	breq	.+16     	; 0x7f2 <INT_SET_LEVEL+0x58>
 7e2:	a5 e5       	ldi	r26, 0x55	; 85
 7e4:	b0 e0       	ldi	r27, 0x00	; 0
 7e6:	e5 e5       	ldi	r30, 0x55	; 85
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	80 81       	ld	r24, Z
 7ec:	81 60       	ori	r24, 0x01	; 1
 7ee:	8c 93       	st	X, r24
 7f0:	07 c0       	rjmp	.+14     	; 0x800 <INT_SET_LEVEL+0x66>
 7f2:	a5 e5       	ldi	r26, 0x55	; 85
 7f4:	b0 e0       	ldi	r27, 0x00	; 0
 7f6:	e5 e5       	ldi	r30, 0x55	; 85
 7f8:	f0 e0       	ldi	r31, 0x00	; 0
 7fa:	80 81       	ld	r24, Z
 7fc:	8e 7f       	andi	r24, 0xFE	; 254
 7fe:	8c 93       	st	X, r24
		assign_bit(MCUCR,bit_1_regester_MCUCR,get_bit(INT_level,1));//    يروح علي تاني بتايه من الإندكس الي باعتهولي هات الرقم الي فيها وحطه في تاني بتايه في الريجستر بغض النظر هيا 0 او 1م
 800:	8a 81       	ldd	r24, Y+2	; 0x02
 802:	86 95       	lsr	r24
 804:	88 2f       	mov	r24, r24
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	81 70       	andi	r24, 0x01	; 1
 80a:	90 70       	andi	r25, 0x00	; 0
 80c:	88 23       	and	r24, r24
 80e:	41 f0       	breq	.+16     	; 0x820 <INT_SET_LEVEL+0x86>
 810:	a5 e5       	ldi	r26, 0x55	; 85
 812:	b0 e0       	ldi	r27, 0x00	; 0
 814:	e5 e5       	ldi	r30, 0x55	; 85
 816:	f0 e0       	ldi	r31, 0x00	; 0
 818:	80 81       	ld	r24, Z
 81a:	82 60       	ori	r24, 0x02	; 2
 81c:	8c 93       	st	X, r24
 81e:	48 c0       	rjmp	.+144    	; 0x8b0 <__stack+0x51>
 820:	a5 e5       	ldi	r26, 0x55	; 85
 822:	b0 e0       	ldi	r27, 0x00	; 0
 824:	e5 e5       	ldi	r30, 0x55	; 85
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	80 81       	ld	r24, Z
 82a:	8d 7f       	andi	r24, 0xFD	; 253
 82c:	8c 93       	st	X, r24
 82e:	40 c0       	rjmp	.+128    	; 0x8b0 <__stack+0x51>
		break;
	case INT_1:
		assign_bit(MCUCR,bit_2_regester_MCUCR,get_bit(INT_level,0));//    يروح علي اول بتايه من الإندكس الي باعتهولي هات الرقم الي فيها وحطه في تالت بتايه في الريجستر بغض النظر هيا 0 او 1م
 830:	8a 81       	ldd	r24, Y+2	; 0x02
 832:	88 2f       	mov	r24, r24
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	81 70       	andi	r24, 0x01	; 1
 838:	90 70       	andi	r25, 0x00	; 0
 83a:	88 23       	and	r24, r24
 83c:	41 f0       	breq	.+16     	; 0x84e <INT_SET_LEVEL+0xb4>
 83e:	a5 e5       	ldi	r26, 0x55	; 85
 840:	b0 e0       	ldi	r27, 0x00	; 0
 842:	e5 e5       	ldi	r30, 0x55	; 85
 844:	f0 e0       	ldi	r31, 0x00	; 0
 846:	80 81       	ld	r24, Z
 848:	84 60       	ori	r24, 0x04	; 4
 84a:	8c 93       	st	X, r24
 84c:	07 c0       	rjmp	.+14     	; 0x85c <INT_SET_LEVEL+0xc2>
 84e:	a5 e5       	ldi	r26, 0x55	; 85
 850:	b0 e0       	ldi	r27, 0x00	; 0
 852:	e5 e5       	ldi	r30, 0x55	; 85
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	80 81       	ld	r24, Z
 858:	8b 7f       	andi	r24, 0xFB	; 251
 85a:	8c 93       	st	X, r24
		assign_bit(MCUCR,bit_3_regester_MCUCR,get_bit(INT_level,1));//    يروح علي تاني بتايه من الإندكس الي باعتهولي هات الرقم الي فيها وحطه في رابع بتايه في الريجستر بغض النظر هيا 0 او 1م
 85c:	8a 81       	ldd	r24, Y+2	; 0x02
 85e:	86 95       	lsr	r24
 860:	88 2f       	mov	r24, r24
 862:	90 e0       	ldi	r25, 0x00	; 0
 864:	81 70       	andi	r24, 0x01	; 1
 866:	90 70       	andi	r25, 0x00	; 0
 868:	88 23       	and	r24, r24
 86a:	41 f0       	breq	.+16     	; 0x87c <__stack+0x1d>
 86c:	a5 e5       	ldi	r26, 0x55	; 85
 86e:	b0 e0       	ldi	r27, 0x00	; 0
 870:	e5 e5       	ldi	r30, 0x55	; 85
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	80 81       	ld	r24, Z
 876:	88 60       	ori	r24, 0x08	; 8
 878:	8c 93       	st	X, r24
 87a:	1a c0       	rjmp	.+52     	; 0x8b0 <__stack+0x51>
 87c:	a5 e5       	ldi	r26, 0x55	; 85
 87e:	b0 e0       	ldi	r27, 0x00	; 0
 880:	e5 e5       	ldi	r30, 0x55	; 85
 882:	f0 e0       	ldi	r31, 0x00	; 0
 884:	80 81       	ld	r24, Z
 886:	87 7f       	andi	r24, 0xF7	; 247
 888:	8c 93       	st	X, r24
 88a:	12 c0       	rjmp	.+36     	; 0x8b0 <__stack+0x51>
		break;
	case INT_2:
		assign_bit(MCUCSR,bit_6_regester_MCUCSR,INT_level);//الإنترابت دا موجود في ريجستر تاني ودي بتايه واحده غير الاتنين الي فوق ا
 88c:	8a 81       	ldd	r24, Y+2	; 0x02
 88e:	81 30       	cpi	r24, 0x01	; 1
 890:	41 f4       	brne	.+16     	; 0x8a2 <__stack+0x43>
 892:	a4 e5       	ldi	r26, 0x54	; 84
 894:	b0 e0       	ldi	r27, 0x00	; 0
 896:	e4 e5       	ldi	r30, 0x54	; 84
 898:	f0 e0       	ldi	r31, 0x00	; 0
 89a:	80 81       	ld	r24, Z
 89c:	80 64       	ori	r24, 0x40	; 64
 89e:	8c 93       	st	X, r24
 8a0:	07 c0       	rjmp	.+14     	; 0x8b0 <__stack+0x51>
 8a2:	a4 e5       	ldi	r26, 0x54	; 84
 8a4:	b0 e0       	ldi	r27, 0x00	; 0
 8a6:	e4 e5       	ldi	r30, 0x54	; 84
 8a8:	f0 e0       	ldi	r31, 0x00	; 0
 8aa:	80 81       	ld	r24, Z
 8ac:	8f 7b       	andi	r24, 0xBF	; 191
 8ae:	8c 93       	st	X, r24

	}



}
 8b0:	0f 90       	pop	r0
 8b2:	0f 90       	pop	r0
 8b4:	0f 90       	pop	r0
 8b6:	0f 90       	pop	r0
 8b8:	cf 91       	pop	r28
 8ba:	df 91       	pop	r29
 8bc:	08 95       	ret

000008be <INT_GLOBAL>:

//ENABLE OR DISABLE FOR ALL INTERRUPT (EXTERNAL AND INTERNAL IN MICRO EX TIMER OR ADC OR.......)
void INT_GLOBAL(u8 INT_status)
{
 8be:	df 93       	push	r29
 8c0:	cf 93       	push	r28
 8c2:	0f 92       	push	r0
 8c4:	cd b7       	in	r28, 0x3d	; 61
 8c6:	de b7       	in	r29, 0x3e	; 62
 8c8:	89 83       	std	Y+1, r24	; 0x01
	assign_bit(SREG,INT_global_BIT,INT_status);//global interrupt
 8ca:	89 81       	ldd	r24, Y+1	; 0x01
 8cc:	81 30       	cpi	r24, 0x01	; 1
 8ce:	41 f4       	brne	.+16     	; 0x8e0 <INT_GLOBAL+0x22>
 8d0:	af e5       	ldi	r26, 0x5F	; 95
 8d2:	b0 e0       	ldi	r27, 0x00	; 0
 8d4:	ef e5       	ldi	r30, 0x5F	; 95
 8d6:	f0 e0       	ldi	r31, 0x00	; 0
 8d8:	80 81       	ld	r24, Z
 8da:	80 68       	ori	r24, 0x80	; 128
 8dc:	8c 93       	st	X, r24
 8de:	07 c0       	rjmp	.+14     	; 0x8ee <INT_GLOBAL+0x30>
 8e0:	af e5       	ldi	r26, 0x5F	; 95
 8e2:	b0 e0       	ldi	r27, 0x00	; 0
 8e4:	ef e5       	ldi	r30, 0x5F	; 95
 8e6:	f0 e0       	ldi	r31, 0x00	; 0
 8e8:	80 81       	ld	r24, Z
 8ea:	8f 77       	andi	r24, 0x7F	; 127
 8ec:	8c 93       	st	X, r24


}
 8ee:	0f 90       	pop	r0
 8f0:	cf 91       	pop	r28
 8f2:	df 91       	pop	r29
 8f4:	08 95       	ret

000008f6 <__vector_1>:




void __vector_1(void)
{
 8f6:	1f 92       	push	r1
 8f8:	0f 92       	push	r0
 8fa:	0f b6       	in	r0, 0x3f	; 63
 8fc:	0f 92       	push	r0
 8fe:	11 24       	eor	r1, r1
 900:	2f 93       	push	r18
 902:	3f 93       	push	r19
 904:	4f 93       	push	r20
 906:	5f 93       	push	r21
 908:	6f 93       	push	r22
 90a:	7f 93       	push	r23
 90c:	8f 93       	push	r24
 90e:	9f 93       	push	r25
 910:	af 93       	push	r26
 912:	bf 93       	push	r27
 914:	ef 93       	push	r30
 916:	ff 93       	push	r31
 918:	df 93       	push	r29
 91a:	cf 93       	push	r28
 91c:	cd b7       	in	r28, 0x3d	; 61
 91e:	de b7       	in	r29, 0x3e	; 62
	pvoid_callback[0]();
 920:	e0 91 61 00 	lds	r30, 0x0061
 924:	f0 91 62 00 	lds	r31, 0x0062
 928:	09 95       	icall


}
 92a:	cf 91       	pop	r28
 92c:	df 91       	pop	r29
 92e:	ff 91       	pop	r31
 930:	ef 91       	pop	r30
 932:	bf 91       	pop	r27
 934:	af 91       	pop	r26
 936:	9f 91       	pop	r25
 938:	8f 91       	pop	r24
 93a:	7f 91       	pop	r23
 93c:	6f 91       	pop	r22
 93e:	5f 91       	pop	r21
 940:	4f 91       	pop	r20
 942:	3f 91       	pop	r19
 944:	2f 91       	pop	r18
 946:	0f 90       	pop	r0
 948:	0f be       	out	0x3f, r0	; 63
 94a:	0f 90       	pop	r0
 94c:	1f 90       	pop	r1
 94e:	18 95       	reti

00000950 <__vector_2>:

void __vector_2(void)
{
 950:	1f 92       	push	r1
 952:	0f 92       	push	r0
 954:	0f b6       	in	r0, 0x3f	; 63
 956:	0f 92       	push	r0
 958:	11 24       	eor	r1, r1
 95a:	2f 93       	push	r18
 95c:	3f 93       	push	r19
 95e:	4f 93       	push	r20
 960:	5f 93       	push	r21
 962:	6f 93       	push	r22
 964:	7f 93       	push	r23
 966:	8f 93       	push	r24
 968:	9f 93       	push	r25
 96a:	af 93       	push	r26
 96c:	bf 93       	push	r27
 96e:	ef 93       	push	r30
 970:	ff 93       	push	r31
 972:	df 93       	push	r29
 974:	cf 93       	push	r28
 976:	cd b7       	in	r28, 0x3d	; 61
 978:	de b7       	in	r29, 0x3e	; 62

	pvoid_callback[1]();
 97a:	e0 91 63 00 	lds	r30, 0x0063
 97e:	f0 91 64 00 	lds	r31, 0x0064
 982:	09 95       	icall

}
 984:	cf 91       	pop	r28
 986:	df 91       	pop	r29
 988:	ff 91       	pop	r31
 98a:	ef 91       	pop	r30
 98c:	bf 91       	pop	r27
 98e:	af 91       	pop	r26
 990:	9f 91       	pop	r25
 992:	8f 91       	pop	r24
 994:	7f 91       	pop	r23
 996:	6f 91       	pop	r22
 998:	5f 91       	pop	r21
 99a:	4f 91       	pop	r20
 99c:	3f 91       	pop	r19
 99e:	2f 91       	pop	r18
 9a0:	0f 90       	pop	r0
 9a2:	0f be       	out	0x3f, r0	; 63
 9a4:	0f 90       	pop	r0
 9a6:	1f 90       	pop	r1
 9a8:	18 95       	reti

000009aa <__vector_3>:


void __vector_3(void)
{
 9aa:	1f 92       	push	r1
 9ac:	0f 92       	push	r0
 9ae:	0f b6       	in	r0, 0x3f	; 63
 9b0:	0f 92       	push	r0
 9b2:	11 24       	eor	r1, r1
 9b4:	2f 93       	push	r18
 9b6:	3f 93       	push	r19
 9b8:	4f 93       	push	r20
 9ba:	5f 93       	push	r21
 9bc:	6f 93       	push	r22
 9be:	7f 93       	push	r23
 9c0:	8f 93       	push	r24
 9c2:	9f 93       	push	r25
 9c4:	af 93       	push	r26
 9c6:	bf 93       	push	r27
 9c8:	ef 93       	push	r30
 9ca:	ff 93       	push	r31
 9cc:	df 93       	push	r29
 9ce:	cf 93       	push	r28
 9d0:	cd b7       	in	r28, 0x3d	; 61
 9d2:	de b7       	in	r29, 0x3e	; 62
	pvoid_callback[2]();
 9d4:	e0 91 65 00 	lds	r30, 0x0065
 9d8:	f0 91 66 00 	lds	r31, 0x0066
 9dc:	09 95       	icall

}
 9de:	cf 91       	pop	r28
 9e0:	df 91       	pop	r29
 9e2:	ff 91       	pop	r31
 9e4:	ef 91       	pop	r30
 9e6:	bf 91       	pop	r27
 9e8:	af 91       	pop	r26
 9ea:	9f 91       	pop	r25
 9ec:	8f 91       	pop	r24
 9ee:	7f 91       	pop	r23
 9f0:	6f 91       	pop	r22
 9f2:	5f 91       	pop	r21
 9f4:	4f 91       	pop	r20
 9f6:	3f 91       	pop	r19
 9f8:	2f 91       	pop	r18
 9fa:	0f 90       	pop	r0
 9fc:	0f be       	out	0x3f, r0	; 63
 9fe:	0f 90       	pop	r0
 a00:	1f 90       	pop	r1
 a02:	18 95       	reti

00000a04 <set_call_back>:


set_call_back(u8 int_index,void (*ptr) (void))//بوينر هيشاور علي فانكشن مبتاخدش حاجه ومبترجعش حاجه *ptr
{
 a04:	df 93       	push	r29
 a06:	cf 93       	push	r28
 a08:	00 d0       	rcall	.+0      	; 0xa0a <set_call_back+0x6>
 a0a:	00 d0       	rcall	.+0      	; 0xa0c <set_call_back+0x8>
 a0c:	0f 92       	push	r0
 a0e:	cd b7       	in	r28, 0x3d	; 61
 a10:	de b7       	in	r29, 0x3e	; 62
 a12:	89 83       	std	Y+1, r24	; 0x01
 a14:	7b 83       	std	Y+3, r23	; 0x03
 a16:	6a 83       	std	Y+2, r22	; 0x02
	pvoid_callback[int_index]=ptr;
 a18:	89 81       	ldd	r24, Y+1	; 0x01
 a1a:	88 2f       	mov	r24, r24
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	88 0f       	add	r24, r24
 a20:	99 1f       	adc	r25, r25
 a22:	fc 01       	movw	r30, r24
 a24:	ef 59       	subi	r30, 0x9F	; 159
 a26:	ff 4f       	sbci	r31, 0xFF	; 255
 a28:	8a 81       	ldd	r24, Y+2	; 0x02
 a2a:	9b 81       	ldd	r25, Y+3	; 0x03
 a2c:	91 83       	std	Z+1, r25	; 0x01
 a2e:	80 83       	st	Z, r24
}
 a30:	0f 90       	pop	r0
 a32:	0f 90       	pop	r0
 a34:	0f 90       	pop	r0
 a36:	0f 90       	pop	r0
 a38:	0f 90       	pop	r0
 a3a:	cf 91       	pop	r28
 a3c:	df 91       	pop	r29
 a3e:	08 95       	ret

00000a40 <blink_led>:
#include "DIO_Interface.h"

#include "EXT_interrpt_interface.h"

void blink_led(void)//(_1)->دي معناها ان انا كده عاوز اروح لمكان 2هو كده في الداتا شيت عشان اروح لمكان 2 في الفيكتور تيبول انقص منها 1واكتب اندراسكور الرقم الجديد
{
 a40:	df 93       	push	r29
 a42:	cf 93       	push	r28
 a44:	cd b7       	in	r28, 0x3d	; 61
 a46:	de b7       	in	r29, 0x3e	; 62
//frist ex
	//DIO_set_pin_value(Group_B,DIO_Pin_7,DIO_High);
//secound ex
static u8 var=0;//معاناها انها بتطول الليف تايم للفاريبول عشان الفاريابول اللوكل بيتمسح اول ما اخلص اسكوب الفانكشن ststic
			toggle_bit(var,0);
 a48:	90 91 60 00 	lds	r25, 0x0060
 a4c:	81 e0       	ldi	r24, 0x01	; 1
 a4e:	89 27       	eor	r24, r25
 a50:	80 93 60 00 	sts	0x0060, r24
			DIO_set_pin_value(Group_B,DIO_Pin_7,var);
 a54:	90 91 60 00 	lds	r25, 0x0060
 a58:	81 e0       	ldi	r24, 0x01	; 1
 a5a:	67 e0       	ldi	r22, 0x07	; 7
 a5c:	49 2f       	mov	r20, r25
 a5e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_set_pin_value>
}
 a62:	cf 91       	pop	r28
 a64:	df 91       	pop	r29
 a66:	08 95       	ret

00000a68 <main>:

void main(void)
{
 a68:	df 93       	push	r29
 a6a:	cf 93       	push	r28
 a6c:	cd b7       	in	r28, 0x3d	; 61
 a6e:	de b7       	in	r29, 0x3e	; 62
	DIO_set_pin_direction(Group_B,DIO_Pin_7,DIO_Output);
 a70:	81 e0       	ldi	r24, 0x01	; 1
 a72:	67 e0       	ldi	r22, 0x07	; 7
 a74:	41 e0       	ldi	r20, 0x01	; 1
 a76:	0e 94 39 01 	call	0x272	; 0x272 <DIO_set_pin_direction>
	DIO_set_pin_direction(Group_D,DIO_Pin_2,DIO_Input);
 a7a:	83 e0       	ldi	r24, 0x03	; 3
 a7c:	62 e0       	ldi	r22, 0x02	; 2
 a7e:	40 e0       	ldi	r20, 0x00	; 0
 a80:	0e 94 39 01 	call	0x272	; 0x272 <DIO_set_pin_direction>
	DIO_set_pin_value(Group_D,DIO_Pin_2,DIO_High);
 a84:	83 e0       	ldi	r24, 0x03	; 3
 a86:	62 e0       	ldi	r22, 0x02	; 2
 a88:	41 e0       	ldi	r20, 0x01	; 1
 a8a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_set_pin_value>

	INT_SET_LEVEL(INT_0,INT_falling_edge);//لازم اخلي دي الاول عشان هو قال حطني انا هسنس ايي الاول وبعد كظده اعملي اينيبل
 a8e:	80 e0       	ldi	r24, 0x00	; 0
 a90:	62 e0       	ldi	r22, 0x02	; 2
 a92:	0e 94 cd 03 	call	0x79a	; 0x79a <INT_SET_LEVEL>
	set_call_back(INT_0,blink_led);
 a96:	20 e2       	ldi	r18, 0x20	; 32
 a98:	35 e0       	ldi	r19, 0x05	; 5
 a9a:	80 e0       	ldi	r24, 0x00	; 0
 a9c:	b9 01       	movw	r22, r18
 a9e:	0e 94 02 05 	call	0xa04	; 0xa04 <set_call_back>
	INT_ENABLE_SPECIFIC_SIE(INT_0);
 aa2:	80 e0       	ldi	r24, 0x00	; 0
 aa4:	0e 94 5f 03 	call	0x6be	; 0x6be <INT_ENABLE_SPECIFIC_SIE>
	INT_GLOBAL(INT_global_ENABLE);
 aa8:	81 e0       	ldi	r24, 0x01	; 1
 aaa:	0e 94 5f 04 	call	0x8be	; 0x8be <INT_GLOBAL>
 aae:	ff cf       	rjmp	.-2      	; 0xaae <main+0x46>

00000ab0 <_exit>:
 ab0:	f8 94       	cli

00000ab2 <__stop_program>:
 ab2:	ff cf       	rjmp	.-2      	; 0xab2 <__stop_program>
