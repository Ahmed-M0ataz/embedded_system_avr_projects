
ICU_timer_1_EXT_INTERUPT_0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002478  0000250c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800078  00800078  00002524  2**0
                  ALLOC
  3 .stab         00001bb4  00000000  00000000  00002524  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c58  00000000  00000000  000040d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004d30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00004e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000501f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00008165  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  000090e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00009268  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000952a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009db8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c0 10 	jmp	0x2180	; 0x2180 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 37       	cpi	r26, 0x7D	; 125
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 02 11 	call	0x2204	; 0x2204 <main>
      8a:	0c 94 3a 12 	jmp	0x2474	; 0x2474 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e6       	ldi	r26, 0x6F	; 111
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e6       	ldi	r24, 0x6F	; 111
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1f 12 	jmp	0x243e	; 0x243e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6f e6       	ldi	r22, 0x6F	; 111
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 27 12 	jmp	0x244e	; 0x244e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <ADC_INT>:
#include "ADC_private.h"
#include "ADC_Interface.h"


void ADC_INT(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	set_bit(ADCSRA,2);//(prescalas =128) اقل تردد ممكن اشتغل بيه بقسم ال 8000000علي 128 وهو الي بيعمل كده
     ca6:	a6 e2       	ldi	r26, 0x26	; 38
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	e6 e2       	ldi	r30, 0x26	; 38
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	84 60       	ori	r24, 0x04	; 4
     cb2:	8c 93       	st	X, r24
	set_bit(ADCSRA,1);//(prescalas =128) اقل تردد ممكن اشتغل بيه بقسم ال 8000000علي 128 وهو الي بيعمل كده
     cb4:	a6 e2       	ldi	r26, 0x26	; 38
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	e6 e2       	ldi	r30, 0x26	; 38
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	82 60       	ori	r24, 0x02	; 2
     cc0:	8c 93       	st	X, r24
	set_bit(ADCSRA,0);//(prescalas =128) اقل تردد ممكن اشتغل بيه بقسم ال 8000000علي 128 وهو الي بيعمل كده
     cc2:	a6 e2       	ldi	r26, 0x26	; 38
     cc4:	b0 e0       	ldi	r27, 0x00	; 0
     cc6:	e6 e2       	ldi	r30, 0x26	; 38
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	81 60       	ori	r24, 0x01	; 1
     cce:	8c 93       	st	X, r24

	clear_bit(ADMUX,REFRENCE_VOLT_BIT7);//refrance volt 5v avcc
     cd0:	a7 e2       	ldi	r26, 0x27	; 39
     cd2:	b0 e0       	ldi	r27, 0x00	; 0
     cd4:	e7 e2       	ldi	r30, 0x27	; 39
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	8f 77       	andi	r24, 0x7F	; 127
     cdc:	8c 93       	st	X, r24
	set_bit(ADMUX,REFRENCE_VOLT_BIT6);//refrance volt 5v avcc
     cde:	a7 e2       	ldi	r26, 0x27	; 39
     ce0:	b0 e0       	ldi	r27, 0x00	; 0
     ce2:	e7 e2       	ldi	r30, 0x27	; 39
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	80 64       	ori	r24, 0x40	; 64
     cea:	8c 93       	st	X, r24
	set_bit(ADMUX,LIFT_ADJUST_10BIT);//left adjustment
     cec:	a7 e2       	ldi	r26, 0x27	; 39
     cee:	b0 e0       	ldi	r27, 0x00	; 0
     cf0:	e7 e2       	ldi	r30, 0x27	; 39
     cf2:	f0 e0       	ldi	r31, 0x00	; 0
     cf4:	80 81       	ld	r24, Z
     cf6:	80 62       	ori	r24, 0x20	; 32
     cf8:	8c 93       	st	X, r24
	set_bit(ADCSRA,ADC_BIT_enable);//adc enable
     cfa:	a6 e2       	ldi	r26, 0x26	; 38
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e6 e2       	ldi	r30, 0x26	; 38
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	80 68       	ori	r24, 0x80	; 128
     d06:	8c 93       	st	X, r24
}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	08 95       	ret

00000d0e <ADC_READ>:

u16 ADC_READ(u8 channel)//تعبر عن ال بن chanal
{
     d0e:	df 93       	push	r29
     d10:	cf 93       	push	r28
     d12:	00 d0       	rcall	.+0      	; 0xd14 <ADC_READ+0x6>
     d14:	0f 92       	push	r0
     d16:	cd b7       	in	r28, 0x3d	; 61
     d18:	de b7       	in	r29, 0x3e	; 62
     d1a:	8b 83       	std	Y+3, r24	; 0x03

	ADMUX &=0b11100000; //ال الأند مع الواحد هحافظ علي اول تلات بتات الي هما الخاصين الكونفجريشن الي اول بتين بالرفرنس فولت والتالته بتاعت الليفت والاند مع الزيرو بيصفر كل حاجه
     d1c:	a7 e2       	ldi	r26, 0x27	; 39
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	e7 e2       	ldi	r30, 0x27	; 39
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	80 7e       	andi	r24, 0xE0	; 224
     d28:	8c 93       	st	X, r24
ADMUX |=channel;//اوور عشان احط الإتشنل الي هو عاوزها وكده كده بيتحطو في اول 5 بت
     d2a:	a7 e2       	ldi	r26, 0x27	; 39
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	e7 e2       	ldi	r30, 0x27	; 39
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	90 81       	ld	r25, Z
     d34:	8b 81       	ldd	r24, Y+3	; 0x03
     d36:	89 2b       	or	r24, r25
     d38:	8c 93       	st	X, r24
set_bit(ADCSRA,6);//start conv
     d3a:	a6 e2       	ldi	r26, 0x26	; 38
     d3c:	b0 e0       	ldi	r27, 0x00	; 0
     d3e:	e6 e2       	ldi	r30, 0x26	; 38
     d40:	f0 e0       	ldi	r31, 0x00	; 0
     d42:	80 81       	ld	r24, Z
     d44:	80 64       	ori	r24, 0x40	; 64
     d46:	8c 93       	st	X, r24

while (get_bit(ADCSRA,ADC_FLAG_BIT)==0);//طول ما الفلاج ب زيرو خليك لووب هنا لو بقي ب واحد اخرج من اللوب
     d48:	e6 e2       	ldi	r30, 0x26	; 38
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	82 95       	swap	r24
     d50:	8f 70       	andi	r24, 0x0F	; 15
     d52:	88 2f       	mov	r24, r24
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	81 70       	andi	r24, 0x01	; 1
     d58:	90 70       	andi	r25, 0x00	; 0
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	a9 f3       	breq	.-22     	; 0xd48 <ADC_READ+0x3a>
//set_bit(ADCSRA,4);
//u16 res=ADCH;
//res= (res<<2)|(ADCL>>6);
u16 res=(ADCL>>6);
     d5e:	e4 e2       	ldi	r30, 0x24	; 36
     d60:	f0 e0       	ldi	r31, 0x00	; 0
     d62:	80 81       	ld	r24, Z
     d64:	82 95       	swap	r24
     d66:	86 95       	lsr	r24
     d68:	86 95       	lsr	r24
     d6a:	83 70       	andi	r24, 0x03	; 3
     d6c:	88 2f       	mov	r24, r24
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	89 83       	std	Y+1, r24	; 0x01
res|= (ADCH<<2);
     d74:	e5 e2       	ldi	r30, 0x25	; 37
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	88 2f       	mov	r24, r24
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	88 0f       	add	r24, r24
     d84:	99 1f       	adc	r25, r25
     d86:	9c 01       	movw	r18, r24
     d88:	89 81       	ldd	r24, Y+1	; 0x01
     d8a:	9a 81       	ldd	r25, Y+2	; 0x02
     d8c:	82 2b       	or	r24, r18
     d8e:	93 2b       	or	r25, r19
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01
return res;
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02

}
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <DIO_set_pin_value>:
#include"STD_TYPES.h"
#include "DIO_Configuration.h"
#include "DIO_Private.h"
#include "DIO_Interface.h"

u8 DIO_set_pin_value(u8 Port_no,u8 Pin_no,u8 Pin_value){
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	00 d0       	rcall	.+0      	; 0xdaa <DIO_set_pin_value+0x6>
     daa:	00 d0       	rcall	.+0      	; 0xdac <DIO_set_pin_value+0x8>
     dac:	00 d0       	rcall	.+0      	; 0xdae <DIO_set_pin_value+0xa>
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	8a 83       	std	Y+2, r24	; 0x02
     db4:	6b 83       	std	Y+3, r22	; 0x03
     db6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_state=0;
     db8:	19 82       	std	Y+1, r1	; 0x01
	if(Port_no>=DIO_max_port_no){
     dba:	8a 81       	ldd	r24, Y+2	; 0x02
     dbc:	84 30       	cpi	r24, 0x04	; 4
     dbe:	18 f0       	brcs	.+6      	; 0xdc6 <DIO_set_pin_value+0x22>
		Error_state=1;
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	89 83       	std	Y+1, r24	; 0x01
     dc4:	e0 c0       	rjmp	.+448    	; 0xf86 <DIO_set_pin_value+0x1e2>
	}else if(Pin_no>=DIO_max_pin_no){
     dc6:	8b 81       	ldd	r24, Y+3	; 0x03
     dc8:	88 30       	cpi	r24, 0x08	; 8
     dca:	18 f0       	brcs	.+6      	; 0xdd2 <DIO_set_pin_value+0x2e>
		Error_state=2;
     dcc:	82 e0       	ldi	r24, 0x02	; 2
     dce:	89 83       	std	Y+1, r24	; 0x01
     dd0:	da c0       	rjmp	.+436    	; 0xf86 <DIO_set_pin_value+0x1e2>
	}else if((Pin_value!=DIO_Low)&&(Pin_value!=DIO_High)){
     dd2:	8c 81       	ldd	r24, Y+4	; 0x04
     dd4:	88 23       	and	r24, r24
     dd6:	31 f0       	breq	.+12     	; 0xde4 <DIO_set_pin_value+0x40>
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	81 30       	cpi	r24, 0x01	; 1
     ddc:	19 f0       	breq	.+6      	; 0xde4 <DIO_set_pin_value+0x40>
		Error_state=3;
     dde:	83 e0       	ldi	r24, 0x03	; 3
     de0:	89 83       	std	Y+1, r24	; 0x01
     de2:	d1 c0       	rjmp	.+418    	; 0xf86 <DIO_set_pin_value+0x1e2>
	}else{
		switch(Port_no){
     de4:	8a 81       	ldd	r24, Y+2	; 0x02
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	3e 83       	std	Y+6, r19	; 0x06
     dec:	2d 83       	std	Y+5, r18	; 0x05
     dee:	8d 81       	ldd	r24, Y+5	; 0x05
     df0:	9e 81       	ldd	r25, Y+6	; 0x06
     df2:	81 30       	cpi	r24, 0x01	; 1
     df4:	91 05       	cpc	r25, r1
     df6:	09 f4       	brne	.+2      	; 0xdfa <DIO_set_pin_value+0x56>
     df8:	43 c0       	rjmp	.+134    	; 0xe80 <DIO_set_pin_value+0xdc>
     dfa:	2d 81       	ldd	r18, Y+5	; 0x05
     dfc:	3e 81       	ldd	r19, Y+6	; 0x06
     dfe:	22 30       	cpi	r18, 0x02	; 2
     e00:	31 05       	cpc	r19, r1
     e02:	2c f4       	brge	.+10     	; 0xe0e <DIO_set_pin_value+0x6a>
     e04:	8d 81       	ldd	r24, Y+5	; 0x05
     e06:	9e 81       	ldd	r25, Y+6	; 0x06
     e08:	00 97       	sbiw	r24, 0x00	; 0
     e0a:	71 f0       	breq	.+28     	; 0xe28 <DIO_set_pin_value+0x84>
     e0c:	bc c0       	rjmp	.+376    	; 0xf86 <DIO_set_pin_value+0x1e2>
     e0e:	2d 81       	ldd	r18, Y+5	; 0x05
     e10:	3e 81       	ldd	r19, Y+6	; 0x06
     e12:	22 30       	cpi	r18, 0x02	; 2
     e14:	31 05       	cpc	r19, r1
     e16:	09 f4       	brne	.+2      	; 0xe1a <DIO_set_pin_value+0x76>
     e18:	5f c0       	rjmp	.+190    	; 0xed8 <DIO_set_pin_value+0x134>
     e1a:	8d 81       	ldd	r24, Y+5	; 0x05
     e1c:	9e 81       	ldd	r25, Y+6	; 0x06
     e1e:	83 30       	cpi	r24, 0x03	; 3
     e20:	91 05       	cpc	r25, r1
     e22:	09 f4       	brne	.+2      	; 0xe26 <DIO_set_pin_value+0x82>
     e24:	85 c0       	rjmp	.+266    	; 0xf30 <DIO_set_pin_value+0x18c>
     e26:	af c0       	rjmp	.+350    	; 0xf86 <DIO_set_pin_value+0x1e2>
		case Group_A: assign_bit(DIO_u8_PORTA,Pin_no,Pin_value);
     e28:	8c 81       	ldd	r24, Y+4	; 0x04
     e2a:	81 30       	cpi	r24, 0x01	; 1
     e2c:	a1 f4       	brne	.+40     	; 0xe56 <DIO_set_pin_value+0xb2>
     e2e:	ab e3       	ldi	r26, 0x3B	; 59
     e30:	b0 e0       	ldi	r27, 0x00	; 0
     e32:	eb e3       	ldi	r30, 0x3B	; 59
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	48 2f       	mov	r20, r24
     e3a:	8b 81       	ldd	r24, Y+3	; 0x03
     e3c:	28 2f       	mov	r18, r24
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	02 2e       	mov	r0, r18
     e46:	02 c0       	rjmp	.+4      	; 0xe4c <DIO_set_pin_value+0xa8>
     e48:	88 0f       	add	r24, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	0a 94       	dec	r0
     e4e:	e2 f7       	brpl	.-8      	; 0xe48 <DIO_set_pin_value+0xa4>
     e50:	84 2b       	or	r24, r20
     e52:	8c 93       	st	X, r24
     e54:	98 c0       	rjmp	.+304    	; 0xf86 <DIO_set_pin_value+0x1e2>
     e56:	ab e3       	ldi	r26, 0x3B	; 59
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	eb e3       	ldi	r30, 0x3B	; 59
     e5c:	f0 e0       	ldi	r31, 0x00	; 0
     e5e:	80 81       	ld	r24, Z
     e60:	48 2f       	mov	r20, r24
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	28 2f       	mov	r18, r24
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	02 2e       	mov	r0, r18
     e6e:	02 c0       	rjmp	.+4      	; 0xe74 <DIO_set_pin_value+0xd0>
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	0a 94       	dec	r0
     e76:	e2 f7       	brpl	.-8      	; 0xe70 <DIO_set_pin_value+0xcc>
     e78:	80 95       	com	r24
     e7a:	84 23       	and	r24, r20
     e7c:	8c 93       	st	X, r24
     e7e:	83 c0       	rjmp	.+262    	; 0xf86 <DIO_set_pin_value+0x1e2>
		break;
		case Group_B: assign_bit(DIO_u8_PORTB,Pin_no,Pin_value);
     e80:	8c 81       	ldd	r24, Y+4	; 0x04
     e82:	81 30       	cpi	r24, 0x01	; 1
     e84:	a1 f4       	brne	.+40     	; 0xeae <DIO_set_pin_value+0x10a>
     e86:	a8 e3       	ldi	r26, 0x38	; 56
     e88:	b0 e0       	ldi	r27, 0x00	; 0
     e8a:	e8 e3       	ldi	r30, 0x38	; 56
     e8c:	f0 e0       	ldi	r31, 0x00	; 0
     e8e:	80 81       	ld	r24, Z
     e90:	48 2f       	mov	r20, r24
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	28 2f       	mov	r18, r24
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	90 e0       	ldi	r25, 0x00	; 0
     e9c:	02 2e       	mov	r0, r18
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <DIO_set_pin_value+0x100>
     ea0:	88 0f       	add	r24, r24
     ea2:	99 1f       	adc	r25, r25
     ea4:	0a 94       	dec	r0
     ea6:	e2 f7       	brpl	.-8      	; 0xea0 <DIO_set_pin_value+0xfc>
     ea8:	84 2b       	or	r24, r20
     eaa:	8c 93       	st	X, r24
     eac:	6c c0       	rjmp	.+216    	; 0xf86 <DIO_set_pin_value+0x1e2>
     eae:	a8 e3       	ldi	r26, 0x38	; 56
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e8 e3       	ldi	r30, 0x38	; 56
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	80 81       	ld	r24, Z
     eb8:	48 2f       	mov	r20, r24
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	28 2f       	mov	r18, r24
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	02 2e       	mov	r0, r18
     ec6:	02 c0       	rjmp	.+4      	; 0xecc <DIO_set_pin_value+0x128>
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	0a 94       	dec	r0
     ece:	e2 f7       	brpl	.-8      	; 0xec8 <DIO_set_pin_value+0x124>
     ed0:	80 95       	com	r24
     ed2:	84 23       	and	r24, r20
     ed4:	8c 93       	st	X, r24
     ed6:	57 c0       	rjmp	.+174    	; 0xf86 <DIO_set_pin_value+0x1e2>
		break;
		case Group_C: assign_bit(DIO_u8_PORTC,Pin_no,Pin_value);
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	a1 f4       	brne	.+40     	; 0xf06 <DIO_set_pin_value+0x162>
     ede:	a5 e3       	ldi	r26, 0x35	; 53
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e5 e3       	ldi	r30, 0x35	; 53
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	48 2f       	mov	r20, r24
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	02 2e       	mov	r0, r18
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <DIO_set_pin_value+0x158>
     ef8:	88 0f       	add	r24, r24
     efa:	99 1f       	adc	r25, r25
     efc:	0a 94       	dec	r0
     efe:	e2 f7       	brpl	.-8      	; 0xef8 <DIO_set_pin_value+0x154>
     f00:	84 2b       	or	r24, r20
     f02:	8c 93       	st	X, r24
     f04:	40 c0       	rjmp	.+128    	; 0xf86 <DIO_set_pin_value+0x1e2>
     f06:	a5 e3       	ldi	r26, 0x35	; 53
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	e5 e3       	ldi	r30, 0x35	; 53
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 2e       	mov	r0, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_set_pin_value+0x180>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_set_pin_value+0x17c>
     f28:	80 95       	com	r24
     f2a:	84 23       	and	r24, r20
     f2c:	8c 93       	st	X, r24
     f2e:	2b c0       	rjmp	.+86     	; 0xf86 <DIO_set_pin_value+0x1e2>
		break;
		case Group_D: assign_bit(DIO_u8_PORTD,Pin_no,Pin_value);
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	81 30       	cpi	r24, 0x01	; 1
     f34:	a1 f4       	brne	.+40     	; 0xf5e <DIO_set_pin_value+0x1ba>
     f36:	a2 e3       	ldi	r26, 0x32	; 50
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e2 e3       	ldi	r30, 0x32	; 50
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_set_pin_value+0x1b0>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_set_pin_value+0x1ac>
     f58:	84 2b       	or	r24, r20
     f5a:	8c 93       	st	X, r24
     f5c:	14 c0       	rjmp	.+40     	; 0xf86 <DIO_set_pin_value+0x1e2>
     f5e:	a2 e3       	ldi	r26, 0x32	; 50
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	e2 e3       	ldi	r30, 0x32	; 50
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	48 2f       	mov	r20, r24
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	28 2f       	mov	r18, r24
     f6e:	30 e0       	ldi	r19, 0x00	; 0
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	02 2e       	mov	r0, r18
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <DIO_set_pin_value+0x1d8>
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	0a 94       	dec	r0
     f7e:	e2 f7       	brpl	.-8      	; 0xf78 <DIO_set_pin_value+0x1d4>
     f80:	80 95       	com	r24
     f82:	84 23       	and	r24, r20
     f84:	8c 93       	st	X, r24
		break;
		}
	}
	return Error_state;
     f86:	89 81       	ldd	r24, Y+1	; 0x01
}
     f88:	26 96       	adiw	r28, 0x06	; 6
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <DIO_set_pin_direction>:

u8 DIO_set_pin_direction(u8 Port_no,u8 Pin_no,u8 Pin_direction){
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <DIO_set_pin_direction+0x6>
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <DIO_set_pin_direction+0x8>
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <DIO_set_pin_direction+0xa>
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	8a 83       	std	Y+2, r24	; 0x02
     faa:	6b 83       	std	Y+3, r22	; 0x03
     fac:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_state=0;
     fae:	19 82       	std	Y+1, r1	; 0x01
		if(Port_no>=DIO_max_port_no){
     fb0:	8a 81       	ldd	r24, Y+2	; 0x02
     fb2:	84 30       	cpi	r24, 0x04	; 4
     fb4:	18 f0       	brcs	.+6      	; 0xfbc <DIO_set_pin_direction+0x22>
			Error_state=1;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	89 83       	std	Y+1, r24	; 0x01
     fba:	e0 c0       	rjmp	.+448    	; 0x117c <DIO_set_pin_direction+0x1e2>
		}else if(Pin_no>=DIO_max_pin_no){
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	88 30       	cpi	r24, 0x08	; 8
     fc0:	18 f0       	brcs	.+6      	; 0xfc8 <DIO_set_pin_direction+0x2e>
			Error_state=2;
     fc2:	82 e0       	ldi	r24, 0x02	; 2
     fc4:	89 83       	std	Y+1, r24	; 0x01
     fc6:	da c0       	rjmp	.+436    	; 0x117c <DIO_set_pin_direction+0x1e2>
		}else if((Pin_direction!=DIO_Input)&&(Pin_direction!=DIO_Output)){
     fc8:	8c 81       	ldd	r24, Y+4	; 0x04
     fca:	88 23       	and	r24, r24
     fcc:	31 f0       	breq	.+12     	; 0xfda <DIO_set_pin_direction+0x40>
     fce:	8c 81       	ldd	r24, Y+4	; 0x04
     fd0:	81 30       	cpi	r24, 0x01	; 1
     fd2:	19 f0       	breq	.+6      	; 0xfda <DIO_set_pin_direction+0x40>
			Error_state=3;
     fd4:	83 e0       	ldi	r24, 0x03	; 3
     fd6:	89 83       	std	Y+1, r24	; 0x01
     fd8:	d1 c0       	rjmp	.+418    	; 0x117c <DIO_set_pin_direction+0x1e2>
		}else{
			switch(Port_no){
     fda:	8a 81       	ldd	r24, Y+2	; 0x02
     fdc:	28 2f       	mov	r18, r24
     fde:	30 e0       	ldi	r19, 0x00	; 0
     fe0:	3e 83       	std	Y+6, r19	; 0x06
     fe2:	2d 83       	std	Y+5, r18	; 0x05
     fe4:	8d 81       	ldd	r24, Y+5	; 0x05
     fe6:	9e 81       	ldd	r25, Y+6	; 0x06
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	91 05       	cpc	r25, r1
     fec:	09 f4       	brne	.+2      	; 0xff0 <DIO_set_pin_direction+0x56>
     fee:	43 c0       	rjmp	.+134    	; 0x1076 <DIO_set_pin_direction+0xdc>
     ff0:	2d 81       	ldd	r18, Y+5	; 0x05
     ff2:	3e 81       	ldd	r19, Y+6	; 0x06
     ff4:	22 30       	cpi	r18, 0x02	; 2
     ff6:	31 05       	cpc	r19, r1
     ff8:	2c f4       	brge	.+10     	; 0x1004 <DIO_set_pin_direction+0x6a>
     ffa:	8d 81       	ldd	r24, Y+5	; 0x05
     ffc:	9e 81       	ldd	r25, Y+6	; 0x06
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	71 f0       	breq	.+28     	; 0x101e <DIO_set_pin_direction+0x84>
    1002:	bc c0       	rjmp	.+376    	; 0x117c <DIO_set_pin_direction+0x1e2>
    1004:	2d 81       	ldd	r18, Y+5	; 0x05
    1006:	3e 81       	ldd	r19, Y+6	; 0x06
    1008:	22 30       	cpi	r18, 0x02	; 2
    100a:	31 05       	cpc	r19, r1
    100c:	09 f4       	brne	.+2      	; 0x1010 <DIO_set_pin_direction+0x76>
    100e:	5f c0       	rjmp	.+190    	; 0x10ce <DIO_set_pin_direction+0x134>
    1010:	8d 81       	ldd	r24, Y+5	; 0x05
    1012:	9e 81       	ldd	r25, Y+6	; 0x06
    1014:	83 30       	cpi	r24, 0x03	; 3
    1016:	91 05       	cpc	r25, r1
    1018:	09 f4       	brne	.+2      	; 0x101c <DIO_set_pin_direction+0x82>
    101a:	85 c0       	rjmp	.+266    	; 0x1126 <DIO_set_pin_direction+0x18c>
    101c:	af c0       	rjmp	.+350    	; 0x117c <DIO_set_pin_direction+0x1e2>
			case Group_A: assign_bit(DIO_u8_DDRA,Pin_no,Pin_direction);
    101e:	8c 81       	ldd	r24, Y+4	; 0x04
    1020:	81 30       	cpi	r24, 0x01	; 1
    1022:	a1 f4       	brne	.+40     	; 0x104c <DIO_set_pin_direction+0xb2>
    1024:	aa e3       	ldi	r26, 0x3A	; 58
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	ea e3       	ldi	r30, 0x3A	; 58
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	48 2f       	mov	r20, r24
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	28 2f       	mov	r18, r24
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	02 2e       	mov	r0, r18
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <DIO_set_pin_direction+0xa8>
    103e:	88 0f       	add	r24, r24
    1040:	99 1f       	adc	r25, r25
    1042:	0a 94       	dec	r0
    1044:	e2 f7       	brpl	.-8      	; 0x103e <DIO_set_pin_direction+0xa4>
    1046:	84 2b       	or	r24, r20
    1048:	8c 93       	st	X, r24
    104a:	98 c0       	rjmp	.+304    	; 0x117c <DIO_set_pin_direction+0x1e2>
    104c:	aa e3       	ldi	r26, 0x3A	; 58
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	ea e3       	ldi	r30, 0x3A	; 58
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	48 2f       	mov	r20, r24
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	28 2f       	mov	r18, r24
    105c:	30 e0       	ldi	r19, 0x00	; 0
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	02 2e       	mov	r0, r18
    1064:	02 c0       	rjmp	.+4      	; 0x106a <DIO_set_pin_direction+0xd0>
    1066:	88 0f       	add	r24, r24
    1068:	99 1f       	adc	r25, r25
    106a:	0a 94       	dec	r0
    106c:	e2 f7       	brpl	.-8      	; 0x1066 <DIO_set_pin_direction+0xcc>
    106e:	80 95       	com	r24
    1070:	84 23       	and	r24, r20
    1072:	8c 93       	st	X, r24
    1074:	83 c0       	rjmp	.+262    	; 0x117c <DIO_set_pin_direction+0x1e2>
			break;
			case Group_B: assign_bit(DIO_u8_DDRB,Pin_no,Pin_direction);
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	81 30       	cpi	r24, 0x01	; 1
    107a:	a1 f4       	brne	.+40     	; 0x10a4 <DIO_set_pin_direction+0x10a>
    107c:	a7 e3       	ldi	r26, 0x37	; 55
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	e7 e3       	ldi	r30, 0x37	; 55
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	48 2f       	mov	r20, r24
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	28 2f       	mov	r18, r24
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	81 e0       	ldi	r24, 0x01	; 1
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	02 2e       	mov	r0, r18
    1094:	02 c0       	rjmp	.+4      	; 0x109a <DIO_set_pin_direction+0x100>
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	0a 94       	dec	r0
    109c:	e2 f7       	brpl	.-8      	; 0x1096 <DIO_set_pin_direction+0xfc>
    109e:	84 2b       	or	r24, r20
    10a0:	8c 93       	st	X, r24
    10a2:	6c c0       	rjmp	.+216    	; 0x117c <DIO_set_pin_direction+0x1e2>
    10a4:	a7 e3       	ldi	r26, 0x37	; 55
    10a6:	b0 e0       	ldi	r27, 0x00	; 0
    10a8:	e7 e3       	ldi	r30, 0x37	; 55
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	80 81       	ld	r24, Z
    10ae:	48 2f       	mov	r20, r24
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	02 2e       	mov	r0, r18
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <DIO_set_pin_direction+0x128>
    10be:	88 0f       	add	r24, r24
    10c0:	99 1f       	adc	r25, r25
    10c2:	0a 94       	dec	r0
    10c4:	e2 f7       	brpl	.-8      	; 0x10be <DIO_set_pin_direction+0x124>
    10c6:	80 95       	com	r24
    10c8:	84 23       	and	r24, r20
    10ca:	8c 93       	st	X, r24
    10cc:	57 c0       	rjmp	.+174    	; 0x117c <DIO_set_pin_direction+0x1e2>
			break;
			case Group_C: assign_bit(DIO_u8_DDRC,Pin_no,Pin_direction);
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	a1 f4       	brne	.+40     	; 0x10fc <DIO_set_pin_direction+0x162>
    10d4:	a4 e3       	ldi	r26, 0x34	; 52
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e4 e3       	ldi	r30, 0x34	; 52
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	48 2f       	mov	r20, r24
    10e0:	8b 81       	ldd	r24, Y+3	; 0x03
    10e2:	28 2f       	mov	r18, r24
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	02 2e       	mov	r0, r18
    10ec:	02 c0       	rjmp	.+4      	; 0x10f2 <DIO_set_pin_direction+0x158>
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	0a 94       	dec	r0
    10f4:	e2 f7       	brpl	.-8      	; 0x10ee <DIO_set_pin_direction+0x154>
    10f6:	84 2b       	or	r24, r20
    10f8:	8c 93       	st	X, r24
    10fa:	40 c0       	rjmp	.+128    	; 0x117c <DIO_set_pin_direction+0x1e2>
    10fc:	a4 e3       	ldi	r26, 0x34	; 52
    10fe:	b0 e0       	ldi	r27, 0x00	; 0
    1100:	e4 e3       	ldi	r30, 0x34	; 52
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	48 2f       	mov	r20, r24
    1108:	8b 81       	ldd	r24, Y+3	; 0x03
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	02 2e       	mov	r0, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <DIO_set_pin_direction+0x180>
    1116:	88 0f       	add	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	0a 94       	dec	r0
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <DIO_set_pin_direction+0x17c>
    111e:	80 95       	com	r24
    1120:	84 23       	and	r24, r20
    1122:	8c 93       	st	X, r24
    1124:	2b c0       	rjmp	.+86     	; 0x117c <DIO_set_pin_direction+0x1e2>
			break;
			case Group_D: assign_bit(DIO_u8_DDRD,Pin_no,Pin_direction);
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	81 30       	cpi	r24, 0x01	; 1
    112a:	a1 f4       	brne	.+40     	; 0x1154 <DIO_set_pin_direction+0x1ba>
    112c:	a1 e3       	ldi	r26, 0x31	; 49
    112e:	b0 e0       	ldi	r27, 0x00	; 0
    1130:	e1 e3       	ldi	r30, 0x31	; 49
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	48 2f       	mov	r20, r24
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	28 2f       	mov	r18, r24
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	02 2e       	mov	r0, r18
    1144:	02 c0       	rjmp	.+4      	; 0x114a <DIO_set_pin_direction+0x1b0>
    1146:	88 0f       	add	r24, r24
    1148:	99 1f       	adc	r25, r25
    114a:	0a 94       	dec	r0
    114c:	e2 f7       	brpl	.-8      	; 0x1146 <DIO_set_pin_direction+0x1ac>
    114e:	84 2b       	or	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	14 c0       	rjmp	.+40     	; 0x117c <DIO_set_pin_direction+0x1e2>
    1154:	a1 e3       	ldi	r26, 0x31	; 49
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e1 e3       	ldi	r30, 0x31	; 49
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_set_pin_direction+0x1d8>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_set_pin_direction+0x1d4>
    1176:	80 95       	com	r24
    1178:	84 23       	and	r24, r20
    117a:	8c 93       	st	X, r24
			break;
			}
		}
		return Error_state;
    117c:	89 81       	ldd	r24, Y+1	; 0x01
}
    117e:	26 96       	adiw	r28, 0x06	; 6
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	de bf       	out	0x3e, r29	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	cd bf       	out	0x3d, r28	; 61
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <DIO_get_pin_value>:

u8 DIO_get_pin_value(u8 Port_no,u8 Pin_no,u8*Pin_value){
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	27 97       	sbiw	r28, 0x07	; 7
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
    11a4:	8a 83       	std	Y+2, r24	; 0x02
    11a6:	6b 83       	std	Y+3, r22	; 0x03
    11a8:	5d 83       	std	Y+5, r21	; 0x05
    11aa:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_state=0;
    11ac:	19 82       	std	Y+1, r1	; 0x01
			if(Port_no>=DIO_max_port_no){
    11ae:	8a 81       	ldd	r24, Y+2	; 0x02
    11b0:	84 30       	cpi	r24, 0x04	; 4
    11b2:	18 f0       	brcs	.+6      	; 0x11ba <DIO_get_pin_value+0x2a>
				Error_state=1;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	76 c0       	rjmp	.+236    	; 0x12a6 <DIO_get_pin_value+0x116>
			}else if(Pin_no>=DIO_max_pin_no){
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	88 30       	cpi	r24, 0x08	; 8
    11be:	18 f0       	brcs	.+6      	; 0x11c6 <DIO_get_pin_value+0x36>
				Error_state=2;
    11c0:	82 e0       	ldi	r24, 0x02	; 2
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	70 c0       	rjmp	.+224    	; 0x12a6 <DIO_get_pin_value+0x116>
			}else{
				switch(Port_no){
    11c6:	8a 81       	ldd	r24, Y+2	; 0x02
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	3f 83       	std	Y+7, r19	; 0x07
    11ce:	2e 83       	std	Y+6, r18	; 0x06
    11d0:	4e 81       	ldd	r20, Y+6	; 0x06
    11d2:	5f 81       	ldd	r21, Y+7	; 0x07
    11d4:	41 30       	cpi	r20, 0x01	; 1
    11d6:	51 05       	cpc	r21, r1
    11d8:	59 f1       	breq	.+86     	; 0x1230 <DIO_get_pin_value+0xa0>
    11da:	8e 81       	ldd	r24, Y+6	; 0x06
    11dc:	9f 81       	ldd	r25, Y+7	; 0x07
    11de:	82 30       	cpi	r24, 0x02	; 2
    11e0:	91 05       	cpc	r25, r1
    11e2:	34 f4       	brge	.+12     	; 0x11f0 <DIO_get_pin_value+0x60>
    11e4:	2e 81       	ldd	r18, Y+6	; 0x06
    11e6:	3f 81       	ldd	r19, Y+7	; 0x07
    11e8:	21 15       	cp	r18, r1
    11ea:	31 05       	cpc	r19, r1
    11ec:	69 f0       	breq	.+26     	; 0x1208 <DIO_get_pin_value+0x78>
    11ee:	5b c0       	rjmp	.+182    	; 0x12a6 <DIO_get_pin_value+0x116>
    11f0:	4e 81       	ldd	r20, Y+6	; 0x06
    11f2:	5f 81       	ldd	r21, Y+7	; 0x07
    11f4:	42 30       	cpi	r20, 0x02	; 2
    11f6:	51 05       	cpc	r21, r1
    11f8:	79 f1       	breq	.+94     	; 0x1258 <DIO_get_pin_value+0xc8>
    11fa:	8e 81       	ldd	r24, Y+6	; 0x06
    11fc:	9f 81       	ldd	r25, Y+7	; 0x07
    11fe:	83 30       	cpi	r24, 0x03	; 3
    1200:	91 05       	cpc	r25, r1
    1202:	09 f4       	brne	.+2      	; 0x1206 <DIO_get_pin_value+0x76>
    1204:	3d c0       	rjmp	.+122    	; 0x1280 <DIO_get_pin_value+0xf0>
    1206:	4f c0       	rjmp	.+158    	; 0x12a6 <DIO_get_pin_value+0x116>
				case Group_A: *Pin_value=get_bit(DIO_u8_PINA,Pin_no);
    1208:	e9 e3       	ldi	r30, 0x39	; 57
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	8b 81       	ldd	r24, Y+3	; 0x03
    1214:	88 2f       	mov	r24, r24
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	a9 01       	movw	r20, r18
    121a:	02 c0       	rjmp	.+4      	; 0x1220 <DIO_get_pin_value+0x90>
    121c:	55 95       	asr	r21
    121e:	47 95       	ror	r20
    1220:	8a 95       	dec	r24
    1222:	e2 f7       	brpl	.-8      	; 0x121c <DIO_get_pin_value+0x8c>
    1224:	ca 01       	movw	r24, r20
    1226:	81 70       	andi	r24, 0x01	; 1
    1228:	ec 81       	ldd	r30, Y+4	; 0x04
    122a:	fd 81       	ldd	r31, Y+5	; 0x05
    122c:	80 83       	st	Z, r24
    122e:	3b c0       	rjmp	.+118    	; 0x12a6 <DIO_get_pin_value+0x116>
				break;
				case Group_B: *Pin_value=get_bit(DIO_u8_PINB,Pin_no);
    1230:	e6 e3       	ldi	r30, 0x36	; 54
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	80 81       	ld	r24, Z
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	88 2f       	mov	r24, r24
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	a9 01       	movw	r20, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_get_pin_value+0xb8>
    1244:	55 95       	asr	r21
    1246:	47 95       	ror	r20
    1248:	8a 95       	dec	r24
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_get_pin_value+0xb4>
    124c:	ca 01       	movw	r24, r20
    124e:	81 70       	andi	r24, 0x01	; 1
    1250:	ec 81       	ldd	r30, Y+4	; 0x04
    1252:	fd 81       	ldd	r31, Y+5	; 0x05
    1254:	80 83       	st	Z, r24
    1256:	27 c0       	rjmp	.+78     	; 0x12a6 <DIO_get_pin_value+0x116>
				break;
				case Group_C: *Pin_value=get_bit(DIO_u8_PINC,Pin_no);
    1258:	e3 e3       	ldi	r30, 0x33	; 51
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	88 2f       	mov	r24, r24
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	a9 01       	movw	r20, r18
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <DIO_get_pin_value+0xe0>
    126c:	55 95       	asr	r21
    126e:	47 95       	ror	r20
    1270:	8a 95       	dec	r24
    1272:	e2 f7       	brpl	.-8      	; 0x126c <DIO_get_pin_value+0xdc>
    1274:	ca 01       	movw	r24, r20
    1276:	81 70       	andi	r24, 0x01	; 1
    1278:	ec 81       	ldd	r30, Y+4	; 0x04
    127a:	fd 81       	ldd	r31, Y+5	; 0x05
    127c:	80 83       	st	Z, r24
    127e:	13 c0       	rjmp	.+38     	; 0x12a6 <DIO_get_pin_value+0x116>
				break;
				case Group_D: *Pin_value=get_bit(DIO_u8_PIND,Pin_no);
    1280:	e0 e3       	ldi	r30, 0x30	; 48
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a9 01       	movw	r20, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_get_pin_value+0x108>
    1294:	55 95       	asr	r21
    1296:	47 95       	ror	r20
    1298:	8a 95       	dec	r24
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_get_pin_value+0x104>
    129c:	ca 01       	movw	r24, r20
    129e:	81 70       	andi	r24, 0x01	; 1
    12a0:	ec 81       	ldd	r30, Y+4	; 0x04
    12a2:	fd 81       	ldd	r31, Y+5	; 0x05
    12a4:	80 83       	st	Z, r24
				break;
				}
			}
			return Error_state;
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a8:	27 96       	adiw	r28, 0x07	; 7
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	f8 94       	cli
    12ae:	de bf       	out	0x3e, r29	; 62
    12b0:	0f be       	out	0x3f, r0	; 63
    12b2:	cd bf       	out	0x3d, r28	; 61
    12b4:	cf 91       	pop	r28
    12b6:	df 91       	pop	r29
    12b8:	08 95       	ret

000012ba <DIO_set_port_value>:

u8 DIO_set_port_value(u8 Port_no,u8 Port_value){
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	00 d0       	rcall	.+0      	; 0x12c0 <DIO_set_port_value+0x6>
    12c0:	00 d0       	rcall	.+0      	; 0x12c2 <DIO_set_port_value+0x8>
    12c2:	0f 92       	push	r0
    12c4:	cd b7       	in	r28, 0x3d	; 61
    12c6:	de b7       	in	r29, 0x3e	; 62
    12c8:	8a 83       	std	Y+2, r24	; 0x02
    12ca:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_state=0;
    12cc:	19 82       	std	Y+1, r1	; 0x01
		if(Port_no>=DIO_max_port_no){
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	84 30       	cpi	r24, 0x04	; 4
    12d2:	18 f0       	brcs	.+6      	; 0x12da <DIO_set_port_value+0x20>
			Error_state=1;
    12d4:	81 e0       	ldi	r24, 0x01	; 1
    12d6:	89 83       	std	Y+1, r24	; 0x01
    12d8:	32 c0       	rjmp	.+100    	; 0x133e <DIO_set_port_value+0x84>
		}else if(Port_value>DIO_max_port_value){
			Error_state=2;
		}else{
			switch(Port_no){
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	3d 83       	std	Y+5, r19	; 0x05
    12e2:	2c 83       	std	Y+4, r18	; 0x04
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	9d 81       	ldd	r25, Y+5	; 0x05
    12e8:	81 30       	cpi	r24, 0x01	; 1
    12ea:	91 05       	cpc	r25, r1
    12ec:	d1 f0       	breq	.+52     	; 0x1322 <DIO_set_port_value+0x68>
    12ee:	2c 81       	ldd	r18, Y+4	; 0x04
    12f0:	3d 81       	ldd	r19, Y+5	; 0x05
    12f2:	22 30       	cpi	r18, 0x02	; 2
    12f4:	31 05       	cpc	r19, r1
    12f6:	2c f4       	brge	.+10     	; 0x1302 <DIO_set_port_value+0x48>
    12f8:	8c 81       	ldd	r24, Y+4	; 0x04
    12fa:	9d 81       	ldd	r25, Y+5	; 0x05
    12fc:	00 97       	sbiw	r24, 0x00	; 0
    12fe:	61 f0       	breq	.+24     	; 0x1318 <DIO_set_port_value+0x5e>
    1300:	1e c0       	rjmp	.+60     	; 0x133e <DIO_set_port_value+0x84>
    1302:	2c 81       	ldd	r18, Y+4	; 0x04
    1304:	3d 81       	ldd	r19, Y+5	; 0x05
    1306:	22 30       	cpi	r18, 0x02	; 2
    1308:	31 05       	cpc	r19, r1
    130a:	81 f0       	breq	.+32     	; 0x132c <DIO_set_port_value+0x72>
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	9d 81       	ldd	r25, Y+5	; 0x05
    1310:	83 30       	cpi	r24, 0x03	; 3
    1312:	91 05       	cpc	r25, r1
    1314:	81 f0       	breq	.+32     	; 0x1336 <DIO_set_port_value+0x7c>
    1316:	13 c0       	rjmp	.+38     	; 0x133e <DIO_set_port_value+0x84>
			case Group_A: DIO_u8_PORTA=Port_value;
    1318:	eb e3       	ldi	r30, 0x3B	; 59
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	80 83       	st	Z, r24
    1320:	0e c0       	rjmp	.+28     	; 0x133e <DIO_set_port_value+0x84>
			break;
			case Group_B: DIO_u8_PORTB=Port_value;
    1322:	e8 e3       	ldi	r30, 0x38	; 56
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	80 83       	st	Z, r24
    132a:	09 c0       	rjmp	.+18     	; 0x133e <DIO_set_port_value+0x84>
			break;
			case Group_C: DIO_u8_PORTC=Port_value;
    132c:	e5 e3       	ldi	r30, 0x35	; 53
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	80 83       	st	Z, r24
    1334:	04 c0       	rjmp	.+8      	; 0x133e <DIO_set_port_value+0x84>
			break;
			case Group_D: DIO_u8_PORTD=Port_value;
    1336:	e2 e3       	ldi	r30, 0x32	; 50
    1338:	f0 e0       	ldi	r31, 0x00	; 0
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	80 83       	st	Z, r24
			break;
			}
		}
		return Error_state;
    133e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <DIO_set_port_direction>:

u8 DIO_set_port_direction(u8 Port_no,u8 Port_direction){
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	00 d0       	rcall	.+0      	; 0x1356 <DIO_set_port_direction+0x6>
    1356:	00 d0       	rcall	.+0      	; 0x1358 <DIO_set_port_direction+0x8>
    1358:	0f 92       	push	r0
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	8a 83       	std	Y+2, r24	; 0x02
    1360:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_state=0;
    1362:	19 82       	std	Y+1, r1	; 0x01
			if(Port_no>=DIO_max_port_no){
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	84 30       	cpi	r24, 0x04	; 4
    1368:	18 f0       	brcs	.+6      	; 0x1370 <DIO_set_port_direction+0x20>
				Error_state=1;
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	89 83       	std	Y+1, r24	; 0x01
    136e:	32 c0       	rjmp	.+100    	; 0x13d4 <DIO_set_port_direction+0x84>
			}else if(Port_direction>DIO_max_port_direction){
				Error_state=2;
			}else{
				switch(Port_no){
    1370:	8a 81       	ldd	r24, Y+2	; 0x02
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	3d 83       	std	Y+5, r19	; 0x05
    1378:	2c 83       	std	Y+4, r18	; 0x04
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	9d 81       	ldd	r25, Y+5	; 0x05
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	91 05       	cpc	r25, r1
    1382:	d1 f0       	breq	.+52     	; 0x13b8 <DIO_set_port_direction+0x68>
    1384:	2c 81       	ldd	r18, Y+4	; 0x04
    1386:	3d 81       	ldd	r19, Y+5	; 0x05
    1388:	22 30       	cpi	r18, 0x02	; 2
    138a:	31 05       	cpc	r19, r1
    138c:	2c f4       	brge	.+10     	; 0x1398 <DIO_set_port_direction+0x48>
    138e:	8c 81       	ldd	r24, Y+4	; 0x04
    1390:	9d 81       	ldd	r25, Y+5	; 0x05
    1392:	00 97       	sbiw	r24, 0x00	; 0
    1394:	61 f0       	breq	.+24     	; 0x13ae <DIO_set_port_direction+0x5e>
    1396:	1e c0       	rjmp	.+60     	; 0x13d4 <DIO_set_port_direction+0x84>
    1398:	2c 81       	ldd	r18, Y+4	; 0x04
    139a:	3d 81       	ldd	r19, Y+5	; 0x05
    139c:	22 30       	cpi	r18, 0x02	; 2
    139e:	31 05       	cpc	r19, r1
    13a0:	81 f0       	breq	.+32     	; 0x13c2 <DIO_set_port_direction+0x72>
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	9d 81       	ldd	r25, Y+5	; 0x05
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	91 05       	cpc	r25, r1
    13aa:	81 f0       	breq	.+32     	; 0x13cc <DIO_set_port_direction+0x7c>
    13ac:	13 c0       	rjmp	.+38     	; 0x13d4 <DIO_set_port_direction+0x84>
				case Group_A: DIO_u8_DDRA=Port_direction;
    13ae:	ea e3       	ldi	r30, 0x3A	; 58
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	80 83       	st	Z, r24
    13b6:	0e c0       	rjmp	.+28     	; 0x13d4 <DIO_set_port_direction+0x84>
				break;
				case Group_B: DIO_u8_DDRB=Port_direction;
    13b8:	e7 e3       	ldi	r30, 0x37	; 55
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	80 83       	st	Z, r24
    13c0:	09 c0       	rjmp	.+18     	; 0x13d4 <DIO_set_port_direction+0x84>
				break;
				case Group_C: DIO_u8_DDRC=Port_direction;
    13c2:	e4 e3       	ldi	r30, 0x34	; 52
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	80 83       	st	Z, r24
    13ca:	04 c0       	rjmp	.+8      	; 0x13d4 <DIO_set_port_direction+0x84>
				break;
				case Group_D: DIO_u8_DDRD=Port_direction;;
    13cc:	e1 e3       	ldi	r30, 0x31	; 49
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	80 83       	st	Z, r24
				break;
				}
			}
			return Error_state;
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    13d6:	0f 90       	pop	r0
    13d8:	0f 90       	pop	r0
    13da:	0f 90       	pop	r0
    13dc:	0f 90       	pop	r0
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <send_command>:
#include"LCD_Interface.h"

//write command in lcd rs put low (rs: register select)
//******************************************study***********************
void send_command(u8 command)
{//rs low to write command
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    13ee:	2f 97       	sbiw	r28, 0x0f	; 15
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	de bf       	out	0x3e, r29	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	cd bf       	out	0x3d, r28	; 61
    13fa:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_set_pin_value(LCD_Control_Port,LCD_RS_Pin,DIO_Low);
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	0e 94 d2 06 	call	0xda4	; 0xda4 <DIO_set_pin_value>
	//rw low to write not read
	DIO_set_pin_value(LCD_Control_Port,LCD_RW_Pin,DIO_Low);
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	61 e0       	ldi	r22, 0x01	; 1
    140a:	40 e0       	ldi	r20, 0x00	; 0
    140c:	0e 94 d2 06 	call	0xda4	; 0xda4 <DIO_set_pin_value>
	//set command in pins
	DIO_set_port_value(LCD_Data_Port,command);
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	6f 85       	ldd	r22, Y+15	; 0x0f
    1414:	0e 94 5d 09 	call	0x12ba	; 0x12ba <DIO_set_port_value>
//final eneble the lcd to lcd know the data or command sent (pulse)
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_High);
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	62 e0       	ldi	r22, 0x02	; 2
    141c:	41 e0       	ldi	r20, 0x01	; 1
    141e:	0e 94 d2 06 	call	0xda4	; 0xda4 <DIO_set_pin_value>
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a0 e0       	ldi	r26, 0x00	; 0
    1428:	b0 e4       	ldi	r27, 0x40	; 64
    142a:	8b 87       	std	Y+11, r24	; 0x0b
    142c:	9c 87       	std	Y+12, r25	; 0x0c
    142e:	ad 87       	std	Y+13, r26	; 0x0d
    1430:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1432:	6b 85       	ldd	r22, Y+11	; 0x0b
    1434:	7c 85       	ldd	r23, Y+12	; 0x0c
    1436:	8d 85       	ldd	r24, Y+13	; 0x0d
    1438:	9e 85       	ldd	r25, Y+14	; 0x0e
    143a:	20 e0       	ldi	r18, 0x00	; 0
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	4a ef       	ldi	r20, 0xFA	; 250
    1440:	54 e4       	ldi	r21, 0x44	; 68
    1442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1446:	dc 01       	movw	r26, r24
    1448:	cb 01       	movw	r24, r22
    144a:	8f 83       	std	Y+7, r24	; 0x07
    144c:	98 87       	std	Y+8, r25	; 0x08
    144e:	a9 87       	std	Y+9, r26	; 0x09
    1450:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1452:	6f 81       	ldd	r22, Y+7	; 0x07
    1454:	78 85       	ldd	r23, Y+8	; 0x08
    1456:	89 85       	ldd	r24, Y+9	; 0x09
    1458:	9a 85       	ldd	r25, Y+10	; 0x0a
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	40 e8       	ldi	r20, 0x80	; 128
    1460:	5f e3       	ldi	r21, 0x3F	; 63
    1462:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1466:	88 23       	and	r24, r24
    1468:	2c f4       	brge	.+10     	; 0x1474 <send_command+0x8e>
		__ticks = 1;
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	9e 83       	std	Y+6, r25	; 0x06
    1470:	8d 83       	std	Y+5, r24	; 0x05
    1472:	3f c0       	rjmp	.+126    	; 0x14f2 <send_command+0x10c>
	else if (__tmp > 65535)
    1474:	6f 81       	ldd	r22, Y+7	; 0x07
    1476:	78 85       	ldd	r23, Y+8	; 0x08
    1478:	89 85       	ldd	r24, Y+9	; 0x09
    147a:	9a 85       	ldd	r25, Y+10	; 0x0a
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	3f ef       	ldi	r19, 0xFF	; 255
    1480:	4f e7       	ldi	r20, 0x7F	; 127
    1482:	57 e4       	ldi	r21, 0x47	; 71
    1484:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1488:	18 16       	cp	r1, r24
    148a:	4c f5       	brge	.+82     	; 0x14de <send_command+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    148c:	6b 85       	ldd	r22, Y+11	; 0x0b
    148e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1490:	8d 85       	ldd	r24, Y+13	; 0x0d
    1492:	9e 85       	ldd	r25, Y+14	; 0x0e
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e2       	ldi	r20, 0x20	; 32
    149a:	51 e4       	ldi	r21, 0x41	; 65
    149c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9e 83       	std	Y+6, r25	; 0x06
    14b2:	8d 83       	std	Y+5, r24	; 0x05
    14b4:	0f c0       	rjmp	.+30     	; 0x14d4 <send_command+0xee>
    14b6:	88 ec       	ldi	r24, 0xC8	; 200
    14b8:	90 e0       	ldi	r25, 0x00	; 0
    14ba:	9c 83       	std	Y+4, r25	; 0x04
    14bc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	01 97       	sbiw	r24, 0x01	; 1
    14c4:	f1 f7       	brne	.-4      	; 0x14c2 <send_command+0xdc>
    14c6:	9c 83       	std	Y+4, r25	; 0x04
    14c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14ca:	8d 81       	ldd	r24, Y+5	; 0x05
    14cc:	9e 81       	ldd	r25, Y+6	; 0x06
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	9e 83       	std	Y+6, r25	; 0x06
    14d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14d4:	8d 81       	ldd	r24, Y+5	; 0x05
    14d6:	9e 81       	ldd	r25, Y+6	; 0x06
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	69 f7       	brne	.-38     	; 0x14b6 <send_command+0xd0>
    14dc:	14 c0       	rjmp	.+40     	; 0x1506 <send_command+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14de:	6f 81       	ldd	r22, Y+7	; 0x07
    14e0:	78 85       	ldd	r23, Y+8	; 0x08
    14e2:	89 85       	ldd	r24, Y+9	; 0x09
    14e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	9e 83       	std	Y+6, r25	; 0x06
    14f0:	8d 83       	std	Y+5, r24	; 0x05
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	9a 83       	std	Y+2, r25	; 0x02
    14f8:	89 83       	std	Y+1, r24	; 0x01
    14fa:	89 81       	ldd	r24, Y+1	; 0x01
    14fc:	9a 81       	ldd	r25, Y+2	; 0x02
    14fe:	01 97       	sbiw	r24, 0x01	; 1
    1500:	f1 f7       	brne	.-4      	; 0x14fe <send_command+0x118>
    1502:	9a 83       	std	Y+2, r25	; 0x02
    1504:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_Low);
    1506:	81 e0       	ldi	r24, 0x01	; 1
    1508:	62 e0       	ldi	r22, 0x02	; 2
    150a:	40 e0       	ldi	r20, 0x00	; 0
    150c:	0e 94 d2 06 	call	0xda4	; 0xda4 <DIO_set_pin_value>

}
    1510:	2f 96       	adiw	r28, 0x0f	; 15
    1512:	0f b6       	in	r0, 0x3f	; 63
    1514:	f8 94       	cli
    1516:	de bf       	out	0x3e, r29	; 62
    1518:	0f be       	out	0x3f, r0	; 63
    151a:	cd bf       	out	0x3d, r28	; 61
    151c:	cf 91       	pop	r28
    151e:	df 91       	pop	r29
    1520:	08 95       	ret

00001522 <send_data>:
void send_data(u8 data)
{//rs low to write command
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
    152a:	2f 97       	sbiw	r28, 0x0f	; 15
    152c:	0f b6       	in	r0, 0x3f	; 63
    152e:	f8 94       	cli
    1530:	de bf       	out	0x3e, r29	; 62
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	cd bf       	out	0x3d, r28	; 61
    1536:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_set_pin_value(LCD_Control_Port,LCD_RS_Pin,DIO_High);
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	60 e0       	ldi	r22, 0x00	; 0
    153c:	41 e0       	ldi	r20, 0x01	; 1
    153e:	0e 94 d2 06 	call	0xda4	; 0xda4 <DIO_set_pin_value>
	//rw low to write not read
	DIO_set_pin_value(LCD_Control_Port,LCD_RW_Pin,DIO_Low);
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	61 e0       	ldi	r22, 0x01	; 1
    1546:	40 e0       	ldi	r20, 0x00	; 0
    1548:	0e 94 d2 06 	call	0xda4	; 0xda4 <DIO_set_pin_value>
	//set command in pins
	DIO_set_port_value(LCD_Data_Port,data);
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1550:	0e 94 5d 09 	call	0x12ba	; 0x12ba <DIO_set_port_value>
//final eneble the lcd to lcd know the data or command sent (pulse)
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_High);
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	62 e0       	ldi	r22, 0x02	; 2
    1558:	41 e0       	ldi	r20, 0x01	; 1
    155a:	0e 94 d2 06 	call	0xda4	; 0xda4 <DIO_set_pin_value>
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	a0 e0       	ldi	r26, 0x00	; 0
    1564:	b0 e4       	ldi	r27, 0x40	; 64
    1566:	8b 87       	std	Y+11, r24	; 0x0b
    1568:	9c 87       	std	Y+12, r25	; 0x0c
    156a:	ad 87       	std	Y+13, r26	; 0x0d
    156c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    156e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1570:	7c 85       	ldd	r23, Y+12	; 0x0c
    1572:	8d 85       	ldd	r24, Y+13	; 0x0d
    1574:	9e 85       	ldd	r25, Y+14	; 0x0e
    1576:	20 e0       	ldi	r18, 0x00	; 0
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	4a ef       	ldi	r20, 0xFA	; 250
    157c:	54 e4       	ldi	r21, 0x44	; 68
    157e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	8f 83       	std	Y+7, r24	; 0x07
    1588:	98 87       	std	Y+8, r25	; 0x08
    158a:	a9 87       	std	Y+9, r26	; 0x09
    158c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    158e:	6f 81       	ldd	r22, Y+7	; 0x07
    1590:	78 85       	ldd	r23, Y+8	; 0x08
    1592:	89 85       	ldd	r24, Y+9	; 0x09
    1594:	9a 85       	ldd	r25, Y+10	; 0x0a
    1596:	20 e0       	ldi	r18, 0x00	; 0
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	40 e8       	ldi	r20, 0x80	; 128
    159c:	5f e3       	ldi	r21, 0x3F	; 63
    159e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15a2:	88 23       	and	r24, r24
    15a4:	2c f4       	brge	.+10     	; 0x15b0 <send_data+0x8e>
		__ticks = 1;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	9e 83       	std	Y+6, r25	; 0x06
    15ac:	8d 83       	std	Y+5, r24	; 0x05
    15ae:	3f c0       	rjmp	.+126    	; 0x162e <send_data+0x10c>
	else if (__tmp > 65535)
    15b0:	6f 81       	ldd	r22, Y+7	; 0x07
    15b2:	78 85       	ldd	r23, Y+8	; 0x08
    15b4:	89 85       	ldd	r24, Y+9	; 0x09
    15b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	3f ef       	ldi	r19, 0xFF	; 255
    15bc:	4f e7       	ldi	r20, 0x7F	; 127
    15be:	57 e4       	ldi	r21, 0x47	; 71
    15c0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15c4:	18 16       	cp	r1, r24
    15c6:	4c f5       	brge	.+82     	; 0x161a <send_data+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    15ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    15cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	30 e0       	ldi	r19, 0x00	; 0
    15d4:	40 e2       	ldi	r20, 0x20	; 32
    15d6:	51 e4       	ldi	r21, 0x41	; 65
    15d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15dc:	dc 01       	movw	r26, r24
    15de:	cb 01       	movw	r24, r22
    15e0:	bc 01       	movw	r22, r24
    15e2:	cd 01       	movw	r24, r26
    15e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	9e 83       	std	Y+6, r25	; 0x06
    15ee:	8d 83       	std	Y+5, r24	; 0x05
    15f0:	0f c0       	rjmp	.+30     	; 0x1610 <send_data+0xee>
    15f2:	88 ec       	ldi	r24, 0xC8	; 200
    15f4:	90 e0       	ldi	r25, 0x00	; 0
    15f6:	9c 83       	std	Y+4, r25	; 0x04
    15f8:	8b 83       	std	Y+3, r24	; 0x03
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	01 97       	sbiw	r24, 0x01	; 1
    1600:	f1 f7       	brne	.-4      	; 0x15fe <send_data+0xdc>
    1602:	9c 83       	std	Y+4, r25	; 0x04
    1604:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	9e 81       	ldd	r25, Y+6	; 0x06
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	9e 83       	std	Y+6, r25	; 0x06
    160e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1610:	8d 81       	ldd	r24, Y+5	; 0x05
    1612:	9e 81       	ldd	r25, Y+6	; 0x06
    1614:	00 97       	sbiw	r24, 0x00	; 0
    1616:	69 f7       	brne	.-38     	; 0x15f2 <send_data+0xd0>
    1618:	14 c0       	rjmp	.+40     	; 0x1642 <send_data+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    161a:	6f 81       	ldd	r22, Y+7	; 0x07
    161c:	78 85       	ldd	r23, Y+8	; 0x08
    161e:	89 85       	ldd	r24, Y+9	; 0x09
    1620:	9a 85       	ldd	r25, Y+10	; 0x0a
    1622:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1626:	dc 01       	movw	r26, r24
    1628:	cb 01       	movw	r24, r22
    162a:	9e 83       	std	Y+6, r25	; 0x06
    162c:	8d 83       	std	Y+5, r24	; 0x05
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	9a 83       	std	Y+2, r25	; 0x02
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	9a 81       	ldd	r25, Y+2	; 0x02
    163a:	01 97       	sbiw	r24, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <send_data+0x118>
    163e:	9a 83       	std	Y+2, r25	; 0x02
    1640:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_Low);
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	62 e0       	ldi	r22, 0x02	; 2
    1646:	40 e0       	ldi	r20, 0x00	; 0
    1648:	0e 94 d2 06 	call	0xda4	; 0xda4 <DIO_set_pin_value>

}
    164c:	2f 96       	adiw	r28, 0x0f	; 15
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <send_string>:

void send_string(const char *string_data)
{
    165e:	df 93       	push	r29
    1660:	cf 93       	push	r28
    1662:	00 d0       	rcall	.+0      	; 0x1664 <send_string+0x6>
    1664:	0f 92       	push	r0
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	9b 83       	std	Y+3, r25	; 0x03
    166c:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter=0;
    166e:	19 82       	std	Y+1, r1	; 0x01
    1670:	0e c0       	rjmp	.+28     	; 0x168e <send_string+0x30>
	while(string_data[counter]!='\0')
	{
		send_data(string_data[counter]);
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	8a 81       	ldd	r24, Y+2	; 0x02
    167a:	9b 81       	ldd	r25, Y+3	; 0x03
    167c:	fc 01       	movw	r30, r24
    167e:	e2 0f       	add	r30, r18
    1680:	f3 1f       	adc	r31, r19
    1682:	80 81       	ld	r24, Z
    1684:	0e 94 91 0a 	call	0x1522	; 0x1522 <send_data>
		counter++;
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	8f 5f       	subi	r24, 0xFF	; 255
    168c:	89 83       	std	Y+1, r24	; 0x01
}

void send_string(const char *string_data)
{
	u8 counter=0;
	while(string_data[counter]!='\0')
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	9b 81       	ldd	r25, Y+3	; 0x03
    1698:	fc 01       	movw	r30, r24
    169a:	e2 0f       	add	r30, r18
    169c:	f3 1f       	adc	r31, r19
    169e:	80 81       	ld	r24, Z
    16a0:	88 23       	and	r24, r24
    16a2:	39 f7       	brne	.-50     	; 0x1672 <send_string+0x14>
	{
		send_data(string_data[counter]);
		counter++;
	}

}
    16a4:	0f 90       	pop	r0
    16a6:	0f 90       	pop	r0
    16a8:	0f 90       	pop	r0
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <go_pos>:

void go_pos(u8 x_pos, u8 y_pos)
{
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	00 d0       	rcall	.+0      	; 0x16b6 <go_pos+0x6>
    16b6:	0f 92       	push	r0
    16b8:	cd b7       	in	r28, 0x3d	; 61
    16ba:	de b7       	in	r29, 0x3e	; 62
    16bc:	8a 83       	std	Y+2, r24	; 0x02
    16be:	6b 83       	std	Y+3, r22	; 0x03
	u8 address;
	if (y_pos==0)
    16c0:	8b 81       	ldd	r24, Y+3	; 0x03
    16c2:	88 23       	and	r24, r24
    16c4:	19 f4       	brne	.+6      	; 0x16cc <go_pos+0x1c>
		address= x_pos;
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	06 c0       	rjmp	.+12     	; 0x16d8 <go_pos+0x28>
	else if(y_pos==1)
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	81 30       	cpi	r24, 0x01	; 1
    16d0:	19 f4       	brne	.+6      	; 0x16d8 <go_pos+0x28>
	address=(x_pos+ start_secound_colom);
    16d2:	8a 81       	ldd	r24, Y+2	; 0x02
    16d4:	80 5c       	subi	r24, 0xC0	; 192
    16d6:	89 83       	std	Y+1, r24	; 0x01

	send_command(address+data_sheet_send_pos_command);
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	80 58       	subi	r24, 0x80	; 128
    16dc:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <send_command>

}
    16e0:	0f 90       	pop	r0
    16e2:	0f 90       	pop	r0
    16e4:	0f 90       	pop	r0
    16e6:	cf 91       	pop	r28
    16e8:	df 91       	pop	r29
    16ea:	08 95       	ret

000016ec <write_num>:

void write_num (u32 num)
{
    16ec:	df 93       	push	r29
    16ee:	cf 93       	push	r28
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	6a 97       	sbiw	r28, 0x1a	; 26
    16f6:	0f b6       	in	r0, 0x3f	; 63
    16f8:	f8 94       	cli
    16fa:	de bf       	out	0x3e, r29	; 62
    16fc:	0f be       	out	0x3f, r0	; 63
    16fe:	cd bf       	out	0x3d, r28	; 61
    1700:	6f 8b       	std	Y+23, r22	; 0x17
    1702:	78 8f       	std	Y+24, r23	; 0x18
    1704:	89 8f       	std	Y+25, r24	; 0x19
    1706:	9a 8f       	std	Y+26, r25	; 0x1a
	u8 rem,arr[20], arr_index=0;
    1708:	19 82       	std	Y+1, r1	; 0x01
	if (num =='0')
    170a:	8f 89       	ldd	r24, Y+23	; 0x17
    170c:	98 8d       	ldd	r25, Y+24	; 0x18
    170e:	a9 8d       	ldd	r26, Y+25	; 0x19
    1710:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1712:	80 33       	cpi	r24, 0x30	; 48
    1714:	91 05       	cpc	r25, r1
    1716:	a1 05       	cpc	r26, r1
    1718:	b1 05       	cpc	r27, r1
    171a:	f1 f5       	brne	.+124    	; 0x1798 <write_num+0xac>
		{arr[arr_index]='0';
    171c:	89 81       	ldd	r24, Y+1	; 0x01
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	ce 01       	movw	r24, r28
    1724:	03 96       	adiw	r24, 0x03	; 3
    1726:	fc 01       	movw	r30, r24
    1728:	e2 0f       	add	r30, r18
    172a:	f3 1f       	adc	r31, r19
    172c:	80 e3       	ldi	r24, 0x30	; 48
    172e:	80 83       	st	Z, r24
	arr_index++;}
    1730:	89 81       	ldd	r24, Y+1	; 0x01
    1732:	8f 5f       	subi	r24, 0xFF	; 255
    1734:	89 83       	std	Y+1, r24	; 0x01
    1736:	30 c0       	rjmp	.+96     	; 0x1798 <write_num+0xac>
	while(num!='0')
		{
			rem=num % 10;
    1738:	8f 89       	ldd	r24, Y+23	; 0x17
    173a:	98 8d       	ldd	r25, Y+24	; 0x18
    173c:	a9 8d       	ldd	r26, Y+25	; 0x19
    173e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1740:	2a e0       	ldi	r18, 0x0A	; 10
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	50 e0       	ldi	r21, 0x00	; 0
    1748:	bc 01       	movw	r22, r24
    174a:	cd 01       	movw	r24, r26
    174c:	0e 94 c6 11 	call	0x238c	; 0x238c <__udivmodsi4>
    1750:	dc 01       	movw	r26, r24
    1752:	cb 01       	movw	r24, r22
    1754:	8a 83       	std	Y+2, r24	; 0x02
			arr[arr_index]=rem+'0';
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	48 2f       	mov	r20, r24
    1760:	40 5d       	subi	r20, 0xD0	; 208
    1762:	ce 01       	movw	r24, r28
    1764:	03 96       	adiw	r24, 0x03	; 3
    1766:	fc 01       	movw	r30, r24
    1768:	e2 0f       	add	r30, r18
    176a:	f3 1f       	adc	r31, r19
    176c:	40 83       	st	Z, r20
			arr_index++;
    176e:	89 81       	ldd	r24, Y+1	; 0x01
    1770:	8f 5f       	subi	r24, 0xFF	; 255
    1772:	89 83       	std	Y+1, r24	; 0x01
			num= num/10;
    1774:	8f 89       	ldd	r24, Y+23	; 0x17
    1776:	98 8d       	ldd	r25, Y+24	; 0x18
    1778:	a9 8d       	ldd	r26, Y+25	; 0x19
    177a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    177c:	2a e0       	ldi	r18, 0x0A	; 10
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e0       	ldi	r20, 0x00	; 0
    1782:	50 e0       	ldi	r21, 0x00	; 0
    1784:	bc 01       	movw	r22, r24
    1786:	cd 01       	movw	r24, r26
    1788:	0e 94 c6 11 	call	0x238c	; 0x238c <__udivmodsi4>
    178c:	da 01       	movw	r26, r20
    178e:	c9 01       	movw	r24, r18
    1790:	8f 8b       	std	Y+23, r24	; 0x17
    1792:	98 8f       	std	Y+24, r25	; 0x18
    1794:	a9 8f       	std	Y+25, r26	; 0x19
    1796:	ba 8f       	std	Y+26, r27	; 0x1a
{
	u8 rem,arr[20], arr_index=0;
	if (num =='0')
		{arr[arr_index]='0';
	arr_index++;}
	while(num!='0')
    1798:	8f 89       	ldd	r24, Y+23	; 0x17
    179a:	98 8d       	ldd	r25, Y+24	; 0x18
    179c:	a9 8d       	ldd	r26, Y+25	; 0x19
    179e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    17a0:	80 33       	cpi	r24, 0x30	; 48
    17a2:	91 05       	cpc	r25, r1
    17a4:	a1 05       	cpc	r26, r1
    17a6:	b1 05       	cpc	r27, r1
    17a8:	39 f6       	brne	.-114    	; 0x1738 <write_num+0x4c>
			arr_index++;
			num= num/10;


		}
	arr[arr_index]='\0';
    17aa:	89 81       	ldd	r24, Y+1	; 0x01
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	ce 01       	movw	r24, r28
    17b2:	03 96       	adiw	r24, 0x03	; 3
    17b4:	fc 01       	movw	r30, r24
    17b6:	e2 0f       	add	r30, r18
    17b8:	f3 1f       	adc	r31, r19
    17ba:	10 82       	st	Z, r1
reverse(arr,arr_index);
    17bc:	ce 01       	movw	r24, r28
    17be:	03 96       	adiw	r24, 0x03	; 3
    17c0:	69 81       	ldd	r22, Y+1	; 0x01
    17c2:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <reverse>
send_string(arr);
    17c6:	ce 01       	movw	r24, r28
    17c8:	03 96       	adiw	r24, 0x03	; 3
    17ca:	0e 94 2f 0b 	call	0x165e	; 0x165e <send_string>

}
    17ce:	6a 96       	adiw	r28, 0x1a	; 26
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	cf 91       	pop	r28
    17dc:	df 91       	pop	r29
    17de:	08 95       	ret

000017e0 <LCD_write_cmd>:
//****************************************************************

void LCD_write_cmd(u8 cmd){
    17e0:	df 93       	push	r29
    17e2:	cf 93       	push	r28
    17e4:	0f 92       	push	r0
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	89 83       	std	Y+1, r24	; 0x01
	DIO_set_pin_value(LCD_Control_Port,LCD_RS_Pin,DIO_Low);
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	40 e0       	ldi	r20, 0x00	; 0
    17f2:	0e 94 d2 06 	call	0xda4	; 0xda4 <DIO_set_pin_value>
	LCD_write(cmd);
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	0e 94 14 0c 	call	0x1828	; 0x1828 <LCD_write>
}
    17fc:	0f 90       	pop	r0
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	08 95       	ret

00001804 <LCD_write_data>:

void LCD_write_data(u8 data){
    1804:	df 93       	push	r29
    1806:	cf 93       	push	r28
    1808:	0f 92       	push	r0
    180a:	cd b7       	in	r28, 0x3d	; 61
    180c:	de b7       	in	r29, 0x3e	; 62
    180e:	89 83       	std	Y+1, r24	; 0x01
	DIO_set_pin_value(LCD_Control_Port,LCD_RS_Pin,DIO_High);
    1810:	81 e0       	ldi	r24, 0x01	; 1
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	41 e0       	ldi	r20, 0x01	; 1
    1816:	0e 94 d2 06 	call	0xda4	; 0xda4 <DIO_set_pin_value>
	LCD_write(data);
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	0e 94 14 0c 	call	0x1828	; 0x1828 <LCD_write>
}
    1820:	0f 90       	pop	r0
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <LCD_write>:

void LCD_write(u8 value){
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
    1830:	61 97       	sbiw	r28, 0x11	; 17
    1832:	0f b6       	in	r0, 0x3f	; 63
    1834:	f8 94       	cli
    1836:	de bf       	out	0x3e, r29	; 62
    1838:	0f be       	out	0x3f, r0	; 63
    183a:	cd bf       	out	0x3d, r28	; 61
    183c:	89 8b       	std	Y+17, r24	; 0x11
	DIO_set_pin_value(LCD_Control_Port,LCD_RW_Pin,DIO_Low);
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	61 e0       	ldi	r22, 0x01	; 1
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	0e 94 d2 06 	call	0xda4	; 0xda4 <DIO_set_pin_value>
	for(int i=0;i<8;i++){
    1848:	18 8a       	std	Y+16, r1	; 0x10
    184a:	1f 86       	std	Y+15, r1	; 0x0f
    184c:	16 c0       	rjmp	.+44     	; 0x187a <LCD_write+0x52>
		DIO_set_pin_value(LCD_Data_Port,i,get_bit(value,i));//get bit for get each bit from byte cmd or data
    184e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1850:	89 89       	ldd	r24, Y+17	; 0x11
    1852:	88 2f       	mov	r24, r24
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	0f 84       	ldd	r0, Y+15	; 0x0f
    1858:	02 c0       	rjmp	.+4      	; 0x185e <LCD_write+0x36>
    185a:	95 95       	asr	r25
    185c:	87 95       	ror	r24
    185e:	0a 94       	dec	r0
    1860:	e2 f7       	brpl	.-8      	; 0x185a <LCD_write+0x32>
    1862:	98 2f       	mov	r25, r24
    1864:	91 70       	andi	r25, 0x01	; 1
    1866:	82 e0       	ldi	r24, 0x02	; 2
    1868:	62 2f       	mov	r22, r18
    186a:	49 2f       	mov	r20, r25
    186c:	0e 94 d2 06 	call	0xda4	; 0xda4 <DIO_set_pin_value>
	LCD_write(data);
}

void LCD_write(u8 value){
	DIO_set_pin_value(LCD_Control_Port,LCD_RW_Pin,DIO_Low);
	for(int i=0;i<8;i++){
    1870:	8f 85       	ldd	r24, Y+15	; 0x0f
    1872:	98 89       	ldd	r25, Y+16	; 0x10
    1874:	01 96       	adiw	r24, 0x01	; 1
    1876:	98 8b       	std	Y+16, r25	; 0x10
    1878:	8f 87       	std	Y+15, r24	; 0x0f
    187a:	8f 85       	ldd	r24, Y+15	; 0x0f
    187c:	98 89       	ldd	r25, Y+16	; 0x10
    187e:	88 30       	cpi	r24, 0x08	; 8
    1880:	91 05       	cpc	r25, r1
    1882:	2c f3       	brlt	.-54     	; 0x184e <LCD_write+0x26>
		DIO_set_pin_value(LCD_Data_Port,i,get_bit(value,i));//get bit for get each bit from byte cmd or data
	}
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_High); //pulse for know instruction is coming
    1884:	81 e0       	ldi	r24, 0x01	; 1
    1886:	62 e0       	ldi	r22, 0x02	; 2
    1888:	41 e0       	ldi	r20, 0x01	; 1
    188a:	0e 94 d2 06 	call	0xda4	; 0xda4 <DIO_set_pin_value>
    188e:	80 e0       	ldi	r24, 0x00	; 0
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a0 e8       	ldi	r26, 0x80	; 128
    1894:	bf e3       	ldi	r27, 0x3F	; 63
    1896:	8b 87       	std	Y+11, r24	; 0x0b
    1898:	9c 87       	std	Y+12, r25	; 0x0c
    189a:	ad 87       	std	Y+13, r26	; 0x0d
    189c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189e:	6b 85       	ldd	r22, Y+11	; 0x0b
    18a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    18a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a6:	20 e0       	ldi	r18, 0x00	; 0
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	4a ef       	ldi	r20, 0xFA	; 250
    18ac:	54 e4       	ldi	r21, 0x44	; 68
    18ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18b2:	dc 01       	movw	r26, r24
    18b4:	cb 01       	movw	r24, r22
    18b6:	8f 83       	std	Y+7, r24	; 0x07
    18b8:	98 87       	std	Y+8, r25	; 0x08
    18ba:	a9 87       	std	Y+9, r26	; 0x09
    18bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18be:	6f 81       	ldd	r22, Y+7	; 0x07
    18c0:	78 85       	ldd	r23, Y+8	; 0x08
    18c2:	89 85       	ldd	r24, Y+9	; 0x09
    18c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c6:	20 e0       	ldi	r18, 0x00	; 0
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	40 e8       	ldi	r20, 0x80	; 128
    18cc:	5f e3       	ldi	r21, 0x3F	; 63
    18ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18d2:	88 23       	and	r24, r24
    18d4:	2c f4       	brge	.+10     	; 0x18e0 <LCD_write+0xb8>
		__ticks = 1;
    18d6:	81 e0       	ldi	r24, 0x01	; 1
    18d8:	90 e0       	ldi	r25, 0x00	; 0
    18da:	9e 83       	std	Y+6, r25	; 0x06
    18dc:	8d 83       	std	Y+5, r24	; 0x05
    18de:	3f c0       	rjmp	.+126    	; 0x195e <LCD_write+0x136>
	else if (__tmp > 65535)
    18e0:	6f 81       	ldd	r22, Y+7	; 0x07
    18e2:	78 85       	ldd	r23, Y+8	; 0x08
    18e4:	89 85       	ldd	r24, Y+9	; 0x09
    18e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	3f ef       	ldi	r19, 0xFF	; 255
    18ec:	4f e7       	ldi	r20, 0x7F	; 127
    18ee:	57 e4       	ldi	r21, 0x47	; 71
    18f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18f4:	18 16       	cp	r1, r24
    18f6:	4c f5       	brge	.+82     	; 0x194a <LCD_write+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    18fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    18fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	40 e2       	ldi	r20, 0x20	; 32
    1906:	51 e4       	ldi	r21, 0x41	; 65
    1908:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	bc 01       	movw	r22, r24
    1912:	cd 01       	movw	r24, r26
    1914:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1918:	dc 01       	movw	r26, r24
    191a:	cb 01       	movw	r24, r22
    191c:	9e 83       	std	Y+6, r25	; 0x06
    191e:	8d 83       	std	Y+5, r24	; 0x05
    1920:	0f c0       	rjmp	.+30     	; 0x1940 <LCD_write+0x118>
    1922:	88 ec       	ldi	r24, 0xC8	; 200
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	9c 83       	std	Y+4, r25	; 0x04
    1928:	8b 83       	std	Y+3, r24	; 0x03
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	9c 81       	ldd	r25, Y+4	; 0x04
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	f1 f7       	brne	.-4      	; 0x192e <LCD_write+0x106>
    1932:	9c 83       	std	Y+4, r25	; 0x04
    1934:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1936:	8d 81       	ldd	r24, Y+5	; 0x05
    1938:	9e 81       	ldd	r25, Y+6	; 0x06
    193a:	01 97       	sbiw	r24, 0x01	; 1
    193c:	9e 83       	std	Y+6, r25	; 0x06
    193e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1940:	8d 81       	ldd	r24, Y+5	; 0x05
    1942:	9e 81       	ldd	r25, Y+6	; 0x06
    1944:	00 97       	sbiw	r24, 0x00	; 0
    1946:	69 f7       	brne	.-38     	; 0x1922 <LCD_write+0xfa>
    1948:	14 c0       	rjmp	.+40     	; 0x1972 <LCD_write+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    194a:	6f 81       	ldd	r22, Y+7	; 0x07
    194c:	78 85       	ldd	r23, Y+8	; 0x08
    194e:	89 85       	ldd	r24, Y+9	; 0x09
    1950:	9a 85       	ldd	r25, Y+10	; 0x0a
    1952:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1956:	dc 01       	movw	r26, r24
    1958:	cb 01       	movw	r24, r22
    195a:	9e 83       	std	Y+6, r25	; 0x06
    195c:	8d 83       	std	Y+5, r24	; 0x05
    195e:	8d 81       	ldd	r24, Y+5	; 0x05
    1960:	9e 81       	ldd	r25, Y+6	; 0x06
    1962:	9a 83       	std	Y+2, r25	; 0x02
    1964:	89 83       	std	Y+1, r24	; 0x01
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	9a 81       	ldd	r25, Y+2	; 0x02
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	f1 f7       	brne	.-4      	; 0x196a <LCD_write+0x142>
    196e:	9a 83       	std	Y+2, r25	; 0x02
    1970:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);											//pulse for know instruction is coming
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_Low);//pulse for know instruction is coming
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	62 e0       	ldi	r22, 0x02	; 2
    1976:	40 e0       	ldi	r20, 0x00	; 0
    1978:	0e 94 d2 06 	call	0xda4	; 0xda4 <DIO_set_pin_value>
}
    197c:	61 96       	adiw	r28, 0x11	; 17
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	de bf       	out	0x3e, r29	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	cd bf       	out	0x3d, r28	; 61
    1988:	cf 91       	pop	r28
    198a:	df 91       	pop	r29
    198c:	08 95       	ret

0000198e <LCD_Intialization>:

void LCD_Intialization(void){
    198e:	0f 93       	push	r16
    1990:	1f 93       	push	r17
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	cd b7       	in	r28, 0x3d	; 61
    1998:	de b7       	in	r29, 0x3e	; 62
    199a:	cc 54       	subi	r28, 0x4C	; 76
    199c:	d0 40       	sbci	r29, 0x00	; 0
    199e:	0f b6       	in	r0, 0x3f	; 63
    19a0:	f8 94       	cli
    19a2:	de bf       	out	0x3e, r29	; 62
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	cd bf       	out	0x3d, r28	; 61
	DIO_set_port_direction(LCD_Data_Port,DIO_max_port_direction);
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	6f ef       	ldi	r22, 0xFF	; 255
    19ac:	0e 94 a8 09 	call	0x1350	; 0x1350 <DIO_set_port_direction>
	DIO_set_pin_direction(LCD_Control_Port,LCD_RS_Pin,DIO_Output);
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	41 e0       	ldi	r20, 0x01	; 1
    19b6:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_set_pin_direction>
	DIO_set_pin_direction(LCD_Control_Port,LCD_RW_Pin,DIO_Output);
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	61 e0       	ldi	r22, 0x01	; 1
    19be:	41 e0       	ldi	r20, 0x01	; 1
    19c0:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_set_pin_direction>
	DIO_set_pin_direction(LCD_Control_Port,LCD_E_Pin,DIO_Output);
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	62 e0       	ldi	r22, 0x02	; 2
    19c8:	41 e0       	ldi	r20, 0x01	; 1
    19ca:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_set_pin_direction>
    19ce:	fe 01       	movw	r30, r28
    19d0:	e7 5b       	subi	r30, 0xB7	; 183
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	a0 e2       	ldi	r26, 0x20	; 32
    19da:	b2 e4       	ldi	r27, 0x42	; 66
    19dc:	80 83       	st	Z, r24
    19de:	91 83       	std	Z+1, r25	; 0x01
    19e0:	a2 83       	std	Z+2, r26	; 0x02
    19e2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19e4:	8e 01       	movw	r16, r28
    19e6:	0b 5b       	subi	r16, 0xBB	; 187
    19e8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ea:	fe 01       	movw	r30, r28
    19ec:	e7 5b       	subi	r30, 0xB7	; 183
    19ee:	ff 4f       	sbci	r31, 0xFF	; 255
    19f0:	60 81       	ld	r22, Z
    19f2:	71 81       	ldd	r23, Z+1	; 0x01
    19f4:	82 81       	ldd	r24, Z+2	; 0x02
    19f6:	93 81       	ldd	r25, Z+3	; 0x03
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	4a ef       	ldi	r20, 0xFA	; 250
    19fe:	54 e4       	ldi	r21, 0x44	; 68
    1a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	f8 01       	movw	r30, r16
    1a0a:	80 83       	st	Z, r24
    1a0c:	91 83       	std	Z+1, r25	; 0x01
    1a0e:	a2 83       	std	Z+2, r26	; 0x02
    1a10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a12:	fe 01       	movw	r30, r28
    1a14:	eb 5b       	subi	r30, 0xBB	; 187
    1a16:	ff 4f       	sbci	r31, 0xFF	; 255
    1a18:	60 81       	ld	r22, Z
    1a1a:	71 81       	ldd	r23, Z+1	; 0x01
    1a1c:	82 81       	ldd	r24, Z+2	; 0x02
    1a1e:	93 81       	ldd	r25, Z+3	; 0x03
    1a20:	20 e0       	ldi	r18, 0x00	; 0
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	40 e8       	ldi	r20, 0x80	; 128
    1a26:	5f e3       	ldi	r21, 0x3F	; 63
    1a28:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a2c:	88 23       	and	r24, r24
    1a2e:	44 f4       	brge	.+16     	; 0x1a40 <LCD_Intialization+0xb2>
		__ticks = 1;
    1a30:	fe 01       	movw	r30, r28
    1a32:	ed 5b       	subi	r30, 0xBD	; 189
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	91 83       	std	Z+1, r25	; 0x01
    1a3c:	80 83       	st	Z, r24
    1a3e:	64 c0       	rjmp	.+200    	; 0x1b08 <LCD_Intialization+0x17a>
	else if (__tmp > 65535)
    1a40:	fe 01       	movw	r30, r28
    1a42:	eb 5b       	subi	r30, 0xBB	; 187
    1a44:	ff 4f       	sbci	r31, 0xFF	; 255
    1a46:	60 81       	ld	r22, Z
    1a48:	71 81       	ldd	r23, Z+1	; 0x01
    1a4a:	82 81       	ldd	r24, Z+2	; 0x02
    1a4c:	93 81       	ldd	r25, Z+3	; 0x03
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	3f ef       	ldi	r19, 0xFF	; 255
    1a52:	4f e7       	ldi	r20, 0x7F	; 127
    1a54:	57 e4       	ldi	r21, 0x47	; 71
    1a56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a5a:	18 16       	cp	r1, r24
    1a5c:	0c f0       	brlt	.+2      	; 0x1a60 <LCD_Intialization+0xd2>
    1a5e:	43 c0       	rjmp	.+134    	; 0x1ae6 <LCD_Intialization+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a60:	fe 01       	movw	r30, r28
    1a62:	e7 5b       	subi	r30, 0xB7	; 183
    1a64:	ff 4f       	sbci	r31, 0xFF	; 255
    1a66:	60 81       	ld	r22, Z
    1a68:	71 81       	ldd	r23, Z+1	; 0x01
    1a6a:	82 81       	ldd	r24, Z+2	; 0x02
    1a6c:	93 81       	ldd	r25, Z+3	; 0x03
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e2       	ldi	r20, 0x20	; 32
    1a74:	51 e4       	ldi	r21, 0x41	; 65
    1a76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	8e 01       	movw	r16, r28
    1a80:	0d 5b       	subi	r16, 0xBD	; 189
    1a82:	1f 4f       	sbci	r17, 0xFF	; 255
    1a84:	bc 01       	movw	r22, r24
    1a86:	cd 01       	movw	r24, r26
    1a88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	f8 01       	movw	r30, r16
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	80 83       	st	Z, r24
    1a96:	1f c0       	rjmp	.+62     	; 0x1ad6 <LCD_Intialization+0x148>
    1a98:	fe 01       	movw	r30, r28
    1a9a:	ef 5b       	subi	r30, 0xBF	; 191
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	88 ec       	ldi	r24, 0xC8	; 200
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	91 83       	std	Z+1, r25	; 0x01
    1aa4:	80 83       	st	Z, r24
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	ef 5b       	subi	r30, 0xBF	; 191
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	80 81       	ld	r24, Z
    1aae:	91 81       	ldd	r25, Z+1	; 0x01
    1ab0:	01 97       	sbiw	r24, 0x01	; 1
    1ab2:	f1 f7       	brne	.-4      	; 0x1ab0 <LCD_Intialization+0x122>
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	ef 5b       	subi	r30, 0xBF	; 191
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	91 83       	std	Z+1, r25	; 0x01
    1abc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	de 01       	movw	r26, r28
    1ac0:	ad 5b       	subi	r26, 0xBD	; 189
    1ac2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ac4:	fe 01       	movw	r30, r28
    1ac6:	ed 5b       	subi	r30, 0xBD	; 189
    1ac8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aca:	80 81       	ld	r24, Z
    1acc:	91 81       	ldd	r25, Z+1	; 0x01
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	11 96       	adiw	r26, 0x01	; 1
    1ad2:	9c 93       	st	X, r25
    1ad4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	ed 5b       	subi	r30, 0xBD	; 189
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	80 81       	ld	r24, Z
    1ade:	91 81       	ldd	r25, Z+1	; 0x01
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	d1 f6       	brne	.-76     	; 0x1a98 <LCD_Intialization+0x10a>
    1ae4:	24 c0       	rjmp	.+72     	; 0x1b2e <LCD_Intialization+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae6:	8e 01       	movw	r16, r28
    1ae8:	0d 5b       	subi	r16, 0xBD	; 189
    1aea:	1f 4f       	sbci	r17, 0xFF	; 255
    1aec:	fe 01       	movw	r30, r28
    1aee:	eb 5b       	subi	r30, 0xBB	; 187
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	60 81       	ld	r22, Z
    1af4:	71 81       	ldd	r23, Z+1	; 0x01
    1af6:	82 81       	ldd	r24, Z+2	; 0x02
    1af8:	93 81       	ldd	r25, Z+3	; 0x03
    1afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	f8 01       	movw	r30, r16
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	80 83       	st	Z, r24
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ed 5b       	subi	r30, 0xBD	; 189
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	80 81       	ld	r24, Z
    1b10:	91 81       	ldd	r25, Z+1	; 0x01
    1b12:	fe 01       	movw	r30, r28
    1b14:	ff 96       	adiw	r30, 0x3f	; 63
    1b16:	91 83       	std	Z+1, r25	; 0x01
    1b18:	80 83       	st	Z, r24
    1b1a:	fe 01       	movw	r30, r28
    1b1c:	ff 96       	adiw	r30, 0x3f	; 63
    1b1e:	80 81       	ld	r24, Z
    1b20:	91 81       	ldd	r25, Z+1	; 0x01
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	f1 f7       	brne	.-4      	; 0x1b22 <LCD_Intialization+0x194>
    1b26:	fe 01       	movw	r30, r28
    1b28:	ff 96       	adiw	r30, 0x3f	; 63
    1b2a:	91 83       	std	Z+1, r25	; 0x01
    1b2c:	80 83       	st	Z, r24
	_delay_ms(40);
	LCD_write_cmd(0b00111000);
    1b2e:	88 e3       	ldi	r24, 0x38	; 56
    1b30:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <LCD_write_cmd>
    1b34:	80 e0       	ldi	r24, 0x00	; 0
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	a8 e4       	ldi	r26, 0x48	; 72
    1b3a:	b2 e4       	ldi	r27, 0x42	; 66
    1b3c:	8b af       	std	Y+59, r24	; 0x3b
    1b3e:	9c af       	std	Y+60, r25	; 0x3c
    1b40:	ad af       	std	Y+61, r26	; 0x3d
    1b42:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b44:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b46:	7c ad       	ldd	r23, Y+60	; 0x3c
    1b48:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b4a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b4c:	2b ea       	ldi	r18, 0xAB	; 171
    1b4e:	3a ea       	ldi	r19, 0xAA	; 170
    1b50:	4a e2       	ldi	r20, 0x2A	; 42
    1b52:	50 e4       	ldi	r21, 0x40	; 64
    1b54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	8f ab       	std	Y+55, r24	; 0x37
    1b5e:	98 af       	std	Y+56, r25	; 0x38
    1b60:	a9 af       	std	Y+57, r26	; 0x39
    1b62:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1b64:	6f a9       	ldd	r22, Y+55	; 0x37
    1b66:	78 ad       	ldd	r23, Y+56	; 0x38
    1b68:	89 ad       	ldd	r24, Y+57	; 0x39
    1b6a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	40 e8       	ldi	r20, 0x80	; 128
    1b72:	5f e3       	ldi	r21, 0x3F	; 63
    1b74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b78:	88 23       	and	r24, r24
    1b7a:	1c f4       	brge	.+6      	; 0x1b82 <LCD_Intialization+0x1f4>
		__ticks = 1;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	8e ab       	std	Y+54, r24	; 0x36
    1b80:	91 c0       	rjmp	.+290    	; 0x1ca4 <LCD_Intialization+0x316>
	else if (__tmp > 255)
    1b82:	6f a9       	ldd	r22, Y+55	; 0x37
    1b84:	78 ad       	ldd	r23, Y+56	; 0x38
    1b86:	89 ad       	ldd	r24, Y+57	; 0x39
    1b88:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	4f e7       	ldi	r20, 0x7F	; 127
    1b90:	53 e4       	ldi	r21, 0x43	; 67
    1b92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b96:	18 16       	cp	r1, r24
    1b98:	0c f0       	brlt	.+2      	; 0x1b9c <LCD_Intialization+0x20e>
    1b9a:	7b c0       	rjmp	.+246    	; 0x1c92 <LCD_Intialization+0x304>
	{
		_delay_ms(__us / 1000.0);
    1b9c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1b9e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ba0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ba2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	4a e7       	ldi	r20, 0x7A	; 122
    1baa:	54 e4       	ldi	r21, 0x44	; 68
    1bac:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bb0:	dc 01       	movw	r26, r24
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	8a ab       	std	Y+50, r24	; 0x32
    1bb6:	9b ab       	std	Y+51, r25	; 0x33
    1bb8:	ac ab       	std	Y+52, r26	; 0x34
    1bba:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bbc:	6a a9       	ldd	r22, Y+50	; 0x32
    1bbe:	7b a9       	ldd	r23, Y+51	; 0x33
    1bc0:	8c a9       	ldd	r24, Y+52	; 0x34
    1bc2:	9d a9       	ldd	r25, Y+53	; 0x35
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	4a ef       	ldi	r20, 0xFA	; 250
    1bca:	54 e4       	ldi	r21, 0x44	; 68
    1bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	8e a7       	std	Y+46, r24	; 0x2e
    1bd6:	9f a7       	std	Y+47, r25	; 0x2f
    1bd8:	a8 ab       	std	Y+48, r26	; 0x30
    1bda:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1bdc:	6e a5       	ldd	r22, Y+46	; 0x2e
    1bde:	7f a5       	ldd	r23, Y+47	; 0x2f
    1be0:	88 a9       	ldd	r24, Y+48	; 0x30
    1be2:	99 a9       	ldd	r25, Y+49	; 0x31
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e8       	ldi	r20, 0x80	; 128
    1bea:	5f e3       	ldi	r21, 0x3F	; 63
    1bec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bf0:	88 23       	and	r24, r24
    1bf2:	2c f4       	brge	.+10     	; 0x1bfe <LCD_Intialization+0x270>
		__ticks = 1;
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	9d a7       	std	Y+45, r25	; 0x2d
    1bfa:	8c a7       	std	Y+44, r24	; 0x2c
    1bfc:	3f c0       	rjmp	.+126    	; 0x1c7c <LCD_Intialization+0x2ee>
	else if (__tmp > 65535)
    1bfe:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c00:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c02:	88 a9       	ldd	r24, Y+48	; 0x30
    1c04:	99 a9       	ldd	r25, Y+49	; 0x31
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	3f ef       	ldi	r19, 0xFF	; 255
    1c0a:	4f e7       	ldi	r20, 0x7F	; 127
    1c0c:	57 e4       	ldi	r21, 0x47	; 71
    1c0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c12:	18 16       	cp	r1, r24
    1c14:	4c f5       	brge	.+82     	; 0x1c68 <LCD_Intialization+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c16:	6a a9       	ldd	r22, Y+50	; 0x32
    1c18:	7b a9       	ldd	r23, Y+51	; 0x33
    1c1a:	8c a9       	ldd	r24, Y+52	; 0x34
    1c1c:	9d a9       	ldd	r25, Y+53	; 0x35
    1c1e:	20 e0       	ldi	r18, 0x00	; 0
    1c20:	30 e0       	ldi	r19, 0x00	; 0
    1c22:	40 e2       	ldi	r20, 0x20	; 32
    1c24:	51 e4       	ldi	r21, 0x41	; 65
    1c26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2a:	dc 01       	movw	r26, r24
    1c2c:	cb 01       	movw	r24, r22
    1c2e:	bc 01       	movw	r22, r24
    1c30:	cd 01       	movw	r24, r26
    1c32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c36:	dc 01       	movw	r26, r24
    1c38:	cb 01       	movw	r24, r22
    1c3a:	9d a7       	std	Y+45, r25	; 0x2d
    1c3c:	8c a7       	std	Y+44, r24	; 0x2c
    1c3e:	0f c0       	rjmp	.+30     	; 0x1c5e <LCD_Intialization+0x2d0>
    1c40:	88 ec       	ldi	r24, 0xC8	; 200
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	9b a7       	std	Y+43, r25	; 0x2b
    1c46:	8a a7       	std	Y+42, r24	; 0x2a
    1c48:	8a a5       	ldd	r24, Y+42	; 0x2a
    1c4a:	9b a5       	ldd	r25, Y+43	; 0x2b
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <LCD_Intialization+0x2be>
    1c50:	9b a7       	std	Y+43, r25	; 0x2b
    1c52:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c54:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c56:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	9d a7       	std	Y+45, r25	; 0x2d
    1c5c:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c60:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	69 f7       	brne	.-38     	; 0x1c40 <LCD_Intialization+0x2b2>
    1c66:	24 c0       	rjmp	.+72     	; 0x1cb0 <LCD_Intialization+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c68:	6e a5       	ldd	r22, Y+46	; 0x2e
    1c6a:	7f a5       	ldd	r23, Y+47	; 0x2f
    1c6c:	88 a9       	ldd	r24, Y+48	; 0x30
    1c6e:	99 a9       	ldd	r25, Y+49	; 0x31
    1c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	9d a7       	std	Y+45, r25	; 0x2d
    1c7a:	8c a7       	std	Y+44, r24	; 0x2c
    1c7c:	8c a5       	ldd	r24, Y+44	; 0x2c
    1c7e:	9d a5       	ldd	r25, Y+45	; 0x2d
    1c80:	99 a7       	std	Y+41, r25	; 0x29
    1c82:	88 a7       	std	Y+40, r24	; 0x28
    1c84:	88 a5       	ldd	r24, Y+40	; 0x28
    1c86:	99 a5       	ldd	r25, Y+41	; 0x29
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <LCD_Intialization+0x2fa>
    1c8c:	99 a7       	std	Y+41, r25	; 0x29
    1c8e:	88 a7       	std	Y+40, r24	; 0x28
    1c90:	0f c0       	rjmp	.+30     	; 0x1cb0 <LCD_Intialization+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c92:	6f a9       	ldd	r22, Y+55	; 0x37
    1c94:	78 ad       	ldd	r23, Y+56	; 0x38
    1c96:	89 ad       	ldd	r24, Y+57	; 0x39
    1c98:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	8e ab       	std	Y+54, r24	; 0x36
    1ca4:	8e a9       	ldd	r24, Y+54	; 0x36
    1ca6:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1ca8:	8f a1       	ldd	r24, Y+39	; 0x27
    1caa:	8a 95       	dec	r24
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <LCD_Intialization+0x31c>
    1cae:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	LCD_write_cmd(0b00001100);
    1cb0:	8c e0       	ldi	r24, 0x0C	; 12
    1cb2:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <LCD_write_cmd>
    1cb6:	80 e0       	ldi	r24, 0x00	; 0
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	a8 e4       	ldi	r26, 0x48	; 72
    1cbc:	b2 e4       	ldi	r27, 0x42	; 66
    1cbe:	8b a3       	std	Y+35, r24	; 0x23
    1cc0:	9c a3       	std	Y+36, r25	; 0x24
    1cc2:	ad a3       	std	Y+37, r26	; 0x25
    1cc4:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cc6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cc8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cca:	8d a1       	ldd	r24, Y+37	; 0x25
    1ccc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cce:	2b ea       	ldi	r18, 0xAB	; 171
    1cd0:	3a ea       	ldi	r19, 0xAA	; 170
    1cd2:	4a e2       	ldi	r20, 0x2A	; 42
    1cd4:	50 e4       	ldi	r21, 0x40	; 64
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	8f 8f       	std	Y+31, r24	; 0x1f
    1ce0:	98 a3       	std	Y+32, r25	; 0x20
    1ce2:	a9 a3       	std	Y+33, r26	; 0x21
    1ce4:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1ce6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ce8:	78 a1       	ldd	r23, Y+32	; 0x20
    1cea:	89 a1       	ldd	r24, Y+33	; 0x21
    1cec:	9a a1       	ldd	r25, Y+34	; 0x22
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	40 e8       	ldi	r20, 0x80	; 128
    1cf4:	5f e3       	ldi	r21, 0x3F	; 63
    1cf6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cfa:	88 23       	and	r24, r24
    1cfc:	1c f4       	brge	.+6      	; 0x1d04 <LCD_Intialization+0x376>
		__ticks = 1;
    1cfe:	81 e0       	ldi	r24, 0x01	; 1
    1d00:	8e 8f       	std	Y+30, r24	; 0x1e
    1d02:	91 c0       	rjmp	.+290    	; 0x1e26 <LCD_Intialization+0x498>
	else if (__tmp > 255)
    1d04:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d06:	78 a1       	ldd	r23, Y+32	; 0x20
    1d08:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	4f e7       	ldi	r20, 0x7F	; 127
    1d12:	53 e4       	ldi	r21, 0x43	; 67
    1d14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d18:	18 16       	cp	r1, r24
    1d1a:	0c f0       	brlt	.+2      	; 0x1d1e <LCD_Intialization+0x390>
    1d1c:	7b c0       	rjmp	.+246    	; 0x1e14 <LCD_Intialization+0x486>
	{
		_delay_ms(__us / 1000.0);
    1d1e:	6b a1       	ldd	r22, Y+35	; 0x23
    1d20:	7c a1       	ldd	r23, Y+36	; 0x24
    1d22:	8d a1       	ldd	r24, Y+37	; 0x25
    1d24:	9e a1       	ldd	r25, Y+38	; 0x26
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	4a e7       	ldi	r20, 0x7A	; 122
    1d2c:	54 e4       	ldi	r21, 0x44	; 68
    1d2e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	8a 8f       	std	Y+26, r24	; 0x1a
    1d38:	9b 8f       	std	Y+27, r25	; 0x1b
    1d3a:	ac 8f       	std	Y+28, r26	; 0x1c
    1d3c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1d40:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1d42:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d44:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	4a ef       	ldi	r20, 0xFA	; 250
    1d4c:	54 e4       	ldi	r21, 0x44	; 68
    1d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d52:	dc 01       	movw	r26, r24
    1d54:	cb 01       	movw	r24, r22
    1d56:	8e 8b       	std	Y+22, r24	; 0x16
    1d58:	9f 8b       	std	Y+23, r25	; 0x17
    1d5a:	a8 8f       	std	Y+24, r26	; 0x18
    1d5c:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1d5e:	6e 89       	ldd	r22, Y+22	; 0x16
    1d60:	7f 89       	ldd	r23, Y+23	; 0x17
    1d62:	88 8d       	ldd	r24, Y+24	; 0x18
    1d64:	99 8d       	ldd	r25, Y+25	; 0x19
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	40 e8       	ldi	r20, 0x80	; 128
    1d6c:	5f e3       	ldi	r21, 0x3F	; 63
    1d6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d72:	88 23       	and	r24, r24
    1d74:	2c f4       	brge	.+10     	; 0x1d80 <LCD_Intialization+0x3f2>
		__ticks = 1;
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	9d 8b       	std	Y+21, r25	; 0x15
    1d7c:	8c 8b       	std	Y+20, r24	; 0x14
    1d7e:	3f c0       	rjmp	.+126    	; 0x1dfe <LCD_Intialization+0x470>
	else if (__tmp > 65535)
    1d80:	6e 89       	ldd	r22, Y+22	; 0x16
    1d82:	7f 89       	ldd	r23, Y+23	; 0x17
    1d84:	88 8d       	ldd	r24, Y+24	; 0x18
    1d86:	99 8d       	ldd	r25, Y+25	; 0x19
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	3f ef       	ldi	r19, 0xFF	; 255
    1d8c:	4f e7       	ldi	r20, 0x7F	; 127
    1d8e:	57 e4       	ldi	r21, 0x47	; 71
    1d90:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d94:	18 16       	cp	r1, r24
    1d96:	4c f5       	brge	.+82     	; 0x1dea <LCD_Intialization+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d98:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1d9a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1d9c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1d9e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e2       	ldi	r20, 0x20	; 32
    1da6:	51 e4       	ldi	r21, 0x41	; 65
    1da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	bc 01       	movw	r22, r24
    1db2:	cd 01       	movw	r24, r26
    1db4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	9d 8b       	std	Y+21, r25	; 0x15
    1dbe:	8c 8b       	std	Y+20, r24	; 0x14
    1dc0:	0f c0       	rjmp	.+30     	; 0x1de0 <LCD_Intialization+0x452>
    1dc2:	88 ec       	ldi	r24, 0xC8	; 200
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	9b 8b       	std	Y+19, r25	; 0x13
    1dc8:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dca:	8a 89       	ldd	r24, Y+18	; 0x12
    1dcc:	9b 89       	ldd	r25, Y+19	; 0x13
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	f1 f7       	brne	.-4      	; 0x1dce <LCD_Intialization+0x440>
    1dd2:	9b 8b       	std	Y+19, r25	; 0x13
    1dd4:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd6:	8c 89       	ldd	r24, Y+20	; 0x14
    1dd8:	9d 89       	ldd	r25, Y+21	; 0x15
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	9d 8b       	std	Y+21, r25	; 0x15
    1dde:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de0:	8c 89       	ldd	r24, Y+20	; 0x14
    1de2:	9d 89       	ldd	r25, Y+21	; 0x15
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	69 f7       	brne	.-38     	; 0x1dc2 <LCD_Intialization+0x434>
    1de8:	24 c0       	rjmp	.+72     	; 0x1e32 <LCD_Intialization+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dea:	6e 89       	ldd	r22, Y+22	; 0x16
    1dec:	7f 89       	ldd	r23, Y+23	; 0x17
    1dee:	88 8d       	ldd	r24, Y+24	; 0x18
    1df0:	99 8d       	ldd	r25, Y+25	; 0x19
    1df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1df6:	dc 01       	movw	r26, r24
    1df8:	cb 01       	movw	r24, r22
    1dfa:	9d 8b       	std	Y+21, r25	; 0x15
    1dfc:	8c 8b       	std	Y+20, r24	; 0x14
    1dfe:	8c 89       	ldd	r24, Y+20	; 0x14
    1e00:	9d 89       	ldd	r25, Y+21	; 0x15
    1e02:	99 8b       	std	Y+17, r25	; 0x11
    1e04:	88 8b       	std	Y+16, r24	; 0x10
    1e06:	88 89       	ldd	r24, Y+16	; 0x10
    1e08:	99 89       	ldd	r25, Y+17	; 0x11
    1e0a:	01 97       	sbiw	r24, 0x01	; 1
    1e0c:	f1 f7       	brne	.-4      	; 0x1e0a <LCD_Intialization+0x47c>
    1e0e:	99 8b       	std	Y+17, r25	; 0x11
    1e10:	88 8b       	std	Y+16, r24	; 0x10
    1e12:	0f c0       	rjmp	.+30     	; 0x1e32 <LCD_Intialization+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e14:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e16:	78 a1       	ldd	r23, Y+32	; 0x20
    1e18:	89 a1       	ldd	r24, Y+33	; 0x21
    1e1a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e20:	dc 01       	movw	r26, r24
    1e22:	cb 01       	movw	r24, r22
    1e24:	8e 8f       	std	Y+30, r24	; 0x1e
    1e26:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1e28:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e2a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e2c:	8a 95       	dec	r24
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <LCD_Intialization+0x49e>
    1e30:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_write_cmd(0b00000001);
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <LCD_write_cmd>
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	a0 e0       	ldi	r26, 0x00	; 0
    1e3e:	b0 e4       	ldi	r27, 0x40	; 64
    1e40:	8b 87       	std	Y+11, r24	; 0x0b
    1e42:	9c 87       	std	Y+12, r25	; 0x0c
    1e44:	ad 87       	std	Y+13, r26	; 0x0d
    1e46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	4a ef       	ldi	r20, 0xFA	; 250
    1e56:	54 e4       	ldi	r21, 0x44	; 68
    1e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	8f 83       	std	Y+7, r24	; 0x07
    1e62:	98 87       	std	Y+8, r25	; 0x08
    1e64:	a9 87       	std	Y+9, r26	; 0x09
    1e66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e8       	ldi	r20, 0x80	; 128
    1e76:	5f e3       	ldi	r21, 0x3F	; 63
    1e78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e7c:	88 23       	and	r24, r24
    1e7e:	2c f4       	brge	.+10     	; 0x1e8a <LCD_Intialization+0x4fc>
		__ticks = 1;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	9e 83       	std	Y+6, r25	; 0x06
    1e86:	8d 83       	std	Y+5, r24	; 0x05
    1e88:	3f c0       	rjmp	.+126    	; 0x1f08 <LCD_Intialization+0x57a>
	else if (__tmp > 65535)
    1e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8c:	78 85       	ldd	r23, Y+8	; 0x08
    1e8e:	89 85       	ldd	r24, Y+9	; 0x09
    1e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	3f ef       	ldi	r19, 0xFF	; 255
    1e96:	4f e7       	ldi	r20, 0x7F	; 127
    1e98:	57 e4       	ldi	r21, 0x47	; 71
    1e9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e9e:	18 16       	cp	r1, r24
    1ea0:	4c f5       	brge	.+82     	; 0x1ef4 <LCD_Intialization+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e2       	ldi	r20, 0x20	; 32
    1eb0:	51 e4       	ldi	r21, 0x41	; 65
    1eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	bc 01       	movw	r22, r24
    1ebc:	cd 01       	movw	r24, r26
    1ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
    1eca:	0f c0       	rjmp	.+30     	; 0x1eea <LCD_Intialization+0x55c>
    1ecc:	88 ec       	ldi	r24, 0xC8	; 200
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9c 83       	std	Y+4, r25	; 0x04
    1ed2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <LCD_Intialization+0x54a>
    1edc:	9c 83       	std	Y+4, r25	; 0x04
    1ede:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	9e 83       	std	Y+6, r25	; 0x06
    1ee8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eea:	8d 81       	ldd	r24, Y+5	; 0x05
    1eec:	9e 81       	ldd	r25, Y+6	; 0x06
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	69 f7       	brne	.-38     	; 0x1ecc <LCD_Intialization+0x53e>
    1ef2:	14 c0       	rjmp	.+40     	; 0x1f1c <LCD_Intialization+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef6:	78 85       	ldd	r23, Y+8	; 0x08
    1ef8:	89 85       	ldd	r24, Y+9	; 0x09
    1efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	9e 83       	std	Y+6, r25	; 0x06
    1f06:	8d 83       	std	Y+5, r24	; 0x05
    1f08:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	9a 81       	ldd	r25, Y+2	; 0x02
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <LCD_Intialization+0x586>
    1f18:	9a 83       	std	Y+2, r25	; 0x02
    1f1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1f1c:	c4 5b       	subi	r28, 0xB4	; 180
    1f1e:	df 4f       	sbci	r29, 0xFF	; 255
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	cf 91       	pop	r28
    1f2c:	df 91       	pop	r29
    1f2e:	1f 91       	pop	r17
    1f30:	0f 91       	pop	r16
    1f32:	08 95       	ret

00001f34 <LCD_WRITE_POS>:

u8 LCD_WRITE_POS(u8*Data,u8 x_pos,u8 y_pos){
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	2a 97       	sbiw	r28, 0x0a	; 10
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	9f 83       	std	Y+7, r25	; 0x07
    1f4a:	8e 83       	std	Y+6, r24	; 0x06
    1f4c:	68 87       	std	Y+8, r22	; 0x08
    1f4e:	49 87       	std	Y+9, r20	; 0x09
	u8 error_stat=0; u8 ddramadd,frist_element=*Data,shifter,j=3;
    1f50:	1d 82       	std	Y+5, r1	; 0x05
    1f52:	ee 81       	ldd	r30, Y+6	; 0x06
    1f54:	ff 81       	ldd	r31, Y+7	; 0x07
    1f56:	80 81       	ld	r24, Z
    1f58:	8b 83       	std	Y+3, r24	; 0x03
    1f5a:	83 e0       	ldi	r24, 0x03	; 3
    1f5c:	89 83       	std	Y+1, r24	; 0x01
	if ((x_pos<LCD_collom) &&( y_pos<LCD_row))
    1f5e:	88 85       	ldd	r24, Y+8	; 0x08
    1f60:	80 31       	cpi	r24, 0x10	; 16
    1f62:	98 f5       	brcc	.+102    	; 0x1fca <LCD_WRITE_POS+0x96>
    1f64:	89 85       	ldd	r24, Y+9	; 0x09
    1f66:	82 30       	cpi	r24, 0x02	; 2
    1f68:	80 f5       	brcc	.+96     	; 0x1fca <LCD_WRITE_POS+0x96>
	{
		ddramadd= (x_pos + (y_pos*64))|0b10000000;
    1f6a:	89 85       	ldd	r24, Y+9	; 0x09
    1f6c:	88 2f       	mov	r24, r24
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	00 24       	eor	r0, r0
    1f72:	96 95       	lsr	r25
    1f74:	87 95       	ror	r24
    1f76:	07 94       	ror	r0
    1f78:	96 95       	lsr	r25
    1f7a:	87 95       	ror	r24
    1f7c:	07 94       	ror	r0
    1f7e:	98 2f       	mov	r25, r24
    1f80:	80 2d       	mov	r24, r0
    1f82:	98 2f       	mov	r25, r24
    1f84:	88 85       	ldd	r24, Y+8	; 0x08
    1f86:	89 0f       	add	r24, r25
    1f88:	80 68       	ori	r24, 0x80	; 128
    1f8a:	8c 83       	std	Y+4, r24	; 0x04
		LCD_write_cmd(ddramadd);
    1f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f8e:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <LCD_write_cmd>
    1f92:	15 c0       	rjmp	.+42     	; 0x1fbe <LCD_WRITE_POS+0x8a>

		while(*Data!='\0')
		{if(ddramadd==LCD_max_collom_address)
    1f94:	8c 81       	ldd	r24, Y+4	; 0x04
    1f96:	80 39       	cpi	r24, 0x90	; 144
    1f98:	29 f4       	brne	.+10     	; 0x1fa4 <LCD_WRITE_POS+0x70>
		{
			ddramadd=LCD_frist_second_collom;
    1f9a:	80 ec       	ldi	r24, 0xC0	; 192
    1f9c:	8c 83       	std	Y+4, r24	; 0x04
			LCD_write_cmd(ddramadd);}
    1f9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa0:	0e 94 f0 0b 	call	0x17e0	; 0x17e0 <LCD_write_cmd>

		LCD_write_data(*Data);
    1fa4:	ee 81       	ldd	r30, Y+6	; 0x06
    1fa6:	ff 81       	ldd	r31, Y+7	; 0x07
    1fa8:	80 81       	ld	r24, Z
    1faa:	0e 94 02 0c 	call	0x1804	; 0x1804 <LCD_write_data>
		Data++;
    1fae:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb0:	9f 81       	ldd	r25, Y+7	; 0x07
    1fb2:	01 96       	adiw	r24, 0x01	; 1
    1fb4:	9f 83       	std	Y+7, r25	; 0x07
    1fb6:	8e 83       	std	Y+6, r24	; 0x06
		ddramadd++;
    1fb8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fba:	8f 5f       	subi	r24, 0xFF	; 255
    1fbc:	8c 83       	std	Y+4, r24	; 0x04
	if ((x_pos<LCD_collom) &&( y_pos<LCD_row))
	{
		ddramadd= (x_pos + (y_pos*64))|0b10000000;
		LCD_write_cmd(ddramadd);

		while(*Data!='\0')
    1fbe:	ee 81       	ldd	r30, Y+6	; 0x06
    1fc0:	ff 81       	ldd	r31, Y+7	; 0x07
    1fc2:	80 81       	ld	r24, Z
    1fc4:	88 23       	and	r24, r24
    1fc6:	31 f7       	brne	.-52     	; 0x1f94 <LCD_WRITE_POS+0x60>
    1fc8:	04 c0       	rjmp	.+8      	; 0x1fd2 <LCD_WRITE_POS+0x9e>

		}*/

	}else {

		error_stat=1;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	8d 83       	std	Y+5, r24	; 0x05
		return error_stat;}
    1fce:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd0:	8a 87       	std	Y+10, r24	; 0x0a


}
    1fd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fd4:	2a 96       	adiw	r28, 0x0a	; 10
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	de bf       	out	0x3e, r29	; 62
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	cd bf       	out	0x3d, r28	; 61
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	08 95       	ret

00001fe6 <LCD_WRITE_num>:



u8 LCD_WRITE_num(u32 num)//,u8 x_pos,u8 y_pos)
{u8 rem, arr[20],arr_index=0;
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	cd b7       	in	r28, 0x3d	; 61
    1fec:	de b7       	in	r29, 0x3e	; 62
    1fee:	6b 97       	sbiw	r28, 0x1b	; 27
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	6f 8b       	std	Y+23, r22	; 0x17
    1ffc:	78 8f       	std	Y+24, r23	; 0x18
    1ffe:	89 8f       	std	Y+25, r24	; 0x19
    2000:	9a 8f       	std	Y+26, r25	; 0x1a
    2002:	19 82       	std	Y+1, r1	; 0x01
	if (num==0)
    2004:	8f 89       	ldd	r24, Y+23	; 0x17
    2006:	98 8d       	ldd	r25, Y+24	; 0x18
    2008:	a9 8d       	ldd	r26, Y+25	; 0x19
    200a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    200c:	00 97       	sbiw	r24, 0x00	; 0
    200e:	a1 05       	cpc	r26, r1
    2010:	b1 05       	cpc	r27, r1
    2012:	f1 f5       	brne	.+124    	; 0x2090 <LCD_WRITE_num+0xaa>

{
	arr[arr_index]='0';
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	ce 01       	movw	r24, r28
    201c:	03 96       	adiw	r24, 0x03	; 3
    201e:	fc 01       	movw	r30, r24
    2020:	e2 0f       	add	r30, r18
    2022:	f3 1f       	adc	r31, r19
    2024:	80 e3       	ldi	r24, 0x30	; 48
    2026:	80 83       	st	Z, r24
		arr_index++;}
    2028:	89 81       	ldd	r24, Y+1	; 0x01
    202a:	8f 5f       	subi	r24, 0xFF	; 255
    202c:	89 83       	std	Y+1, r24	; 0x01
    202e:	30 c0       	rjmp	.+96     	; 0x2090 <LCD_WRITE_num+0xaa>
	while(num!=0)
	{

	rem= num%10;
    2030:	8f 89       	ldd	r24, Y+23	; 0x17
    2032:	98 8d       	ldd	r25, Y+24	; 0x18
    2034:	a9 8d       	ldd	r26, Y+25	; 0x19
    2036:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2038:	2a e0       	ldi	r18, 0x0A	; 10
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	bc 01       	movw	r22, r24
    2042:	cd 01       	movw	r24, r26
    2044:	0e 94 c6 11 	call	0x238c	; 0x238c <__udivmodsi4>
    2048:	dc 01       	movw	r26, r24
    204a:	cb 01       	movw	r24, r22
    204c:	8a 83       	std	Y+2, r24	; 0x02
	arr[arr_index]=rem+'0';//to know ascy for any char add num to ascy ((0)->48) ex know asccy num 5 -> (5+48=53)
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	28 2f       	mov	r18, r24
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	8a 81       	ldd	r24, Y+2	; 0x02
    2056:	48 2f       	mov	r20, r24
    2058:	40 5d       	subi	r20, 0xD0	; 208
    205a:	ce 01       	movw	r24, r28
    205c:	03 96       	adiw	r24, 0x03	; 3
    205e:	fc 01       	movw	r30, r24
    2060:	e2 0f       	add	r30, r18
    2062:	f3 1f       	adc	r31, r19
    2064:	40 83       	st	Z, r20
	arr_index++;
    2066:	89 81       	ldd	r24, Y+1	; 0x01
    2068:	8f 5f       	subi	r24, 0xFF	; 255
    206a:	89 83       	std	Y+1, r24	; 0x01
	num = num /10;
    206c:	8f 89       	ldd	r24, Y+23	; 0x17
    206e:	98 8d       	ldd	r25, Y+24	; 0x18
    2070:	a9 8d       	ldd	r26, Y+25	; 0x19
    2072:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2074:	2a e0       	ldi	r18, 0x0A	; 10
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	40 e0       	ldi	r20, 0x00	; 0
    207a:	50 e0       	ldi	r21, 0x00	; 0
    207c:	bc 01       	movw	r22, r24
    207e:	cd 01       	movw	r24, r26
    2080:	0e 94 c6 11 	call	0x238c	; 0x238c <__udivmodsi4>
    2084:	da 01       	movw	r26, r20
    2086:	c9 01       	movw	r24, r18
    2088:	8f 8b       	std	Y+23, r24	; 0x17
    208a:	98 8f       	std	Y+24, r25	; 0x18
    208c:	a9 8f       	std	Y+25, r26	; 0x19
    208e:	ba 8f       	std	Y+26, r27	; 0x1a
	if (num==0)

{
	arr[arr_index]='0';
		arr_index++;}
	while(num!=0)
    2090:	8f 89       	ldd	r24, Y+23	; 0x17
    2092:	98 8d       	ldd	r25, Y+24	; 0x18
    2094:	a9 8d       	ldd	r26, Y+25	; 0x19
    2096:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	a1 05       	cpc	r26, r1
    209c:	b1 05       	cpc	r27, r1
    209e:	41 f6       	brne	.-112    	; 0x2030 <LCD_WRITE_num+0x4a>
	rem= num%10;
	arr[arr_index]=rem+'0';//to know ascy for any char add num to ascy ((0)->48) ex know asccy num 5 -> (5+48=53)
	arr_index++;
	num = num /10;

	}arr[arr_index]='\0';
    20a0:	89 81       	ldd	r24, Y+1	; 0x01
    20a2:	28 2f       	mov	r18, r24
    20a4:	30 e0       	ldi	r19, 0x00	; 0
    20a6:	ce 01       	movw	r24, r28
    20a8:	03 96       	adiw	r24, 0x03	; 3
    20aa:	fc 01       	movw	r30, r24
    20ac:	e2 0f       	add	r30, r18
    20ae:	f3 1f       	adc	r31, r19
    20b0:	10 82       	st	Z, r1
	reverse(arr,arr_index);
    20b2:	ce 01       	movw	r24, r28
    20b4:	03 96       	adiw	r24, 0x03	; 3
    20b6:	69 81       	ldd	r22, Y+1	; 0x01
    20b8:	0e 94 6b 10 	call	0x20d6	; 0x20d6 <reverse>

		send_string(arr);//LCD_WRITE_POS(arr,x_pos,y_pos);
    20bc:	ce 01       	movw	r24, r28
    20be:	03 96       	adiw	r24, 0x03	; 3
    20c0:	0e 94 2f 0b 	call	0x165e	; 0x165e <send_string>



}
    20c4:	6b 96       	adiw	r28, 0x1b	; 27
    20c6:	0f b6       	in	r0, 0x3f	; 63
    20c8:	f8 94       	cli
    20ca:	de bf       	out	0x3e, r29	; 62
    20cc:	0f be       	out	0x3f, r0	; 63
    20ce:	cd bf       	out	0x3d, r28	; 61
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <reverse>:
reverse(u8 *arr,u8 length)
{
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	00 d0       	rcall	.+0      	; 0x20dc <reverse+0x6>
    20dc:	00 d0       	rcall	.+0      	; 0x20de <reverse+0x8>
    20de:	0f 92       	push	r0
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	9c 83       	std	Y+4, r25	; 0x04
    20e6:	8b 83       	std	Y+3, r24	; 0x03
    20e8:	6d 83       	std	Y+5, r22	; 0x05
u8 start=0;
    20ea:	1a 82       	std	Y+2, r1	; 0x02
u8 end=length-1;
    20ec:	8d 81       	ldd	r24, Y+5	; 0x05
    20ee:	81 50       	subi	r24, 0x01	; 1
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	19 c0       	rjmp	.+50     	; 0x2126 <reverse+0x50>
while (start<end)
{
swap(&arr[start],&arr[end]);
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	28 2f       	mov	r18, r24
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	8b 81       	ldd	r24, Y+3	; 0x03
    20fc:	9c 81       	ldd	r25, Y+4	; 0x04
    20fe:	ac 01       	movw	r20, r24
    2100:	42 0f       	add	r20, r18
    2102:	53 1f       	adc	r21, r19
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	28 0f       	add	r18, r24
    2110:	39 1f       	adc	r19, r25
    2112:	ca 01       	movw	r24, r20
    2114:	b9 01       	movw	r22, r18
    2116:	0e 94 9f 10 	call	0x213e	; 0x213e <swap>
start++;
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	8f 5f       	subi	r24, 0xFF	; 255
    211e:	8a 83       	std	Y+2, r24	; 0x02
end--;}
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	81 50       	subi	r24, 0x01	; 1
    2124:	89 83       	std	Y+1, r24	; 0x01
}
reverse(u8 *arr,u8 length)
{
u8 start=0;
u8 end=length-1;
while (start<end)
    2126:	9a 81       	ldd	r25, Y+2	; 0x02
    2128:	89 81       	ldd	r24, Y+1	; 0x01
    212a:	98 17       	cp	r25, r24
    212c:	18 f3       	brcs	.-58     	; 0x20f4 <reverse+0x1e>
{
swap(&arr[start],&arr[end]);
start++;
end--;}

}
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	08 95       	ret

0000213e <swap>:

void swap (u8 *a,u8 *b)
{
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	00 d0       	rcall	.+0      	; 0x2144 <swap+0x6>
    2144:	00 d0       	rcall	.+0      	; 0x2146 <swap+0x8>
    2146:	0f 92       	push	r0
    2148:	cd b7       	in	r28, 0x3d	; 61
    214a:	de b7       	in	r29, 0x3e	; 62
    214c:	9b 83       	std	Y+3, r25	; 0x03
    214e:	8a 83       	std	Y+2, r24	; 0x02
    2150:	7d 83       	std	Y+5, r23	; 0x05
    2152:	6c 83       	std	Y+4, r22	; 0x04
	u8 z =*a;
    2154:	ea 81       	ldd	r30, Y+2	; 0x02
    2156:	fb 81       	ldd	r31, Y+3	; 0x03
    2158:	80 81       	ld	r24, Z
    215a:	89 83       	std	Y+1, r24	; 0x01
	*a=*b;
    215c:	ec 81       	ldd	r30, Y+4	; 0x04
    215e:	fd 81       	ldd	r31, Y+5	; 0x05
    2160:	80 81       	ld	r24, Z
    2162:	ea 81       	ldd	r30, Y+2	; 0x02
    2164:	fb 81       	ldd	r31, Y+3	; 0x03
    2166:	80 83       	st	Z, r24
		*b=z;
    2168:	ec 81       	ldd	r30, Y+4	; 0x04
    216a:	fd 81       	ldd	r31, Y+5	; 0x05
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	80 83       	st	Z, r24

}
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	cf 91       	pop	r28
    217c:	df 91       	pop	r29
    217e:	08 95       	ret

00002180 <__vector_6>:
void __vector_6(void)  __attribute__((signal));


void __vector_6(void)

{
    2180:	1f 92       	push	r1
    2182:	0f 92       	push	r0
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	0f 92       	push	r0
    2188:	11 24       	eor	r1, r1
    218a:	8f 93       	push	r24
    218c:	9f 93       	push	r25
    218e:	ef 93       	push	r30
    2190:	ff 93       	push	r31
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	cd b7       	in	r28, 0x3d	; 61
    2198:	de b7       	in	r29, 0x3e	; 62
	static u8 flag=0;

	if (flag==0)
    219a:	80 91 78 00 	lds	r24, 0x0078
    219e:	88 23       	and	r24, r24
    21a0:	a1 f4       	brne	.+40     	; 0x21ca <__vector_6+0x4a>
	{

	//t_off=TCNT1L;
		t_off=ICR1L;
    21a2:	e6 e4       	ldi	r30, 0x46	; 70
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	91 81       	ldd	r25, Z+1	; 0x01
    21aa:	90 93 7c 00 	sts	0x007C, r25
    21ae:	80 93 7b 00 	sts	0x007B, r24

		TCNT1L=0;//التيمر دا الي هخليه يقرا السجنل والتيمر الزيرو الي هخليه يخرج السجنل
    21b2:	ec e4       	ldi	r30, 0x4C	; 76
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	11 82       	std	Z+1, r1	; 0x01
    21b8:	10 82       	st	Z, r1
		//MCUCR=0b00000010;//config ext intrupt falling edge
	 	TCCR1B=0b00000010;//config timer 1 prescaler 8 and ICU MODE SINCE RISING EDGE AND FALLING
    21ba:	ee e4       	ldi	r30, 0x4E	; 78
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	82 e0       	ldi	r24, 0x02	; 2
    21c0:	80 83       	st	Z, r24

		flag=1;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	80 93 78 00 	sts	0x0078, r24
    21c8:	12 c0       	rjmp	.+36     	; 0x21ee <__vector_6+0x6e>

	}
	else
	{
		//t_on=TCNT1L;//in mode icu copy from reg tcnt1l  عشان مثلا لو كان فيه انتربت شغال غير دا ف مش هعرف اخش في الانربت دا ف القرايه الي لما اجي اخش هتبقي غلط عشان اللحظه الي جيت اخش لاقيته مشغول
		t_on=ICR1L;
    21ca:	e6 e4       	ldi	r30, 0x46	; 70
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	91 81       	ldd	r25, Z+1	; 0x01
    21d2:	90 93 7a 00 	sts	0x007A, r25
    21d6:	80 93 79 00 	sts	0x0079, r24

		TCNT1L=0;
    21da:	ec e4       	ldi	r30, 0x4C	; 76
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	11 82       	std	Z+1, r1	; 0x01
    21e0:	10 82       	st	Z, r1
		//MCUCR=0b00000011;//config ext intrupt rising edge
	 	TCCR1B=0b01000010;//config timer 1 prescaler 8 and ICU MODE SINCE RISING EDGE AND FALLING
    21e2:	ee e4       	ldi	r30, 0x4E	; 78
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	82 e4       	ldi	r24, 0x42	; 66
    21e8:	80 83       	st	Z, r24

				flag=0;
    21ea:	10 92 78 00 	sts	0x0078, r1

	}


}
    21ee:	cf 91       	pop	r28
    21f0:	df 91       	pop	r29
    21f2:	ff 91       	pop	r31
    21f4:	ef 91       	pop	r30
    21f6:	9f 91       	pop	r25
    21f8:	8f 91       	pop	r24
    21fa:	0f 90       	pop	r0
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	0f 90       	pop	r0
    2200:	1f 90       	pop	r1
    2202:	18 95       	reti

00002204 <main>:




void main (void)
{u8 duty_cycle; u16 freq;
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	00 d0       	rcall	.+0      	; 0x220a <main+0x6>
    220a:	0f 92       	push	r0
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
	//u8 arr[kpd_no_keys];
	LCD_Intialization();
    2210:	0e 94 c7 0c 	call	0x198e	; 0x198e <LCD_Intialization>
	//kpd_set_init();
	DIO_set_pin_direction(Group_D,DIO_Pin_6,DIO_Input);
    2214:	83 e0       	ldi	r24, 0x03	; 3
    2216:	66 e0       	ldi	r22, 0x06	; 6
    2218:	40 e0       	ldi	r20, 0x00	; 0
    221a:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_set_pin_direction>
	DIO_set_pin_direction(Group_B,DIO_Pin_3,DIO_Output);
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	63 e0       	ldi	r22, 0x03	; 3
    2222:	41 e0       	ldi	r20, 0x01	; 1
    2224:	0e 94 cd 07 	call	0xf9a	; 0xf9a <DIO_set_pin_direction>

	TCCR0=0b01101010;//fast pwm , prescaler=8 , when compare match clear pin oc0 and set pit when top value (over flow value)
    2228:	e3 e5       	ldi	r30, 0x53	; 83
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	8a e6       	ldi	r24, 0x6A	; 106
    222e:	80 83       	st	Z, r24

	OCR0=128;//compare match value اعمل عند الفاليو دي
    2230:	ec e5       	ldi	r30, 0x5C	; 92
    2232:	f0 e0       	ldi	r31, 0x00	; 0
    2234:	80 e8       	ldi	r24, 0x80	; 128
    2236:	80 83       	st	Z, r24

	//MCUCR=0b00000011;//EXTERNAL intrupt  SENCE RISING EDGE in pin d2
	// GICR=0b01000000;//enable EXTI0 مش محتاهم في مود ال اي سي يو عشان تايمر 1 بيعرف يسنس ويعد في نفس الوقت في المود دا 1

	 	TCCR1A=0b00000000;//config timer 1 prescaler 8 and normal mode OR ICU MODE
    2238:	ef e4       	ldi	r30, 0x4F	; 79
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	10 82       	st	Z, r1
	 	//TCCR1B=0b00000010;//config timer 1 prescaler 8 and normal mode
	 	TCCR1B=0b01000010;//config timer 1 prescaler 8 and ICU MODE SINCE RISING EDGE AND FALLING
    223e:	ee e4       	ldi	r30, 0x4E	; 78
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	82 e4       	ldi	r24, 0x42	; 66
    2244:	80 83       	st	Z, r24
	   	SREG=0b10000000;//global interupt enable
    2246:	ef e5       	ldi	r30, 0x5F	; 95
    2248:	f0 e0       	ldi	r31, 0x00	; 0
    224a:	80 e8       	ldi	r24, 0x80	; 128
    224c:	80 83       	st	Z, r24
	   	TIMSK=0b00100000;//4 bit for timer 1 (bit 5 enable intrupt for mode ICU)
    224e:	e9 e5       	ldi	r30, 0x59	; 89
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 e2       	ldi	r24, 0x20	; 32
    2254:	80 83       	st	Z, r24

	   	LCD_WRITE_POS("ON=",0,0);
    2256:	80 e6       	ldi	r24, 0x60	; 96
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	60 e0       	ldi	r22, 0x00	; 0
    225c:	40 e0       	ldi	r20, 0x00	; 0
    225e:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <LCD_WRITE_POS>
	   	LCD_WRITE_POS("OFF=",7,0);
    2262:	84 e6       	ldi	r24, 0x64	; 100
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	67 e0       	ldi	r22, 0x07	; 7
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <LCD_WRITE_POS>
	   	LCD_WRITE_POS("D=",0,1);
    226e:	89 e6       	ldi	r24, 0x69	; 105
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	60 e0       	ldi	r22, 0x00	; 0
    2274:	41 e0       	ldi	r20, 0x01	; 1
    2276:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <LCD_WRITE_POS>
	   	LCD_WRITE_POS("F=",6,1);
    227a:	8c e6       	ldi	r24, 0x6C	; 108
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	66 e0       	ldi	r22, 0x06	; 6
    2280:	41 e0       	ldi	r20, 0x01	; 1
    2282:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <LCD_WRITE_POS>

while(1)
{
	duty_cycle=(t_on*100)/(t_on+t_off);//100 to get persintedg number (%) كام في الميه
    2286:	20 91 79 00 	lds	r18, 0x0079
    228a:	30 91 7a 00 	lds	r19, 0x007A
    228e:	84 e6       	ldi	r24, 0x64	; 100
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	28 9f       	mul	r18, r24
    2294:	a0 01       	movw	r20, r0
    2296:	29 9f       	mul	r18, r25
    2298:	50 0d       	add	r21, r0
    229a:	38 9f       	mul	r19, r24
    229c:	50 0d       	add	r21, r0
    229e:	11 24       	eor	r1, r1
    22a0:	20 91 79 00 	lds	r18, 0x0079
    22a4:	30 91 7a 00 	lds	r19, 0x007A
    22a8:	80 91 7b 00 	lds	r24, 0x007B
    22ac:	90 91 7c 00 	lds	r25, 0x007C
    22b0:	28 0f       	add	r18, r24
    22b2:	39 1f       	adc	r19, r25
    22b4:	ca 01       	movw	r24, r20
    22b6:	b9 01       	movw	r22, r18
    22b8:	0e 94 b2 11 	call	0x2364	; 0x2364 <__udivmodhi4>
    22bc:	cb 01       	movw	r24, r22
    22be:	8b 83       	std	Y+3, r24	; 0x03
	freq= (1*1000000)/(t_on+t_off);//1000000 التحويل من مايكرو لثانيه
    22c0:	20 91 79 00 	lds	r18, 0x0079
    22c4:	30 91 7a 00 	lds	r19, 0x007A
    22c8:	80 91 7b 00 	lds	r24, 0x007B
    22cc:	90 91 7c 00 	lds	r25, 0x007C
    22d0:	82 0f       	add	r24, r18
    22d2:	93 1f       	adc	r25, r19
    22d4:	9c 01       	movw	r18, r24
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	80 e4       	ldi	r24, 0x40	; 64
    22dc:	92 e4       	ldi	r25, 0x42	; 66
    22de:	af e0       	ldi	r26, 0x0F	; 15
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	bc 01       	movw	r22, r24
    22e4:	cd 01       	movw	r24, r26
    22e6:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__divmodsi4>
    22ea:	da 01       	movw	r26, r20
    22ec:	c9 01       	movw	r24, r18
    22ee:	9a 83       	std	Y+2, r25	; 0x02
    22f0:	89 83       	std	Y+1, r24	; 0x01
go_pos(3,0);
    22f2:	83 e0       	ldi	r24, 0x03	; 3
    22f4:	60 e0       	ldi	r22, 0x00	; 0
    22f6:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <go_pos>
	LCD_WRITE_num(t_on);
    22fa:	80 91 79 00 	lds	r24, 0x0079
    22fe:	90 91 7a 00 	lds	r25, 0x007A
    2302:	cc 01       	movw	r24, r24
    2304:	a0 e0       	ldi	r26, 0x00	; 0
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	bc 01       	movw	r22, r24
    230a:	cd 01       	movw	r24, r26
    230c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_WRITE_num>

	go_pos(12,0);
    2310:	8c e0       	ldi	r24, 0x0C	; 12
    2312:	60 e0       	ldi	r22, 0x00	; 0
    2314:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <go_pos>
		LCD_WRITE_num(t_off);
    2318:	80 91 7b 00 	lds	r24, 0x007B
    231c:	90 91 7c 00 	lds	r25, 0x007C
    2320:	cc 01       	movw	r24, r24
    2322:	a0 e0       	ldi	r26, 0x00	; 0
    2324:	b0 e0       	ldi	r27, 0x00	; 0
    2326:	bc 01       	movw	r22, r24
    2328:	cd 01       	movw	r24, r26
    232a:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_WRITE_num>
		go_pos(2,1);
    232e:	82 e0       	ldi	r24, 0x02	; 2
    2330:	61 e0       	ldi	r22, 0x01	; 1
    2332:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <go_pos>
				LCD_WRITE_num(duty_cycle);
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	a0 e0       	ldi	r26, 0x00	; 0
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	bc 01       	movw	r22, r24
    2342:	cd 01       	movw	r24, r26
    2344:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_WRITE_num>
				go_pos(8,1);
    2348:	88 e0       	ldi	r24, 0x08	; 8
    234a:	61 e0       	ldi	r22, 0x01	; 1
    234c:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <go_pos>
						LCD_WRITE_num(freq);
    2350:	89 81       	ldd	r24, Y+1	; 0x01
    2352:	9a 81       	ldd	r25, Y+2	; 0x02
    2354:	cc 01       	movw	r24, r24
    2356:	a0 e0       	ldi	r26, 0x00	; 0
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	bc 01       	movw	r22, r24
    235c:	cd 01       	movw	r24, r26
    235e:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <LCD_WRITE_num>
    2362:	91 cf       	rjmp	.-222    	; 0x2286 <main+0x82>

00002364 <__udivmodhi4>:
    2364:	aa 1b       	sub	r26, r26
    2366:	bb 1b       	sub	r27, r27
    2368:	51 e1       	ldi	r21, 0x11	; 17
    236a:	07 c0       	rjmp	.+14     	; 0x237a <__udivmodhi4_ep>

0000236c <__udivmodhi4_loop>:
    236c:	aa 1f       	adc	r26, r26
    236e:	bb 1f       	adc	r27, r27
    2370:	a6 17       	cp	r26, r22
    2372:	b7 07       	cpc	r27, r23
    2374:	10 f0       	brcs	.+4      	; 0x237a <__udivmodhi4_ep>
    2376:	a6 1b       	sub	r26, r22
    2378:	b7 0b       	sbc	r27, r23

0000237a <__udivmodhi4_ep>:
    237a:	88 1f       	adc	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	5a 95       	dec	r21
    2380:	a9 f7       	brne	.-22     	; 0x236c <__udivmodhi4_loop>
    2382:	80 95       	com	r24
    2384:	90 95       	com	r25
    2386:	bc 01       	movw	r22, r24
    2388:	cd 01       	movw	r24, r26
    238a:	08 95       	ret

0000238c <__udivmodsi4>:
    238c:	a1 e2       	ldi	r26, 0x21	; 33
    238e:	1a 2e       	mov	r1, r26
    2390:	aa 1b       	sub	r26, r26
    2392:	bb 1b       	sub	r27, r27
    2394:	fd 01       	movw	r30, r26
    2396:	0d c0       	rjmp	.+26     	; 0x23b2 <__udivmodsi4_ep>

00002398 <__udivmodsi4_loop>:
    2398:	aa 1f       	adc	r26, r26
    239a:	bb 1f       	adc	r27, r27
    239c:	ee 1f       	adc	r30, r30
    239e:	ff 1f       	adc	r31, r31
    23a0:	a2 17       	cp	r26, r18
    23a2:	b3 07       	cpc	r27, r19
    23a4:	e4 07       	cpc	r30, r20
    23a6:	f5 07       	cpc	r31, r21
    23a8:	20 f0       	brcs	.+8      	; 0x23b2 <__udivmodsi4_ep>
    23aa:	a2 1b       	sub	r26, r18
    23ac:	b3 0b       	sbc	r27, r19
    23ae:	e4 0b       	sbc	r30, r20
    23b0:	f5 0b       	sbc	r31, r21

000023b2 <__udivmodsi4_ep>:
    23b2:	66 1f       	adc	r22, r22
    23b4:	77 1f       	adc	r23, r23
    23b6:	88 1f       	adc	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	1a 94       	dec	r1
    23bc:	69 f7       	brne	.-38     	; 0x2398 <__udivmodsi4_loop>
    23be:	60 95       	com	r22
    23c0:	70 95       	com	r23
    23c2:	80 95       	com	r24
    23c4:	90 95       	com	r25
    23c6:	9b 01       	movw	r18, r22
    23c8:	ac 01       	movw	r20, r24
    23ca:	bd 01       	movw	r22, r26
    23cc:	cf 01       	movw	r24, r30
    23ce:	08 95       	ret

000023d0 <__divmodsi4>:
    23d0:	97 fb       	bst	r25, 7
    23d2:	09 2e       	mov	r0, r25
    23d4:	05 26       	eor	r0, r21
    23d6:	0e d0       	rcall	.+28     	; 0x23f4 <__divmodsi4_neg1>
    23d8:	57 fd       	sbrc	r21, 7
    23da:	04 d0       	rcall	.+8      	; 0x23e4 <__divmodsi4_neg2>
    23dc:	d7 df       	rcall	.-82     	; 0x238c <__udivmodsi4>
    23de:	0a d0       	rcall	.+20     	; 0x23f4 <__divmodsi4_neg1>
    23e0:	00 1c       	adc	r0, r0
    23e2:	38 f4       	brcc	.+14     	; 0x23f2 <__divmodsi4_exit>

000023e4 <__divmodsi4_neg2>:
    23e4:	50 95       	com	r21
    23e6:	40 95       	com	r20
    23e8:	30 95       	com	r19
    23ea:	21 95       	neg	r18
    23ec:	3f 4f       	sbci	r19, 0xFF	; 255
    23ee:	4f 4f       	sbci	r20, 0xFF	; 255
    23f0:	5f 4f       	sbci	r21, 0xFF	; 255

000023f2 <__divmodsi4_exit>:
    23f2:	08 95       	ret

000023f4 <__divmodsi4_neg1>:
    23f4:	f6 f7       	brtc	.-4      	; 0x23f2 <__divmodsi4_exit>
    23f6:	90 95       	com	r25
    23f8:	80 95       	com	r24
    23fa:	70 95       	com	r23
    23fc:	61 95       	neg	r22
    23fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2400:	8f 4f       	sbci	r24, 0xFF	; 255
    2402:	9f 4f       	sbci	r25, 0xFF	; 255
    2404:	08 95       	ret

00002406 <__prologue_saves__>:
    2406:	2f 92       	push	r2
    2408:	3f 92       	push	r3
    240a:	4f 92       	push	r4
    240c:	5f 92       	push	r5
    240e:	6f 92       	push	r6
    2410:	7f 92       	push	r7
    2412:	8f 92       	push	r8
    2414:	9f 92       	push	r9
    2416:	af 92       	push	r10
    2418:	bf 92       	push	r11
    241a:	cf 92       	push	r12
    241c:	df 92       	push	r13
    241e:	ef 92       	push	r14
    2420:	ff 92       	push	r15
    2422:	0f 93       	push	r16
    2424:	1f 93       	push	r17
    2426:	cf 93       	push	r28
    2428:	df 93       	push	r29
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	ca 1b       	sub	r28, r26
    2430:	db 0b       	sbc	r29, r27
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	de bf       	out	0x3e, r29	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	cd bf       	out	0x3d, r28	; 61
    243c:	09 94       	ijmp

0000243e <__epilogue_restores__>:
    243e:	2a 88       	ldd	r2, Y+18	; 0x12
    2440:	39 88       	ldd	r3, Y+17	; 0x11
    2442:	48 88       	ldd	r4, Y+16	; 0x10
    2444:	5f 84       	ldd	r5, Y+15	; 0x0f
    2446:	6e 84       	ldd	r6, Y+14	; 0x0e
    2448:	7d 84       	ldd	r7, Y+13	; 0x0d
    244a:	8c 84       	ldd	r8, Y+12	; 0x0c
    244c:	9b 84       	ldd	r9, Y+11	; 0x0b
    244e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2450:	b9 84       	ldd	r11, Y+9	; 0x09
    2452:	c8 84       	ldd	r12, Y+8	; 0x08
    2454:	df 80       	ldd	r13, Y+7	; 0x07
    2456:	ee 80       	ldd	r14, Y+6	; 0x06
    2458:	fd 80       	ldd	r15, Y+5	; 0x05
    245a:	0c 81       	ldd	r16, Y+4	; 0x04
    245c:	1b 81       	ldd	r17, Y+3	; 0x03
    245e:	aa 81       	ldd	r26, Y+2	; 0x02
    2460:	b9 81       	ldd	r27, Y+1	; 0x01
    2462:	ce 0f       	add	r28, r30
    2464:	d1 1d       	adc	r29, r1
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	de bf       	out	0x3e, r29	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	cd bf       	out	0x3d, r28	; 61
    2470:	ed 01       	movw	r28, r26
    2472:	08 95       	ret

00002474 <_exit>:
    2474:	f8 94       	cli

00002476 <__stop_program>:
    2476:	ff cf       	rjmp	.-2      	; 0x2476 <__stop_program>
