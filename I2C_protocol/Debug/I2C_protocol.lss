
I2C_protocol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  000024d0  00002544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001de8  00000000  00000000  00002554  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000d76  00000000  00000000  0000433c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  000050b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000018f  00000000  00000000  00005212  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002045  00000000  00000000  000053a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001101  00000000  00000000  000073e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f82  00000000  00000000  000084e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000946c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c2  00000000  00000000  000095ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088e  00000000  00000000  000098ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a13c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 37       	cpi	r26, 0x70	; 112
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 18 11 	call	0x2230	; 0x2230 <main>
      7a:	0c 94 66 12 	jmp	0x24cc	; 0x24cc <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a7 e6       	ldi	r26, 0x67	; 103
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 2f 12 	jmp	0x245e	; 0x245e <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	87 e6       	ldi	r24, 0x67	; 103
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 4b 12 	jmp	0x2496	; 0x2496 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 37 12 	jmp	0x246e	; 0x246e <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	67 e6       	ldi	r22, 0x67	; 103
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 a1 04 	call	0x942	; 0x942 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 3b 12 	jmp	0x2476	; 0x2476 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 57 12 	jmp	0x24ae	; 0x24ae <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 3f 12 	jmp	0x247e	; 0x247e <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 76 05 	call	0xaec	; 0xaec <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <__epilogue_restores__+0x20>

00000942 <__pack_f>:
     942:	df 92       	push	r13
     944:	ef 92       	push	r14
     946:	ff 92       	push	r15
     948:	0f 93       	push	r16
     94a:	1f 93       	push	r17
     94c:	fc 01       	movw	r30, r24
     94e:	e4 80       	ldd	r14, Z+4	; 0x04
     950:	f5 80       	ldd	r15, Z+5	; 0x05
     952:	06 81       	ldd	r16, Z+6	; 0x06
     954:	17 81       	ldd	r17, Z+7	; 0x07
     956:	d1 80       	ldd	r13, Z+1	; 0x01
     958:	80 81       	ld	r24, Z
     95a:	82 30       	cpi	r24, 0x02	; 2
     95c:	48 f4       	brcc	.+18     	; 0x970 <__pack_f+0x2e>
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	a0 e1       	ldi	r26, 0x10	; 16
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	e8 2a       	or	r14, r24
     968:	f9 2a       	or	r15, r25
     96a:	0a 2b       	or	r16, r26
     96c:	1b 2b       	or	r17, r27
     96e:	a5 c0       	rjmp	.+330    	; 0xaba <__pack_f+0x178>
     970:	84 30       	cpi	r24, 0x04	; 4
     972:	09 f4       	brne	.+2      	; 0x976 <__pack_f+0x34>
     974:	9f c0       	rjmp	.+318    	; 0xab4 <__pack_f+0x172>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	21 f4       	brne	.+8      	; 0x982 <__pack_f+0x40>
     97a:	ee 24       	eor	r14, r14
     97c:	ff 24       	eor	r15, r15
     97e:	87 01       	movw	r16, r14
     980:	05 c0       	rjmp	.+10     	; 0x98c <__pack_f+0x4a>
     982:	e1 14       	cp	r14, r1
     984:	f1 04       	cpc	r15, r1
     986:	01 05       	cpc	r16, r1
     988:	11 05       	cpc	r17, r1
     98a:	19 f4       	brne	.+6      	; 0x992 <__pack_f+0x50>
     98c:	e0 e0       	ldi	r30, 0x00	; 0
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	96 c0       	rjmp	.+300    	; 0xabe <__pack_f+0x17c>
     992:	62 81       	ldd	r22, Z+2	; 0x02
     994:	73 81       	ldd	r23, Z+3	; 0x03
     996:	9f ef       	ldi	r25, 0xFF	; 255
     998:	62 38       	cpi	r22, 0x82	; 130
     99a:	79 07       	cpc	r23, r25
     99c:	0c f0       	brlt	.+2      	; 0x9a0 <__pack_f+0x5e>
     99e:	5b c0       	rjmp	.+182    	; 0xa56 <__pack_f+0x114>
     9a0:	22 e8       	ldi	r18, 0x82	; 130
     9a2:	3f ef       	ldi	r19, 0xFF	; 255
     9a4:	26 1b       	sub	r18, r22
     9a6:	37 0b       	sbc	r19, r23
     9a8:	2a 31       	cpi	r18, 0x1A	; 26
     9aa:	31 05       	cpc	r19, r1
     9ac:	2c f0       	brlt	.+10     	; 0x9b8 <__pack_f+0x76>
     9ae:	20 e0       	ldi	r18, 0x00	; 0
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	40 e0       	ldi	r20, 0x00	; 0
     9b4:	50 e0       	ldi	r21, 0x00	; 0
     9b6:	2a c0       	rjmp	.+84     	; 0xa0c <__pack_f+0xca>
     9b8:	b8 01       	movw	r22, r16
     9ba:	a7 01       	movw	r20, r14
     9bc:	02 2e       	mov	r0, r18
     9be:	04 c0       	rjmp	.+8      	; 0x9c8 <__pack_f+0x86>
     9c0:	76 95       	lsr	r23
     9c2:	67 95       	ror	r22
     9c4:	57 95       	ror	r21
     9c6:	47 95       	ror	r20
     9c8:	0a 94       	dec	r0
     9ca:	d2 f7       	brpl	.-12     	; 0x9c0 <__pack_f+0x7e>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	a0 e0       	ldi	r26, 0x00	; 0
     9d2:	b0 e0       	ldi	r27, 0x00	; 0
     9d4:	04 c0       	rjmp	.+8      	; 0x9de <__pack_f+0x9c>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	aa 1f       	adc	r26, r26
     9dc:	bb 1f       	adc	r27, r27
     9de:	2a 95       	dec	r18
     9e0:	d2 f7       	brpl	.-12     	; 0x9d6 <__pack_f+0x94>
     9e2:	01 97       	sbiw	r24, 0x01	; 1
     9e4:	a1 09       	sbc	r26, r1
     9e6:	b1 09       	sbc	r27, r1
     9e8:	8e 21       	and	r24, r14
     9ea:	9f 21       	and	r25, r15
     9ec:	a0 23       	and	r26, r16
     9ee:	b1 23       	and	r27, r17
     9f0:	00 97       	sbiw	r24, 0x00	; 0
     9f2:	a1 05       	cpc	r26, r1
     9f4:	b1 05       	cpc	r27, r1
     9f6:	21 f0       	breq	.+8      	; 0xa00 <__pack_f+0xbe>
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	a0 e0       	ldi	r26, 0x00	; 0
     9fe:	b0 e0       	ldi	r27, 0x00	; 0
     a00:	9a 01       	movw	r18, r20
     a02:	ab 01       	movw	r20, r22
     a04:	28 2b       	or	r18, r24
     a06:	39 2b       	or	r19, r25
     a08:	4a 2b       	or	r20, r26
     a0a:	5b 2b       	or	r21, r27
     a0c:	da 01       	movw	r26, r20
     a0e:	c9 01       	movw	r24, r18
     a10:	8f 77       	andi	r24, 0x7F	; 127
     a12:	90 70       	andi	r25, 0x00	; 0
     a14:	a0 70       	andi	r26, 0x00	; 0
     a16:	b0 70       	andi	r27, 0x00	; 0
     a18:	80 34       	cpi	r24, 0x40	; 64
     a1a:	91 05       	cpc	r25, r1
     a1c:	a1 05       	cpc	r26, r1
     a1e:	b1 05       	cpc	r27, r1
     a20:	39 f4       	brne	.+14     	; 0xa30 <__pack_f+0xee>
     a22:	27 ff       	sbrs	r18, 7
     a24:	09 c0       	rjmp	.+18     	; 0xa38 <__pack_f+0xf6>
     a26:	20 5c       	subi	r18, 0xC0	; 192
     a28:	3f 4f       	sbci	r19, 0xFF	; 255
     a2a:	4f 4f       	sbci	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0xf6>
     a30:	21 5c       	subi	r18, 0xC1	; 193
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	4f 4f       	sbci	r20, 0xFF	; 255
     a36:	5f 4f       	sbci	r21, 0xFF	; 255
     a38:	e0 e0       	ldi	r30, 0x00	; 0
     a3a:	f0 e0       	ldi	r31, 0x00	; 0
     a3c:	20 30       	cpi	r18, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	3a 07       	cpc	r19, r26
     a42:	a0 e0       	ldi	r26, 0x00	; 0
     a44:	4a 07       	cpc	r20, r26
     a46:	a0 e4       	ldi	r26, 0x40	; 64
     a48:	5a 07       	cpc	r21, r26
     a4a:	10 f0       	brcs	.+4      	; 0xa50 <__pack_f+0x10e>
     a4c:	e1 e0       	ldi	r30, 0x01	; 1
     a4e:	f0 e0       	ldi	r31, 0x00	; 0
     a50:	79 01       	movw	r14, r18
     a52:	8a 01       	movw	r16, r20
     a54:	27 c0       	rjmp	.+78     	; 0xaa4 <__pack_f+0x162>
     a56:	60 38       	cpi	r22, 0x80	; 128
     a58:	71 05       	cpc	r23, r1
     a5a:	64 f5       	brge	.+88     	; 0xab4 <__pack_f+0x172>
     a5c:	fb 01       	movw	r30, r22
     a5e:	e1 58       	subi	r30, 0x81	; 129
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	d8 01       	movw	r26, r16
     a64:	c7 01       	movw	r24, r14
     a66:	8f 77       	andi	r24, 0x7F	; 127
     a68:	90 70       	andi	r25, 0x00	; 0
     a6a:	a0 70       	andi	r26, 0x00	; 0
     a6c:	b0 70       	andi	r27, 0x00	; 0
     a6e:	80 34       	cpi	r24, 0x40	; 64
     a70:	91 05       	cpc	r25, r1
     a72:	a1 05       	cpc	r26, r1
     a74:	b1 05       	cpc	r27, r1
     a76:	39 f4       	brne	.+14     	; 0xa86 <__pack_f+0x144>
     a78:	e7 fe       	sbrs	r14, 7
     a7a:	0d c0       	rjmp	.+26     	; 0xa96 <__pack_f+0x154>
     a7c:	80 e4       	ldi	r24, 0x40	; 64
     a7e:	90 e0       	ldi	r25, 0x00	; 0
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	04 c0       	rjmp	.+8      	; 0xa8e <__pack_f+0x14c>
     a86:	8f e3       	ldi	r24, 0x3F	; 63
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	e8 0e       	add	r14, r24
     a90:	f9 1e       	adc	r15, r25
     a92:	0a 1f       	adc	r16, r26
     a94:	1b 1f       	adc	r17, r27
     a96:	17 ff       	sbrs	r17, 7
     a98:	05 c0       	rjmp	.+10     	; 0xaa4 <__pack_f+0x162>
     a9a:	16 95       	lsr	r17
     a9c:	07 95       	ror	r16
     a9e:	f7 94       	ror	r15
     aa0:	e7 94       	ror	r14
     aa2:	31 96       	adiw	r30, 0x01	; 1
     aa4:	87 e0       	ldi	r24, 0x07	; 7
     aa6:	16 95       	lsr	r17
     aa8:	07 95       	ror	r16
     aaa:	f7 94       	ror	r15
     aac:	e7 94       	ror	r14
     aae:	8a 95       	dec	r24
     ab0:	d1 f7       	brne	.-12     	; 0xaa6 <__pack_f+0x164>
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <__pack_f+0x17c>
     ab4:	ee 24       	eor	r14, r14
     ab6:	ff 24       	eor	r15, r15
     ab8:	87 01       	movw	r16, r14
     aba:	ef ef       	ldi	r30, 0xFF	; 255
     abc:	f0 e0       	ldi	r31, 0x00	; 0
     abe:	6e 2f       	mov	r22, r30
     ac0:	67 95       	ror	r22
     ac2:	66 27       	eor	r22, r22
     ac4:	67 95       	ror	r22
     ac6:	90 2f       	mov	r25, r16
     ac8:	9f 77       	andi	r25, 0x7F	; 127
     aca:	d7 94       	ror	r13
     acc:	dd 24       	eor	r13, r13
     ace:	d7 94       	ror	r13
     ad0:	8e 2f       	mov	r24, r30
     ad2:	86 95       	lsr	r24
     ad4:	49 2f       	mov	r20, r25
     ad6:	46 2b       	or	r20, r22
     ad8:	58 2f       	mov	r21, r24
     ada:	5d 29       	or	r21, r13
     adc:	b7 01       	movw	r22, r14
     ade:	ca 01       	movw	r24, r20
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	08 95       	ret

00000aec <__unpack_f>:
     aec:	fc 01       	movw	r30, r24
     aee:	db 01       	movw	r26, r22
     af0:	40 81       	ld	r20, Z
     af2:	51 81       	ldd	r21, Z+1	; 0x01
     af4:	22 81       	ldd	r18, Z+2	; 0x02
     af6:	62 2f       	mov	r22, r18
     af8:	6f 77       	andi	r22, 0x7F	; 127
     afa:	70 e0       	ldi	r23, 0x00	; 0
     afc:	22 1f       	adc	r18, r18
     afe:	22 27       	eor	r18, r18
     b00:	22 1f       	adc	r18, r18
     b02:	93 81       	ldd	r25, Z+3	; 0x03
     b04:	89 2f       	mov	r24, r25
     b06:	88 0f       	add	r24, r24
     b08:	82 2b       	or	r24, r18
     b0a:	28 2f       	mov	r18, r24
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	99 1f       	adc	r25, r25
     b10:	99 27       	eor	r25, r25
     b12:	99 1f       	adc	r25, r25
     b14:	11 96       	adiw	r26, 0x01	; 1
     b16:	9c 93       	st	X, r25
     b18:	11 97       	sbiw	r26, 0x01	; 1
     b1a:	21 15       	cp	r18, r1
     b1c:	31 05       	cpc	r19, r1
     b1e:	a9 f5       	brne	.+106    	; 0xb8a <__unpack_f+0x9e>
     b20:	41 15       	cp	r20, r1
     b22:	51 05       	cpc	r21, r1
     b24:	61 05       	cpc	r22, r1
     b26:	71 05       	cpc	r23, r1
     b28:	11 f4       	brne	.+4      	; 0xb2e <__unpack_f+0x42>
     b2a:	82 e0       	ldi	r24, 0x02	; 2
     b2c:	37 c0       	rjmp	.+110    	; 0xb9c <__unpack_f+0xb0>
     b2e:	82 e8       	ldi	r24, 0x82	; 130
     b30:	9f ef       	ldi	r25, 0xFF	; 255
     b32:	13 96       	adiw	r26, 0x03	; 3
     b34:	9c 93       	st	X, r25
     b36:	8e 93       	st	-X, r24
     b38:	12 97       	sbiw	r26, 0x02	; 2
     b3a:	9a 01       	movw	r18, r20
     b3c:	ab 01       	movw	r20, r22
     b3e:	67 e0       	ldi	r22, 0x07	; 7
     b40:	22 0f       	add	r18, r18
     b42:	33 1f       	adc	r19, r19
     b44:	44 1f       	adc	r20, r20
     b46:	55 1f       	adc	r21, r21
     b48:	6a 95       	dec	r22
     b4a:	d1 f7       	brne	.-12     	; 0xb40 <__unpack_f+0x54>
     b4c:	83 e0       	ldi	r24, 0x03	; 3
     b4e:	8c 93       	st	X, r24
     b50:	0d c0       	rjmp	.+26     	; 0xb6c <__unpack_f+0x80>
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	12 96       	adiw	r26, 0x02	; 2
     b5c:	8d 91       	ld	r24, X+
     b5e:	9c 91       	ld	r25, X
     b60:	13 97       	sbiw	r26, 0x03	; 3
     b62:	01 97       	sbiw	r24, 0x01	; 1
     b64:	13 96       	adiw	r26, 0x03	; 3
     b66:	9c 93       	st	X, r25
     b68:	8e 93       	st	-X, r24
     b6a:	12 97       	sbiw	r26, 0x02	; 2
     b6c:	20 30       	cpi	r18, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	38 07       	cpc	r19, r24
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	48 07       	cpc	r20, r24
     b76:	80 e4       	ldi	r24, 0x40	; 64
     b78:	58 07       	cpc	r21, r24
     b7a:	58 f3       	brcs	.-42     	; 0xb52 <__unpack_f+0x66>
     b7c:	14 96       	adiw	r26, 0x04	; 4
     b7e:	2d 93       	st	X+, r18
     b80:	3d 93       	st	X+, r19
     b82:	4d 93       	st	X+, r20
     b84:	5c 93       	st	X, r21
     b86:	17 97       	sbiw	r26, 0x07	; 7
     b88:	08 95       	ret
     b8a:	2f 3f       	cpi	r18, 0xFF	; 255
     b8c:	31 05       	cpc	r19, r1
     b8e:	79 f4       	brne	.+30     	; 0xbae <__unpack_f+0xc2>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	19 f4       	brne	.+6      	; 0xba0 <__unpack_f+0xb4>
     b9a:	84 e0       	ldi	r24, 0x04	; 4
     b9c:	8c 93       	st	X, r24
     b9e:	08 95       	ret
     ba0:	64 ff       	sbrs	r22, 4
     ba2:	03 c0       	rjmp	.+6      	; 0xbaa <__unpack_f+0xbe>
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	8c 93       	st	X, r24
     ba8:	12 c0       	rjmp	.+36     	; 0xbce <__unpack_f+0xe2>
     baa:	1c 92       	st	X, r1
     bac:	10 c0       	rjmp	.+32     	; 0xbce <__unpack_f+0xe2>
     bae:	2f 57       	subi	r18, 0x7F	; 127
     bb0:	30 40       	sbci	r19, 0x00	; 0
     bb2:	13 96       	adiw	r26, 0x03	; 3
     bb4:	3c 93       	st	X, r19
     bb6:	2e 93       	st	-X, r18
     bb8:	12 97       	sbiw	r26, 0x02	; 2
     bba:	83 e0       	ldi	r24, 0x03	; 3
     bbc:	8c 93       	st	X, r24
     bbe:	87 e0       	ldi	r24, 0x07	; 7
     bc0:	44 0f       	add	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	66 1f       	adc	r22, r22
     bc6:	77 1f       	adc	r23, r23
     bc8:	8a 95       	dec	r24
     bca:	d1 f7       	brne	.-12     	; 0xbc0 <__unpack_f+0xd4>
     bcc:	70 64       	ori	r23, 0x40	; 64
     bce:	14 96       	adiw	r26, 0x04	; 4
     bd0:	4d 93       	st	X+, r20
     bd2:	5d 93       	st	X+, r21
     bd4:	6d 93       	st	X+, r22
     bd6:	7c 93       	st	X, r23
     bd8:	17 97       	sbiw	r26, 0x07	; 7
     bda:	08 95       	ret

00000bdc <__fpcmp_parts_f>:
     bdc:	1f 93       	push	r17
     bde:	dc 01       	movw	r26, r24
     be0:	fb 01       	movw	r30, r22
     be2:	9c 91       	ld	r25, X
     be4:	92 30       	cpi	r25, 0x02	; 2
     be6:	08 f4       	brcc	.+2      	; 0xbea <__fpcmp_parts_f+0xe>
     be8:	47 c0       	rjmp	.+142    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bea:	80 81       	ld	r24, Z
     bec:	82 30       	cpi	r24, 0x02	; 2
     bee:	08 f4       	brcc	.+2      	; 0xbf2 <__fpcmp_parts_f+0x16>
     bf0:	43 c0       	rjmp	.+134    	; 0xc78 <__fpcmp_parts_f+0x9c>
     bf2:	94 30       	cpi	r25, 0x04	; 4
     bf4:	51 f4       	brne	.+20     	; 0xc0a <__fpcmp_parts_f+0x2e>
     bf6:	11 96       	adiw	r26, 0x01	; 1
     bf8:	1c 91       	ld	r17, X
     bfa:	84 30       	cpi	r24, 0x04	; 4
     bfc:	99 f5       	brne	.+102    	; 0xc64 <__fpcmp_parts_f+0x88>
     bfe:	81 81       	ldd	r24, Z+1	; 0x01
     c00:	68 2f       	mov	r22, r24
     c02:	70 e0       	ldi	r23, 0x00	; 0
     c04:	61 1b       	sub	r22, r17
     c06:	71 09       	sbc	r23, r1
     c08:	3f c0       	rjmp	.+126    	; 0xc88 <__fpcmp_parts_f+0xac>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	21 f0       	breq	.+8      	; 0xc16 <__fpcmp_parts_f+0x3a>
     c0e:	92 30       	cpi	r25, 0x02	; 2
     c10:	31 f4       	brne	.+12     	; 0xc1e <__fpcmp_parts_f+0x42>
     c12:	82 30       	cpi	r24, 0x02	; 2
     c14:	b9 f1       	breq	.+110    	; 0xc84 <__fpcmp_parts_f+0xa8>
     c16:	81 81       	ldd	r24, Z+1	; 0x01
     c18:	88 23       	and	r24, r24
     c1a:	89 f1       	breq	.+98     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c1c:	2d c0       	rjmp	.+90     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c1e:	11 96       	adiw	r26, 0x01	; 1
     c20:	1c 91       	ld	r17, X
     c22:	11 97       	sbiw	r26, 0x01	; 1
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	f1 f0       	breq	.+60     	; 0xc64 <__fpcmp_parts_f+0x88>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	18 17       	cp	r17, r24
     c2c:	d9 f4       	brne	.+54     	; 0xc64 <__fpcmp_parts_f+0x88>
     c2e:	12 96       	adiw	r26, 0x02	; 2
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	13 97       	sbiw	r26, 0x03	; 3
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	82 17       	cp	r24, r18
     c3c:	93 07       	cpc	r25, r19
     c3e:	94 f0       	brlt	.+36     	; 0xc64 <__fpcmp_parts_f+0x88>
     c40:	28 17       	cp	r18, r24
     c42:	39 07       	cpc	r19, r25
     c44:	bc f0       	brlt	.+46     	; 0xc74 <__fpcmp_parts_f+0x98>
     c46:	14 96       	adiw	r26, 0x04	; 4
     c48:	8d 91       	ld	r24, X+
     c4a:	9d 91       	ld	r25, X+
     c4c:	0d 90       	ld	r0, X+
     c4e:	bc 91       	ld	r27, X
     c50:	a0 2d       	mov	r26, r0
     c52:	24 81       	ldd	r18, Z+4	; 0x04
     c54:	35 81       	ldd	r19, Z+5	; 0x05
     c56:	46 81       	ldd	r20, Z+6	; 0x06
     c58:	57 81       	ldd	r21, Z+7	; 0x07
     c5a:	28 17       	cp	r18, r24
     c5c:	39 07       	cpc	r19, r25
     c5e:	4a 07       	cpc	r20, r26
     c60:	5b 07       	cpc	r21, r27
     c62:	18 f4       	brcc	.+6      	; 0xc6a <__fpcmp_parts_f+0x8e>
     c64:	11 23       	and	r17, r17
     c66:	41 f0       	breq	.+16     	; 0xc78 <__fpcmp_parts_f+0x9c>
     c68:	0a c0       	rjmp	.+20     	; 0xc7e <__fpcmp_parts_f+0xa2>
     c6a:	82 17       	cp	r24, r18
     c6c:	93 07       	cpc	r25, r19
     c6e:	a4 07       	cpc	r26, r20
     c70:	b5 07       	cpc	r27, r21
     c72:	40 f4       	brcc	.+16     	; 0xc84 <__fpcmp_parts_f+0xa8>
     c74:	11 23       	and	r17, r17
     c76:	19 f0       	breq	.+6      	; 0xc7e <__fpcmp_parts_f+0xa2>
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	05 c0       	rjmp	.+10     	; 0xc88 <__fpcmp_parts_f+0xac>
     c7e:	6f ef       	ldi	r22, 0xFF	; 255
     c80:	7f ef       	ldi	r23, 0xFF	; 255
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <__fpcmp_parts_f+0xac>
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	70 e0       	ldi	r23, 0x00	; 0
     c88:	cb 01       	movw	r24, r22
     c8a:	1f 91       	pop	r17
     c8c:	08 95       	ret

00000c8e <DIO_set_pin_value>:
#include"STD_TYPES.h"
#include "DIO_Configuration.h"
#include "DIO_Private.h"
#include "DIO_Interface.h"

u8 DIO_set_pin_value(u8 Port_no,u8 Pin_no,u8 Pin_value){
     c8e:	df 93       	push	r29
     c90:	cf 93       	push	r28
     c92:	00 d0       	rcall	.+0      	; 0xc94 <DIO_set_pin_value+0x6>
     c94:	00 d0       	rcall	.+0      	; 0xc96 <DIO_set_pin_value+0x8>
     c96:	00 d0       	rcall	.+0      	; 0xc98 <DIO_set_pin_value+0xa>
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	8a 83       	std	Y+2, r24	; 0x02
     c9e:	6b 83       	std	Y+3, r22	; 0x03
     ca0:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_state=0;
     ca2:	19 82       	std	Y+1, r1	; 0x01
	if(Port_no>=DIO_max_port_no){
     ca4:	8a 81       	ldd	r24, Y+2	; 0x02
     ca6:	84 30       	cpi	r24, 0x04	; 4
     ca8:	18 f0       	brcs	.+6      	; 0xcb0 <DIO_set_pin_value+0x22>
		Error_state=1;
     caa:	81 e0       	ldi	r24, 0x01	; 1
     cac:	89 83       	std	Y+1, r24	; 0x01
     cae:	e0 c0       	rjmp	.+448    	; 0xe70 <DIO_set_pin_value+0x1e2>
	}else if(Pin_no>=DIO_max_pin_no){
     cb0:	8b 81       	ldd	r24, Y+3	; 0x03
     cb2:	88 30       	cpi	r24, 0x08	; 8
     cb4:	18 f0       	brcs	.+6      	; 0xcbc <DIO_set_pin_value+0x2e>
		Error_state=2;
     cb6:	82 e0       	ldi	r24, 0x02	; 2
     cb8:	89 83       	std	Y+1, r24	; 0x01
     cba:	da c0       	rjmp	.+436    	; 0xe70 <DIO_set_pin_value+0x1e2>
	}else if((Pin_value!=DIO_Low)&&(Pin_value!=DIO_High)){
     cbc:	8c 81       	ldd	r24, Y+4	; 0x04
     cbe:	88 23       	and	r24, r24
     cc0:	31 f0       	breq	.+12     	; 0xcce <DIO_set_pin_value+0x40>
     cc2:	8c 81       	ldd	r24, Y+4	; 0x04
     cc4:	81 30       	cpi	r24, 0x01	; 1
     cc6:	19 f0       	breq	.+6      	; 0xcce <DIO_set_pin_value+0x40>
		Error_state=3;
     cc8:	83 e0       	ldi	r24, 0x03	; 3
     cca:	89 83       	std	Y+1, r24	; 0x01
     ccc:	d1 c0       	rjmp	.+418    	; 0xe70 <DIO_set_pin_value+0x1e2>
	}else{
		switch(Port_no){
     cce:	8a 81       	ldd	r24, Y+2	; 0x02
     cd0:	28 2f       	mov	r18, r24
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	3e 83       	std	Y+6, r19	; 0x06
     cd6:	2d 83       	std	Y+5, r18	; 0x05
     cd8:	8d 81       	ldd	r24, Y+5	; 0x05
     cda:	9e 81       	ldd	r25, Y+6	; 0x06
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	91 05       	cpc	r25, r1
     ce0:	09 f4       	brne	.+2      	; 0xce4 <DIO_set_pin_value+0x56>
     ce2:	43 c0       	rjmp	.+134    	; 0xd6a <DIO_set_pin_value+0xdc>
     ce4:	2d 81       	ldd	r18, Y+5	; 0x05
     ce6:	3e 81       	ldd	r19, Y+6	; 0x06
     ce8:	22 30       	cpi	r18, 0x02	; 2
     cea:	31 05       	cpc	r19, r1
     cec:	2c f4       	brge	.+10     	; 0xcf8 <DIO_set_pin_value+0x6a>
     cee:	8d 81       	ldd	r24, Y+5	; 0x05
     cf0:	9e 81       	ldd	r25, Y+6	; 0x06
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	71 f0       	breq	.+28     	; 0xd12 <DIO_set_pin_value+0x84>
     cf6:	bc c0       	rjmp	.+376    	; 0xe70 <DIO_set_pin_value+0x1e2>
     cf8:	2d 81       	ldd	r18, Y+5	; 0x05
     cfa:	3e 81       	ldd	r19, Y+6	; 0x06
     cfc:	22 30       	cpi	r18, 0x02	; 2
     cfe:	31 05       	cpc	r19, r1
     d00:	09 f4       	brne	.+2      	; 0xd04 <DIO_set_pin_value+0x76>
     d02:	5f c0       	rjmp	.+190    	; 0xdc2 <DIO_set_pin_value+0x134>
     d04:	8d 81       	ldd	r24, Y+5	; 0x05
     d06:	9e 81       	ldd	r25, Y+6	; 0x06
     d08:	83 30       	cpi	r24, 0x03	; 3
     d0a:	91 05       	cpc	r25, r1
     d0c:	09 f4       	brne	.+2      	; 0xd10 <DIO_set_pin_value+0x82>
     d0e:	85 c0       	rjmp	.+266    	; 0xe1a <DIO_set_pin_value+0x18c>
     d10:	af c0       	rjmp	.+350    	; 0xe70 <DIO_set_pin_value+0x1e2>
		case Group_A: assign_bit(DIO_u8_PORTA,Pin_no,Pin_value);
     d12:	8c 81       	ldd	r24, Y+4	; 0x04
     d14:	81 30       	cpi	r24, 0x01	; 1
     d16:	a1 f4       	brne	.+40     	; 0xd40 <DIO_set_pin_value+0xb2>
     d18:	ab e3       	ldi	r26, 0x3B	; 59
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	eb e3       	ldi	r30, 0x3B	; 59
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	48 2f       	mov	r20, r24
     d24:	8b 81       	ldd	r24, Y+3	; 0x03
     d26:	28 2f       	mov	r18, r24
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	02 2e       	mov	r0, r18
     d30:	02 c0       	rjmp	.+4      	; 0xd36 <DIO_set_pin_value+0xa8>
     d32:	88 0f       	add	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	0a 94       	dec	r0
     d38:	e2 f7       	brpl	.-8      	; 0xd32 <DIO_set_pin_value+0xa4>
     d3a:	84 2b       	or	r24, r20
     d3c:	8c 93       	st	X, r24
     d3e:	98 c0       	rjmp	.+304    	; 0xe70 <DIO_set_pin_value+0x1e2>
     d40:	ab e3       	ldi	r26, 0x3B	; 59
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	eb e3       	ldi	r30, 0x3B	; 59
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	48 2f       	mov	r20, r24
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	28 2f       	mov	r18, r24
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	02 2e       	mov	r0, r18
     d58:	02 c0       	rjmp	.+4      	; 0xd5e <DIO_set_pin_value+0xd0>
     d5a:	88 0f       	add	r24, r24
     d5c:	99 1f       	adc	r25, r25
     d5e:	0a 94       	dec	r0
     d60:	e2 f7       	brpl	.-8      	; 0xd5a <DIO_set_pin_value+0xcc>
     d62:	80 95       	com	r24
     d64:	84 23       	and	r24, r20
     d66:	8c 93       	st	X, r24
     d68:	83 c0       	rjmp	.+262    	; 0xe70 <DIO_set_pin_value+0x1e2>
		break;
		case Group_B: assign_bit(DIO_u8_PORTB,Pin_no,Pin_value);
     d6a:	8c 81       	ldd	r24, Y+4	; 0x04
     d6c:	81 30       	cpi	r24, 0x01	; 1
     d6e:	a1 f4       	brne	.+40     	; 0xd98 <DIO_set_pin_value+0x10a>
     d70:	a8 e3       	ldi	r26, 0x38	; 56
     d72:	b0 e0       	ldi	r27, 0x00	; 0
     d74:	e8 e3       	ldi	r30, 0x38	; 56
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z
     d7a:	48 2f       	mov	r20, r24
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	02 2e       	mov	r0, r18
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <DIO_set_pin_value+0x100>
     d8a:	88 0f       	add	r24, r24
     d8c:	99 1f       	adc	r25, r25
     d8e:	0a 94       	dec	r0
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <DIO_set_pin_value+0xfc>
     d92:	84 2b       	or	r24, r20
     d94:	8c 93       	st	X, r24
     d96:	6c c0       	rjmp	.+216    	; 0xe70 <DIO_set_pin_value+0x1e2>
     d98:	a8 e3       	ldi	r26, 0x38	; 56
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	e8 e3       	ldi	r30, 0x38	; 56
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	80 81       	ld	r24, Z
     da2:	48 2f       	mov	r20, r24
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	28 2f       	mov	r18, r24
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	02 2e       	mov	r0, r18
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <DIO_set_pin_value+0x128>
     db2:	88 0f       	add	r24, r24
     db4:	99 1f       	adc	r25, r25
     db6:	0a 94       	dec	r0
     db8:	e2 f7       	brpl	.-8      	; 0xdb2 <DIO_set_pin_value+0x124>
     dba:	80 95       	com	r24
     dbc:	84 23       	and	r24, r20
     dbe:	8c 93       	st	X, r24
     dc0:	57 c0       	rjmp	.+174    	; 0xe70 <DIO_set_pin_value+0x1e2>
		break;
		case Group_C: assign_bit(DIO_u8_PORTC,Pin_no,Pin_value);
     dc2:	8c 81       	ldd	r24, Y+4	; 0x04
     dc4:	81 30       	cpi	r24, 0x01	; 1
     dc6:	a1 f4       	brne	.+40     	; 0xdf0 <DIO_set_pin_value+0x162>
     dc8:	a5 e3       	ldi	r26, 0x35	; 53
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	e5 e3       	ldi	r30, 0x35	; 53
     dce:	f0 e0       	ldi	r31, 0x00	; 0
     dd0:	80 81       	ld	r24, Z
     dd2:	48 2f       	mov	r20, r24
     dd4:	8b 81       	ldd	r24, Y+3	; 0x03
     dd6:	28 2f       	mov	r18, r24
     dd8:	30 e0       	ldi	r19, 0x00	; 0
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	02 2e       	mov	r0, r18
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <DIO_set_pin_value+0x158>
     de2:	88 0f       	add	r24, r24
     de4:	99 1f       	adc	r25, r25
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <DIO_set_pin_value+0x154>
     dea:	84 2b       	or	r24, r20
     dec:	8c 93       	st	X, r24
     dee:	40 c0       	rjmp	.+128    	; 0xe70 <DIO_set_pin_value+0x1e2>
     df0:	a5 e3       	ldi	r26, 0x35	; 53
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e5 e3       	ldi	r30, 0x35	; 53
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	48 2f       	mov	r20, r24
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	28 2f       	mov	r18, r24
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	02 2e       	mov	r0, r18
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <DIO_set_pin_value+0x180>
     e0a:	88 0f       	add	r24, r24
     e0c:	99 1f       	adc	r25, r25
     e0e:	0a 94       	dec	r0
     e10:	e2 f7       	brpl	.-8      	; 0xe0a <DIO_set_pin_value+0x17c>
     e12:	80 95       	com	r24
     e14:	84 23       	and	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	2b c0       	rjmp	.+86     	; 0xe70 <DIO_set_pin_value+0x1e2>
		break;
		case Group_D: assign_bit(DIO_u8_PORTD,Pin_no,Pin_value);
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	81 30       	cpi	r24, 0x01	; 1
     e1e:	a1 f4       	brne	.+40     	; 0xe48 <DIO_set_pin_value+0x1ba>
     e20:	a2 e3       	ldi	r26, 0x32	; 50
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e2 e3       	ldi	r30, 0x32	; 50
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8b 81       	ldd	r24, Y+3	; 0x03
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_set_pin_value+0x1b0>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_set_pin_value+0x1ac>
     e42:	84 2b       	or	r24, r20
     e44:	8c 93       	st	X, r24
     e46:	14 c0       	rjmp	.+40     	; 0xe70 <DIO_set_pin_value+0x1e2>
     e48:	a2 e3       	ldi	r26, 0x32	; 50
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	e2 e3       	ldi	r30, 0x32	; 50
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	48 2f       	mov	r20, r24
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	02 2e       	mov	r0, r18
     e60:	02 c0       	rjmp	.+4      	; 0xe66 <DIO_set_pin_value+0x1d8>
     e62:	88 0f       	add	r24, r24
     e64:	99 1f       	adc	r25, r25
     e66:	0a 94       	dec	r0
     e68:	e2 f7       	brpl	.-8      	; 0xe62 <DIO_set_pin_value+0x1d4>
     e6a:	80 95       	com	r24
     e6c:	84 23       	and	r24, r20
     e6e:	8c 93       	st	X, r24
		break;
		}
	}
	return Error_state;
     e70:	89 81       	ldd	r24, Y+1	; 0x01
}
     e72:	26 96       	adiw	r28, 0x06	; 6
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <DIO_set_pin_direction>:

u8 DIO_set_pin_direction(u8 Port_no,u8 Pin_no,u8 Pin_direction){
     e84:	df 93       	push	r29
     e86:	cf 93       	push	r28
     e88:	00 d0       	rcall	.+0      	; 0xe8a <DIO_set_pin_direction+0x6>
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <DIO_set_pin_direction+0x8>
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <DIO_set_pin_direction+0xa>
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	8a 83       	std	Y+2, r24	; 0x02
     e94:	6b 83       	std	Y+3, r22	; 0x03
     e96:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_state=0;
     e98:	19 82       	std	Y+1, r1	; 0x01
		if(Port_no>=DIO_max_port_no){
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	84 30       	cpi	r24, 0x04	; 4
     e9e:	18 f0       	brcs	.+6      	; 0xea6 <DIO_set_pin_direction+0x22>
			Error_state=1;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	89 83       	std	Y+1, r24	; 0x01
     ea4:	e0 c0       	rjmp	.+448    	; 0x1066 <DIO_set_pin_direction+0x1e2>
		}else if(Pin_no>=DIO_max_pin_no){
     ea6:	8b 81       	ldd	r24, Y+3	; 0x03
     ea8:	88 30       	cpi	r24, 0x08	; 8
     eaa:	18 f0       	brcs	.+6      	; 0xeb2 <DIO_set_pin_direction+0x2e>
			Error_state=2;
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	89 83       	std	Y+1, r24	; 0x01
     eb0:	da c0       	rjmp	.+436    	; 0x1066 <DIO_set_pin_direction+0x1e2>
		}else if((Pin_direction!=DIO_Input)&&(Pin_direction!=DIO_Output)){
     eb2:	8c 81       	ldd	r24, Y+4	; 0x04
     eb4:	88 23       	and	r24, r24
     eb6:	31 f0       	breq	.+12     	; 0xec4 <DIO_set_pin_direction+0x40>
     eb8:	8c 81       	ldd	r24, Y+4	; 0x04
     eba:	81 30       	cpi	r24, 0x01	; 1
     ebc:	19 f0       	breq	.+6      	; 0xec4 <DIO_set_pin_direction+0x40>
			Error_state=3;
     ebe:	83 e0       	ldi	r24, 0x03	; 3
     ec0:	89 83       	std	Y+1, r24	; 0x01
     ec2:	d1 c0       	rjmp	.+418    	; 0x1066 <DIO_set_pin_direction+0x1e2>
		}else{
			switch(Port_no){
     ec4:	8a 81       	ldd	r24, Y+2	; 0x02
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	3e 83       	std	Y+6, r19	; 0x06
     ecc:	2d 83       	std	Y+5, r18	; 0x05
     ece:	8d 81       	ldd	r24, Y+5	; 0x05
     ed0:	9e 81       	ldd	r25, Y+6	; 0x06
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	91 05       	cpc	r25, r1
     ed6:	09 f4       	brne	.+2      	; 0xeda <DIO_set_pin_direction+0x56>
     ed8:	43 c0       	rjmp	.+134    	; 0xf60 <DIO_set_pin_direction+0xdc>
     eda:	2d 81       	ldd	r18, Y+5	; 0x05
     edc:	3e 81       	ldd	r19, Y+6	; 0x06
     ede:	22 30       	cpi	r18, 0x02	; 2
     ee0:	31 05       	cpc	r19, r1
     ee2:	2c f4       	brge	.+10     	; 0xeee <DIO_set_pin_direction+0x6a>
     ee4:	8d 81       	ldd	r24, Y+5	; 0x05
     ee6:	9e 81       	ldd	r25, Y+6	; 0x06
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	71 f0       	breq	.+28     	; 0xf08 <DIO_set_pin_direction+0x84>
     eec:	bc c0       	rjmp	.+376    	; 0x1066 <DIO_set_pin_direction+0x1e2>
     eee:	2d 81       	ldd	r18, Y+5	; 0x05
     ef0:	3e 81       	ldd	r19, Y+6	; 0x06
     ef2:	22 30       	cpi	r18, 0x02	; 2
     ef4:	31 05       	cpc	r19, r1
     ef6:	09 f4       	brne	.+2      	; 0xefa <DIO_set_pin_direction+0x76>
     ef8:	5f c0       	rjmp	.+190    	; 0xfb8 <DIO_set_pin_direction+0x134>
     efa:	8d 81       	ldd	r24, Y+5	; 0x05
     efc:	9e 81       	ldd	r25, Y+6	; 0x06
     efe:	83 30       	cpi	r24, 0x03	; 3
     f00:	91 05       	cpc	r25, r1
     f02:	09 f4       	brne	.+2      	; 0xf06 <DIO_set_pin_direction+0x82>
     f04:	85 c0       	rjmp	.+266    	; 0x1010 <DIO_set_pin_direction+0x18c>
     f06:	af c0       	rjmp	.+350    	; 0x1066 <DIO_set_pin_direction+0x1e2>
			case Group_A: assign_bit(DIO_u8_DDRA,Pin_no,Pin_direction);
     f08:	8c 81       	ldd	r24, Y+4	; 0x04
     f0a:	81 30       	cpi	r24, 0x01	; 1
     f0c:	a1 f4       	brne	.+40     	; 0xf36 <DIO_set_pin_direction+0xb2>
     f0e:	aa e3       	ldi	r26, 0x3A	; 58
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	ea e3       	ldi	r30, 0x3A	; 58
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <DIO_set_pin_direction+0xa8>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <DIO_set_pin_direction+0xa4>
     f30:	84 2b       	or	r24, r20
     f32:	8c 93       	st	X, r24
     f34:	98 c0       	rjmp	.+304    	; 0x1066 <DIO_set_pin_direction+0x1e2>
     f36:	aa e3       	ldi	r26, 0x3A	; 58
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	ea e3       	ldi	r30, 0x3A	; 58
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	48 2f       	mov	r20, r24
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	02 2e       	mov	r0, r18
     f4e:	02 c0       	rjmp	.+4      	; 0xf54 <DIO_set_pin_direction+0xd0>
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	0a 94       	dec	r0
     f56:	e2 f7       	brpl	.-8      	; 0xf50 <DIO_set_pin_direction+0xcc>
     f58:	80 95       	com	r24
     f5a:	84 23       	and	r24, r20
     f5c:	8c 93       	st	X, r24
     f5e:	83 c0       	rjmp	.+262    	; 0x1066 <DIO_set_pin_direction+0x1e2>
			break;
			case Group_B: assign_bit(DIO_u8_DDRB,Pin_no,Pin_direction);
     f60:	8c 81       	ldd	r24, Y+4	; 0x04
     f62:	81 30       	cpi	r24, 0x01	; 1
     f64:	a1 f4       	brne	.+40     	; 0xf8e <DIO_set_pin_direction+0x10a>
     f66:	a7 e3       	ldi	r26, 0x37	; 55
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	e7 e3       	ldi	r30, 0x37	; 55
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 81       	ld	r24, Z
     f70:	48 2f       	mov	r20, r24
     f72:	8b 81       	ldd	r24, Y+3	; 0x03
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	02 2e       	mov	r0, r18
     f7e:	02 c0       	rjmp	.+4      	; 0xf84 <DIO_set_pin_direction+0x100>
     f80:	88 0f       	add	r24, r24
     f82:	99 1f       	adc	r25, r25
     f84:	0a 94       	dec	r0
     f86:	e2 f7       	brpl	.-8      	; 0xf80 <DIO_set_pin_direction+0xfc>
     f88:	84 2b       	or	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	6c c0       	rjmp	.+216    	; 0x1066 <DIO_set_pin_direction+0x1e2>
     f8e:	a7 e3       	ldi	r26, 0x37	; 55
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e7 e3       	ldi	r30, 0x37	; 55
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	80 81       	ld	r24, Z
     f98:	48 2f       	mov	r20, r24
     f9a:	8b 81       	ldd	r24, Y+3	; 0x03
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	02 2e       	mov	r0, r18
     fa6:	02 c0       	rjmp	.+4      	; 0xfac <DIO_set_pin_direction+0x128>
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	0a 94       	dec	r0
     fae:	e2 f7       	brpl	.-8      	; 0xfa8 <DIO_set_pin_direction+0x124>
     fb0:	80 95       	com	r24
     fb2:	84 23       	and	r24, r20
     fb4:	8c 93       	st	X, r24
     fb6:	57 c0       	rjmp	.+174    	; 0x1066 <DIO_set_pin_direction+0x1e2>
			break;
			case Group_C: assign_bit(DIO_u8_DDRC,Pin_no,Pin_direction);
     fb8:	8c 81       	ldd	r24, Y+4	; 0x04
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	a1 f4       	brne	.+40     	; 0xfe6 <DIO_set_pin_direction+0x162>
     fbe:	a4 e3       	ldi	r26, 0x34	; 52
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e4 e3       	ldi	r30, 0x34	; 52
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	48 2f       	mov	r20, r24
     fca:	8b 81       	ldd	r24, Y+3	; 0x03
     fcc:	28 2f       	mov	r18, r24
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	02 2e       	mov	r0, r18
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <DIO_set_pin_direction+0x158>
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	0a 94       	dec	r0
     fde:	e2 f7       	brpl	.-8      	; 0xfd8 <DIO_set_pin_direction+0x154>
     fe0:	84 2b       	or	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	40 c0       	rjmp	.+128    	; 0x1066 <DIO_set_pin_direction+0x1e2>
     fe6:	a4 e3       	ldi	r26, 0x34	; 52
     fe8:	b0 e0       	ldi	r27, 0x00	; 0
     fea:	e4 e3       	ldi	r30, 0x34	; 52
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	48 2f       	mov	r20, r24
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	28 2f       	mov	r18, r24
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	02 2e       	mov	r0, r18
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <DIO_set_pin_direction+0x180>
    1000:	88 0f       	add	r24, r24
    1002:	99 1f       	adc	r25, r25
    1004:	0a 94       	dec	r0
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <DIO_set_pin_direction+0x17c>
    1008:	80 95       	com	r24
    100a:	84 23       	and	r24, r20
    100c:	8c 93       	st	X, r24
    100e:	2b c0       	rjmp	.+86     	; 0x1066 <DIO_set_pin_direction+0x1e2>
			break;
			case Group_D: assign_bit(DIO_u8_DDRD,Pin_no,Pin_direction);
    1010:	8c 81       	ldd	r24, Y+4	; 0x04
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	a1 f4       	brne	.+40     	; 0x103e <DIO_set_pin_direction+0x1ba>
    1016:	a1 e3       	ldi	r26, 0x31	; 49
    1018:	b0 e0       	ldi	r27, 0x00	; 0
    101a:	e1 e3       	ldi	r30, 0x31	; 49
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	48 2f       	mov	r20, r24
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	28 2f       	mov	r18, r24
    1026:	30 e0       	ldi	r19, 0x00	; 0
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	02 2e       	mov	r0, r18
    102e:	02 c0       	rjmp	.+4      	; 0x1034 <DIO_set_pin_direction+0x1b0>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	0a 94       	dec	r0
    1036:	e2 f7       	brpl	.-8      	; 0x1030 <DIO_set_pin_direction+0x1ac>
    1038:	84 2b       	or	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	14 c0       	rjmp	.+40     	; 0x1066 <DIO_set_pin_direction+0x1e2>
    103e:	a1 e3       	ldi	r26, 0x31	; 49
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e1 e3       	ldi	r30, 0x31	; 49
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	48 2f       	mov	r20, r24
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	02 2e       	mov	r0, r18
    1056:	02 c0       	rjmp	.+4      	; 0x105c <DIO_set_pin_direction+0x1d8>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	0a 94       	dec	r0
    105e:	e2 f7       	brpl	.-8      	; 0x1058 <DIO_set_pin_direction+0x1d4>
    1060:	80 95       	com	r24
    1062:	84 23       	and	r24, r20
    1064:	8c 93       	st	X, r24
			break;
			}
		}
		return Error_state;
    1066:	89 81       	ldd	r24, Y+1	; 0x01
}
    1068:	26 96       	adiw	r28, 0x06	; 6
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
    1074:	cf 91       	pop	r28
    1076:	df 91       	pop	r29
    1078:	08 95       	ret

0000107a <DIO_get_pin_value>:

u8 DIO_get_pin_value(u8 Port_no,u8 Pin_no,u8*Pin_value){
    107a:	df 93       	push	r29
    107c:	cf 93       	push	r28
    107e:	cd b7       	in	r28, 0x3d	; 61
    1080:	de b7       	in	r29, 0x3e	; 62
    1082:	27 97       	sbiw	r28, 0x07	; 7
    1084:	0f b6       	in	r0, 0x3f	; 63
    1086:	f8 94       	cli
    1088:	de bf       	out	0x3e, r29	; 62
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	cd bf       	out	0x3d, r28	; 61
    108e:	8a 83       	std	Y+2, r24	; 0x02
    1090:	6b 83       	std	Y+3, r22	; 0x03
    1092:	5d 83       	std	Y+5, r21	; 0x05
    1094:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_state=0;
    1096:	19 82       	std	Y+1, r1	; 0x01
			if(Port_no>=DIO_max_port_no){
    1098:	8a 81       	ldd	r24, Y+2	; 0x02
    109a:	84 30       	cpi	r24, 0x04	; 4
    109c:	18 f0       	brcs	.+6      	; 0x10a4 <DIO_get_pin_value+0x2a>
				Error_state=1;
    109e:	81 e0       	ldi	r24, 0x01	; 1
    10a0:	89 83       	std	Y+1, r24	; 0x01
    10a2:	76 c0       	rjmp	.+236    	; 0x1190 <DIO_get_pin_value+0x116>
			}else if(Pin_no>=DIO_max_pin_no){
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	88 30       	cpi	r24, 0x08	; 8
    10a8:	18 f0       	brcs	.+6      	; 0x10b0 <DIO_get_pin_value+0x36>
				Error_state=2;
    10aa:	82 e0       	ldi	r24, 0x02	; 2
    10ac:	89 83       	std	Y+1, r24	; 0x01
    10ae:	70 c0       	rjmp	.+224    	; 0x1190 <DIO_get_pin_value+0x116>
			}else{
				switch(Port_no){
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	28 2f       	mov	r18, r24
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	3f 83       	std	Y+7, r19	; 0x07
    10b8:	2e 83       	std	Y+6, r18	; 0x06
    10ba:	4e 81       	ldd	r20, Y+6	; 0x06
    10bc:	5f 81       	ldd	r21, Y+7	; 0x07
    10be:	41 30       	cpi	r20, 0x01	; 1
    10c0:	51 05       	cpc	r21, r1
    10c2:	59 f1       	breq	.+86     	; 0x111a <DIO_get_pin_value+0xa0>
    10c4:	8e 81       	ldd	r24, Y+6	; 0x06
    10c6:	9f 81       	ldd	r25, Y+7	; 0x07
    10c8:	82 30       	cpi	r24, 0x02	; 2
    10ca:	91 05       	cpc	r25, r1
    10cc:	34 f4       	brge	.+12     	; 0x10da <DIO_get_pin_value+0x60>
    10ce:	2e 81       	ldd	r18, Y+6	; 0x06
    10d0:	3f 81       	ldd	r19, Y+7	; 0x07
    10d2:	21 15       	cp	r18, r1
    10d4:	31 05       	cpc	r19, r1
    10d6:	69 f0       	breq	.+26     	; 0x10f2 <DIO_get_pin_value+0x78>
    10d8:	5b c0       	rjmp	.+182    	; 0x1190 <DIO_get_pin_value+0x116>
    10da:	4e 81       	ldd	r20, Y+6	; 0x06
    10dc:	5f 81       	ldd	r21, Y+7	; 0x07
    10de:	42 30       	cpi	r20, 0x02	; 2
    10e0:	51 05       	cpc	r21, r1
    10e2:	79 f1       	breq	.+94     	; 0x1142 <DIO_get_pin_value+0xc8>
    10e4:	8e 81       	ldd	r24, Y+6	; 0x06
    10e6:	9f 81       	ldd	r25, Y+7	; 0x07
    10e8:	83 30       	cpi	r24, 0x03	; 3
    10ea:	91 05       	cpc	r25, r1
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <DIO_get_pin_value+0x76>
    10ee:	3d c0       	rjmp	.+122    	; 0x116a <DIO_get_pin_value+0xf0>
    10f0:	4f c0       	rjmp	.+158    	; 0x1190 <DIO_get_pin_value+0x116>
				case Group_A: *Pin_value=get_bit(DIO_u8_PINA,Pin_no);
    10f2:	e9 e3       	ldi	r30, 0x39	; 57
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	88 2f       	mov	r24, r24
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	a9 01       	movw	r20, r18
    1104:	02 c0       	rjmp	.+4      	; 0x110a <DIO_get_pin_value+0x90>
    1106:	55 95       	asr	r21
    1108:	47 95       	ror	r20
    110a:	8a 95       	dec	r24
    110c:	e2 f7       	brpl	.-8      	; 0x1106 <DIO_get_pin_value+0x8c>
    110e:	ca 01       	movw	r24, r20
    1110:	81 70       	andi	r24, 0x01	; 1
    1112:	ec 81       	ldd	r30, Y+4	; 0x04
    1114:	fd 81       	ldd	r31, Y+5	; 0x05
    1116:	80 83       	st	Z, r24
    1118:	3b c0       	rjmp	.+118    	; 0x1190 <DIO_get_pin_value+0x116>
				break;
				case Group_B: *Pin_value=get_bit(DIO_u8_PINB,Pin_no);
    111a:	e6 e3       	ldi	r30, 0x36	; 54
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	28 2f       	mov	r18, r24
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	88 2f       	mov	r24, r24
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	a9 01       	movw	r20, r18
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <DIO_get_pin_value+0xb8>
    112e:	55 95       	asr	r21
    1130:	47 95       	ror	r20
    1132:	8a 95       	dec	r24
    1134:	e2 f7       	brpl	.-8      	; 0x112e <DIO_get_pin_value+0xb4>
    1136:	ca 01       	movw	r24, r20
    1138:	81 70       	andi	r24, 0x01	; 1
    113a:	ec 81       	ldd	r30, Y+4	; 0x04
    113c:	fd 81       	ldd	r31, Y+5	; 0x05
    113e:	80 83       	st	Z, r24
    1140:	27 c0       	rjmp	.+78     	; 0x1190 <DIO_get_pin_value+0x116>
				break;
				case Group_C: *Pin_value=get_bit(DIO_u8_PINC,Pin_no);
    1142:	e3 e3       	ldi	r30, 0x33	; 51
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	28 2f       	mov	r18, r24
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	88 2f       	mov	r24, r24
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	a9 01       	movw	r20, r18
    1154:	02 c0       	rjmp	.+4      	; 0x115a <DIO_get_pin_value+0xe0>
    1156:	55 95       	asr	r21
    1158:	47 95       	ror	r20
    115a:	8a 95       	dec	r24
    115c:	e2 f7       	brpl	.-8      	; 0x1156 <DIO_get_pin_value+0xdc>
    115e:	ca 01       	movw	r24, r20
    1160:	81 70       	andi	r24, 0x01	; 1
    1162:	ec 81       	ldd	r30, Y+4	; 0x04
    1164:	fd 81       	ldd	r31, Y+5	; 0x05
    1166:	80 83       	st	Z, r24
    1168:	13 c0       	rjmp	.+38     	; 0x1190 <DIO_get_pin_value+0x116>
				break;
				case Group_D: *Pin_value=get_bit(DIO_u8_PIND,Pin_no);
    116a:	e0 e3       	ldi	r30, 0x30	; 48
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	88 2f       	mov	r24, r24
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a9 01       	movw	r20, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <DIO_get_pin_value+0x108>
    117e:	55 95       	asr	r21
    1180:	47 95       	ror	r20
    1182:	8a 95       	dec	r24
    1184:	e2 f7       	brpl	.-8      	; 0x117e <DIO_get_pin_value+0x104>
    1186:	ca 01       	movw	r24, r20
    1188:	81 70       	andi	r24, 0x01	; 1
    118a:	ec 81       	ldd	r30, Y+4	; 0x04
    118c:	fd 81       	ldd	r31, Y+5	; 0x05
    118e:	80 83       	st	Z, r24
				break;
				}
			}
			return Error_state;
    1190:	89 81       	ldd	r24, Y+1	; 0x01
}
    1192:	27 96       	adiw	r28, 0x07	; 7
    1194:	0f b6       	in	r0, 0x3f	; 63
    1196:	f8 94       	cli
    1198:	de bf       	out	0x3e, r29	; 62
    119a:	0f be       	out	0x3f, r0	; 63
    119c:	cd bf       	out	0x3d, r28	; 61
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <DIO_set_port_value>:

u8 DIO_set_port_value(u8 Port_no,u8 Port_value){
    11a4:	df 93       	push	r29
    11a6:	cf 93       	push	r28
    11a8:	00 d0       	rcall	.+0      	; 0x11aa <DIO_set_port_value+0x6>
    11aa:	00 d0       	rcall	.+0      	; 0x11ac <DIO_set_port_value+0x8>
    11ac:	0f 92       	push	r0
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
    11b2:	8a 83       	std	Y+2, r24	; 0x02
    11b4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_state=0;
    11b6:	19 82       	std	Y+1, r1	; 0x01
		if(Port_no>=DIO_max_port_no){
    11b8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ba:	84 30       	cpi	r24, 0x04	; 4
    11bc:	18 f0       	brcs	.+6      	; 0x11c4 <DIO_set_port_value+0x20>
			Error_state=1;
    11be:	81 e0       	ldi	r24, 0x01	; 1
    11c0:	89 83       	std	Y+1, r24	; 0x01
    11c2:	32 c0       	rjmp	.+100    	; 0x1228 <DIO_set_port_value+0x84>
		}else if(Port_value>DIO_max_port_value){
			Error_state=2;
		}else{
			switch(Port_no){
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	3d 83       	std	Y+5, r19	; 0x05
    11cc:	2c 83       	std	Y+4, r18	; 0x04
    11ce:	8c 81       	ldd	r24, Y+4	; 0x04
    11d0:	9d 81       	ldd	r25, Y+5	; 0x05
    11d2:	81 30       	cpi	r24, 0x01	; 1
    11d4:	91 05       	cpc	r25, r1
    11d6:	d1 f0       	breq	.+52     	; 0x120c <DIO_set_port_value+0x68>
    11d8:	2c 81       	ldd	r18, Y+4	; 0x04
    11da:	3d 81       	ldd	r19, Y+5	; 0x05
    11dc:	22 30       	cpi	r18, 0x02	; 2
    11de:	31 05       	cpc	r19, r1
    11e0:	2c f4       	brge	.+10     	; 0x11ec <DIO_set_port_value+0x48>
    11e2:	8c 81       	ldd	r24, Y+4	; 0x04
    11e4:	9d 81       	ldd	r25, Y+5	; 0x05
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	61 f0       	breq	.+24     	; 0x1202 <DIO_set_port_value+0x5e>
    11ea:	1e c0       	rjmp	.+60     	; 0x1228 <DIO_set_port_value+0x84>
    11ec:	2c 81       	ldd	r18, Y+4	; 0x04
    11ee:	3d 81       	ldd	r19, Y+5	; 0x05
    11f0:	22 30       	cpi	r18, 0x02	; 2
    11f2:	31 05       	cpc	r19, r1
    11f4:	81 f0       	breq	.+32     	; 0x1216 <DIO_set_port_value+0x72>
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	9d 81       	ldd	r25, Y+5	; 0x05
    11fa:	83 30       	cpi	r24, 0x03	; 3
    11fc:	91 05       	cpc	r25, r1
    11fe:	81 f0       	breq	.+32     	; 0x1220 <DIO_set_port_value+0x7c>
    1200:	13 c0       	rjmp	.+38     	; 0x1228 <DIO_set_port_value+0x84>
			case Group_A: DIO_u8_PORTA=Port_value;
    1202:	eb e3       	ldi	r30, 0x3B	; 59
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	80 83       	st	Z, r24
    120a:	0e c0       	rjmp	.+28     	; 0x1228 <DIO_set_port_value+0x84>
			break;
			case Group_B: DIO_u8_PORTB=Port_value;
    120c:	e8 e3       	ldi	r30, 0x38	; 56
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	80 83       	st	Z, r24
    1214:	09 c0       	rjmp	.+18     	; 0x1228 <DIO_set_port_value+0x84>
			break;
			case Group_C: DIO_u8_PORTC=Port_value;
    1216:	e5 e3       	ldi	r30, 0x35	; 53
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	80 83       	st	Z, r24
    121e:	04 c0       	rjmp	.+8      	; 0x1228 <DIO_set_port_value+0x84>
			break;
			case Group_D: DIO_u8_PORTD=Port_value;
    1220:	e2 e3       	ldi	r30, 0x32	; 50
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	80 83       	st	Z, r24
			break;
			}
		}
		return Error_state;
    1228:	89 81       	ldd	r24, Y+1	; 0x01
}
    122a:	0f 90       	pop	r0
    122c:	0f 90       	pop	r0
    122e:	0f 90       	pop	r0
    1230:	0f 90       	pop	r0
    1232:	0f 90       	pop	r0
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <DIO_set_port_direction>:

u8 DIO_set_port_direction(u8 Port_no,u8 Port_direction){
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	00 d0       	rcall	.+0      	; 0x1240 <DIO_set_port_direction+0x6>
    1240:	00 d0       	rcall	.+0      	; 0x1242 <DIO_set_port_direction+0x8>
    1242:	0f 92       	push	r0
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	8a 83       	std	Y+2, r24	; 0x02
    124a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_state=0;
    124c:	19 82       	std	Y+1, r1	; 0x01
			if(Port_no>=DIO_max_port_no){
    124e:	8a 81       	ldd	r24, Y+2	; 0x02
    1250:	84 30       	cpi	r24, 0x04	; 4
    1252:	18 f0       	brcs	.+6      	; 0x125a <DIO_set_port_direction+0x20>
				Error_state=1;
    1254:	81 e0       	ldi	r24, 0x01	; 1
    1256:	89 83       	std	Y+1, r24	; 0x01
    1258:	32 c0       	rjmp	.+100    	; 0x12be <DIO_set_port_direction+0x84>
			}else if(Port_direction>DIO_max_port_direction){
				Error_state=2;
			}else{
				switch(Port_no){
    125a:	8a 81       	ldd	r24, Y+2	; 0x02
    125c:	28 2f       	mov	r18, r24
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	3d 83       	std	Y+5, r19	; 0x05
    1262:	2c 83       	std	Y+4, r18	; 0x04
    1264:	8c 81       	ldd	r24, Y+4	; 0x04
    1266:	9d 81       	ldd	r25, Y+5	; 0x05
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	91 05       	cpc	r25, r1
    126c:	d1 f0       	breq	.+52     	; 0x12a2 <DIO_set_port_direction+0x68>
    126e:	2c 81       	ldd	r18, Y+4	; 0x04
    1270:	3d 81       	ldd	r19, Y+5	; 0x05
    1272:	22 30       	cpi	r18, 0x02	; 2
    1274:	31 05       	cpc	r19, r1
    1276:	2c f4       	brge	.+10     	; 0x1282 <DIO_set_port_direction+0x48>
    1278:	8c 81       	ldd	r24, Y+4	; 0x04
    127a:	9d 81       	ldd	r25, Y+5	; 0x05
    127c:	00 97       	sbiw	r24, 0x00	; 0
    127e:	61 f0       	breq	.+24     	; 0x1298 <DIO_set_port_direction+0x5e>
    1280:	1e c0       	rjmp	.+60     	; 0x12be <DIO_set_port_direction+0x84>
    1282:	2c 81       	ldd	r18, Y+4	; 0x04
    1284:	3d 81       	ldd	r19, Y+5	; 0x05
    1286:	22 30       	cpi	r18, 0x02	; 2
    1288:	31 05       	cpc	r19, r1
    128a:	81 f0       	breq	.+32     	; 0x12ac <DIO_set_port_direction+0x72>
    128c:	8c 81       	ldd	r24, Y+4	; 0x04
    128e:	9d 81       	ldd	r25, Y+5	; 0x05
    1290:	83 30       	cpi	r24, 0x03	; 3
    1292:	91 05       	cpc	r25, r1
    1294:	81 f0       	breq	.+32     	; 0x12b6 <DIO_set_port_direction+0x7c>
    1296:	13 c0       	rjmp	.+38     	; 0x12be <DIO_set_port_direction+0x84>
				case Group_A: DIO_u8_DDRA=Port_direction;
    1298:	ea e3       	ldi	r30, 0x3A	; 58
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	80 83       	st	Z, r24
    12a0:	0e c0       	rjmp	.+28     	; 0x12be <DIO_set_port_direction+0x84>
				break;
				case Group_B: DIO_u8_DDRB=Port_direction;
    12a2:	e7 e3       	ldi	r30, 0x37	; 55
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	80 83       	st	Z, r24
    12aa:	09 c0       	rjmp	.+18     	; 0x12be <DIO_set_port_direction+0x84>
				break;
				case Group_C: DIO_u8_DDRC=Port_direction;
    12ac:	e4 e3       	ldi	r30, 0x34	; 52
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	80 83       	st	Z, r24
    12b4:	04 c0       	rjmp	.+8      	; 0x12be <DIO_set_port_direction+0x84>
				break;
				case Group_D: DIO_u8_DDRD=Port_direction;;
    12b6:	e1 e3       	ldi	r30, 0x31	; 49
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	80 83       	st	Z, r24
				break;
				}
			}
			return Error_state;
    12be:	89 81       	ldd	r24, Y+1	; 0x01
}
    12c0:	0f 90       	pop	r0
    12c2:	0f 90       	pop	r0
    12c4:	0f 90       	pop	r0
    12c6:	0f 90       	pop	r0
    12c8:	0f 90       	pop	r0
    12ca:	cf 91       	pop	r28
    12cc:	df 91       	pop	r29
    12ce:	08 95       	ret

000012d0 <send_command>:
#include"LCD_Interface.h"

//write command in lcd rs put low (rs: register select)
//******************************************study***********************
void send_command(u8 command)
{//rs low to write command
    12d0:	df 93       	push	r29
    12d2:	cf 93       	push	r28
    12d4:	cd b7       	in	r28, 0x3d	; 61
    12d6:	de b7       	in	r29, 0x3e	; 62
    12d8:	2f 97       	sbiw	r28, 0x0f	; 15
    12da:	0f b6       	in	r0, 0x3f	; 63
    12dc:	f8 94       	cli
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	0f be       	out	0x3f, r0	; 63
    12e2:	cd bf       	out	0x3d, r28	; 61
    12e4:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_set_pin_value(LCD_Control_Port,LCD_RS_Pin,DIO_Low);
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	40 e0       	ldi	r20, 0x00	; 0
    12ec:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_set_pin_value>
	//rw low to write not read
	DIO_set_pin_value(LCD_Control_Port,LCD_RW_Pin,DIO_Low);
    12f0:	81 e0       	ldi	r24, 0x01	; 1
    12f2:	61 e0       	ldi	r22, 0x01	; 1
    12f4:	40 e0       	ldi	r20, 0x00	; 0
    12f6:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_set_pin_value>
	//set command in pins
	DIO_set_port_value(LCD_Data_Port,command);
    12fa:	83 e0       	ldi	r24, 0x03	; 3
    12fc:	6f 85       	ldd	r22, Y+15	; 0x0f
    12fe:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_set_port_value>
//final eneble the lcd to lcd know the data or command sent (pulse)
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_High);
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	62 e0       	ldi	r22, 0x02	; 2
    1306:	41 e0       	ldi	r20, 0x01	; 1
    1308:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_set_pin_value>
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	a0 e0       	ldi	r26, 0x00	; 0
    1312:	b0 e4       	ldi	r27, 0x40	; 64
    1314:	8b 87       	std	Y+11, r24	; 0x0b
    1316:	9c 87       	std	Y+12, r25	; 0x0c
    1318:	ad 87       	std	Y+13, r26	; 0x0d
    131a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    131c:	6b 85       	ldd	r22, Y+11	; 0x0b
    131e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1320:	8d 85       	ldd	r24, Y+13	; 0x0d
    1322:	9e 85       	ldd	r25, Y+14	; 0x0e
    1324:	20 e0       	ldi	r18, 0x00	; 0
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	4a ef       	ldi	r20, 0xFA	; 250
    132a:	54 e4       	ldi	r21, 0x44	; 68
    132c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1330:	dc 01       	movw	r26, r24
    1332:	cb 01       	movw	r24, r22
    1334:	8f 83       	std	Y+7, r24	; 0x07
    1336:	98 87       	std	Y+8, r25	; 0x08
    1338:	a9 87       	std	Y+9, r26	; 0x09
    133a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    133c:	6f 81       	ldd	r22, Y+7	; 0x07
    133e:	78 85       	ldd	r23, Y+8	; 0x08
    1340:	89 85       	ldd	r24, Y+9	; 0x09
    1342:	9a 85       	ldd	r25, Y+10	; 0x0a
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e8       	ldi	r20, 0x80	; 128
    134a:	5f e3       	ldi	r21, 0x3F	; 63
    134c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1350:	88 23       	and	r24, r24
    1352:	2c f4       	brge	.+10     	; 0x135e <send_command+0x8e>
		__ticks = 1;
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	9e 83       	std	Y+6, r25	; 0x06
    135a:	8d 83       	std	Y+5, r24	; 0x05
    135c:	3f c0       	rjmp	.+126    	; 0x13dc <send_command+0x10c>
	else if (__tmp > 65535)
    135e:	6f 81       	ldd	r22, Y+7	; 0x07
    1360:	78 85       	ldd	r23, Y+8	; 0x08
    1362:	89 85       	ldd	r24, Y+9	; 0x09
    1364:	9a 85       	ldd	r25, Y+10	; 0x0a
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	3f ef       	ldi	r19, 0xFF	; 255
    136a:	4f e7       	ldi	r20, 0x7F	; 127
    136c:	57 e4       	ldi	r21, 0x47	; 71
    136e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1372:	18 16       	cp	r1, r24
    1374:	4c f5       	brge	.+82     	; 0x13c8 <send_command+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1376:	6b 85       	ldd	r22, Y+11	; 0x0b
    1378:	7c 85       	ldd	r23, Y+12	; 0x0c
    137a:	8d 85       	ldd	r24, Y+13	; 0x0d
    137c:	9e 85       	ldd	r25, Y+14	; 0x0e
    137e:	20 e0       	ldi	r18, 0x00	; 0
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	40 e2       	ldi	r20, 0x20	; 32
    1384:	51 e4       	ldi	r21, 0x41	; 65
    1386:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    138a:	dc 01       	movw	r26, r24
    138c:	cb 01       	movw	r24, r22
    138e:	bc 01       	movw	r22, r24
    1390:	cd 01       	movw	r24, r26
    1392:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1396:	dc 01       	movw	r26, r24
    1398:	cb 01       	movw	r24, r22
    139a:	9e 83       	std	Y+6, r25	; 0x06
    139c:	8d 83       	std	Y+5, r24	; 0x05
    139e:	0f c0       	rjmp	.+30     	; 0x13be <send_command+0xee>
    13a0:	88 ec       	ldi	r24, 0xC8	; 200
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	9c 83       	std	Y+4, r25	; 0x04
    13a6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	f1 f7       	brne	.-4      	; 0x13ac <send_command+0xdc>
    13b0:	9c 83       	std	Y+4, r25	; 0x04
    13b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13b4:	8d 81       	ldd	r24, Y+5	; 0x05
    13b6:	9e 81       	ldd	r25, Y+6	; 0x06
    13b8:	01 97       	sbiw	r24, 0x01	; 1
    13ba:	9e 83       	std	Y+6, r25	; 0x06
    13bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13be:	8d 81       	ldd	r24, Y+5	; 0x05
    13c0:	9e 81       	ldd	r25, Y+6	; 0x06
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	69 f7       	brne	.-38     	; 0x13a0 <send_command+0xd0>
    13c6:	14 c0       	rjmp	.+40     	; 0x13f0 <send_command+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13c8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ca:	78 85       	ldd	r23, Y+8	; 0x08
    13cc:	89 85       	ldd	r24, Y+9	; 0x09
    13ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    13d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    13d4:	dc 01       	movw	r26, r24
    13d6:	cb 01       	movw	r24, r22
    13d8:	9e 83       	std	Y+6, r25	; 0x06
    13da:	8d 83       	std	Y+5, r24	; 0x05
    13dc:	8d 81       	ldd	r24, Y+5	; 0x05
    13de:	9e 81       	ldd	r25, Y+6	; 0x06
    13e0:	9a 83       	std	Y+2, r25	; 0x02
    13e2:	89 83       	std	Y+1, r24	; 0x01
    13e4:	89 81       	ldd	r24, Y+1	; 0x01
    13e6:	9a 81       	ldd	r25, Y+2	; 0x02
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <send_command+0x118>
    13ec:	9a 83       	std	Y+2, r25	; 0x02
    13ee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_Low);
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	62 e0       	ldi	r22, 0x02	; 2
    13f4:	40 e0       	ldi	r20, 0x00	; 0
    13f6:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_set_pin_value>

}
    13fa:	2f 96       	adiw	r28, 0x0f	; 15
    13fc:	0f b6       	in	r0, 0x3f	; 63
    13fe:	f8 94       	cli
    1400:	de bf       	out	0x3e, r29	; 62
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	cd bf       	out	0x3d, r28	; 61
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <send_data>:
void send_data(u8 data)
{//rs low to write command
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
    1414:	2f 97       	sbiw	r28, 0x0f	; 15
    1416:	0f b6       	in	r0, 0x3f	; 63
    1418:	f8 94       	cli
    141a:	de bf       	out	0x3e, r29	; 62
    141c:	0f be       	out	0x3f, r0	; 63
    141e:	cd bf       	out	0x3d, r28	; 61
    1420:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_set_pin_value(LCD_Control_Port,LCD_RS_Pin,DIO_High);
    1422:	81 e0       	ldi	r24, 0x01	; 1
    1424:	60 e0       	ldi	r22, 0x00	; 0
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_set_pin_value>
	//rw low to write not read
	DIO_set_pin_value(LCD_Control_Port,LCD_RW_Pin,DIO_Low);
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	61 e0       	ldi	r22, 0x01	; 1
    1430:	40 e0       	ldi	r20, 0x00	; 0
    1432:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_set_pin_value>
	//set command in pins
	DIO_set_port_value(LCD_Data_Port,data);
    1436:	83 e0       	ldi	r24, 0x03	; 3
    1438:	6f 85       	ldd	r22, Y+15	; 0x0f
    143a:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <DIO_set_port_value>
//final eneble the lcd to lcd know the data or command sent (pulse)
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_High);
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	62 e0       	ldi	r22, 0x02	; 2
    1442:	41 e0       	ldi	r20, 0x01	; 1
    1444:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_set_pin_value>
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	a0 e0       	ldi	r26, 0x00	; 0
    144e:	b0 e4       	ldi	r27, 0x40	; 64
    1450:	8b 87       	std	Y+11, r24	; 0x0b
    1452:	9c 87       	std	Y+12, r25	; 0x0c
    1454:	ad 87       	std	Y+13, r26	; 0x0d
    1456:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1458:	6b 85       	ldd	r22, Y+11	; 0x0b
    145a:	7c 85       	ldd	r23, Y+12	; 0x0c
    145c:	8d 85       	ldd	r24, Y+13	; 0x0d
    145e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	4a ef       	ldi	r20, 0xFA	; 250
    1466:	54 e4       	ldi	r21, 0x44	; 68
    1468:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    146c:	dc 01       	movw	r26, r24
    146e:	cb 01       	movw	r24, r22
    1470:	8f 83       	std	Y+7, r24	; 0x07
    1472:	98 87       	std	Y+8, r25	; 0x08
    1474:	a9 87       	std	Y+9, r26	; 0x09
    1476:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1478:	6f 81       	ldd	r22, Y+7	; 0x07
    147a:	78 85       	ldd	r23, Y+8	; 0x08
    147c:	89 85       	ldd	r24, Y+9	; 0x09
    147e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e8       	ldi	r20, 0x80	; 128
    1486:	5f e3       	ldi	r21, 0x3F	; 63
    1488:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    148c:	88 23       	and	r24, r24
    148e:	2c f4       	brge	.+10     	; 0x149a <send_data+0x8e>
		__ticks = 1;
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	9e 83       	std	Y+6, r25	; 0x06
    1496:	8d 83       	std	Y+5, r24	; 0x05
    1498:	3f c0       	rjmp	.+126    	; 0x1518 <send_data+0x10c>
	else if (__tmp > 65535)
    149a:	6f 81       	ldd	r22, Y+7	; 0x07
    149c:	78 85       	ldd	r23, Y+8	; 0x08
    149e:	89 85       	ldd	r24, Y+9	; 0x09
    14a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a2:	20 e0       	ldi	r18, 0x00	; 0
    14a4:	3f ef       	ldi	r19, 0xFF	; 255
    14a6:	4f e7       	ldi	r20, 0x7F	; 127
    14a8:	57 e4       	ldi	r21, 0x47	; 71
    14aa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    14ae:	18 16       	cp	r1, r24
    14b0:	4c f5       	brge	.+82     	; 0x1504 <send_data+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ba:	20 e0       	ldi	r18, 0x00	; 0
    14bc:	30 e0       	ldi	r19, 0x00	; 0
    14be:	40 e2       	ldi	r20, 0x20	; 32
    14c0:	51 e4       	ldi	r21, 0x41	; 65
    14c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    14c6:	dc 01       	movw	r26, r24
    14c8:	cb 01       	movw	r24, r22
    14ca:	bc 01       	movw	r22, r24
    14cc:	cd 01       	movw	r24, r26
    14ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    14d2:	dc 01       	movw	r26, r24
    14d4:	cb 01       	movw	r24, r22
    14d6:	9e 83       	std	Y+6, r25	; 0x06
    14d8:	8d 83       	std	Y+5, r24	; 0x05
    14da:	0f c0       	rjmp	.+30     	; 0x14fa <send_data+0xee>
    14dc:	88 ec       	ldi	r24, 0xC8	; 200
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	9c 83       	std	Y+4, r25	; 0x04
    14e2:	8b 83       	std	Y+3, r24	; 0x03
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	01 97       	sbiw	r24, 0x01	; 1
    14ea:	f1 f7       	brne	.-4      	; 0x14e8 <send_data+0xdc>
    14ec:	9c 83       	std	Y+4, r25	; 0x04
    14ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f0:	8d 81       	ldd	r24, Y+5	; 0x05
    14f2:	9e 81       	ldd	r25, Y+6	; 0x06
    14f4:	01 97       	sbiw	r24, 0x01	; 1
    14f6:	9e 83       	std	Y+6, r25	; 0x06
    14f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fa:	8d 81       	ldd	r24, Y+5	; 0x05
    14fc:	9e 81       	ldd	r25, Y+6	; 0x06
    14fe:	00 97       	sbiw	r24, 0x00	; 0
    1500:	69 f7       	brne	.-38     	; 0x14dc <send_data+0xd0>
    1502:	14 c0       	rjmp	.+40     	; 0x152c <send_data+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1504:	6f 81       	ldd	r22, Y+7	; 0x07
    1506:	78 85       	ldd	r23, Y+8	; 0x08
    1508:	89 85       	ldd	r24, Y+9	; 0x09
    150a:	9a 85       	ldd	r25, Y+10	; 0x0a
    150c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1510:	dc 01       	movw	r26, r24
    1512:	cb 01       	movw	r24, r22
    1514:	9e 83       	std	Y+6, r25	; 0x06
    1516:	8d 83       	std	Y+5, r24	; 0x05
    1518:	8d 81       	ldd	r24, Y+5	; 0x05
    151a:	9e 81       	ldd	r25, Y+6	; 0x06
    151c:	9a 83       	std	Y+2, r25	; 0x02
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	89 81       	ldd	r24, Y+1	; 0x01
    1522:	9a 81       	ldd	r25, Y+2	; 0x02
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	f1 f7       	brne	.-4      	; 0x1524 <send_data+0x118>
    1528:	9a 83       	std	Y+2, r25	; 0x02
    152a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_Low);
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	62 e0       	ldi	r22, 0x02	; 2
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_set_pin_value>

}
    1536:	2f 96       	adiw	r28, 0x0f	; 15
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	de bf       	out	0x3e, r29	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <send_string>:

void send_string(const char *string_data)
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	00 d0       	rcall	.+0      	; 0x154e <send_string+0x6>
    154e:	0f 92       	push	r0
    1550:	cd b7       	in	r28, 0x3d	; 61
    1552:	de b7       	in	r29, 0x3e	; 62
    1554:	9b 83       	std	Y+3, r25	; 0x03
    1556:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter=0;
    1558:	19 82       	std	Y+1, r1	; 0x01
    155a:	0e c0       	rjmp	.+28     	; 0x1578 <send_string+0x30>
	while(string_data[counter]!='\0')
	{
		send_data(string_data[counter]);
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	9b 81       	ldd	r25, Y+3	; 0x03
    1566:	fc 01       	movw	r30, r24
    1568:	e2 0f       	add	r30, r18
    156a:	f3 1f       	adc	r31, r19
    156c:	80 81       	ld	r24, Z
    156e:	0e 94 06 0a 	call	0x140c	; 0x140c <send_data>
		counter++;
    1572:	89 81       	ldd	r24, Y+1	; 0x01
    1574:	8f 5f       	subi	r24, 0xFF	; 255
    1576:	89 83       	std	Y+1, r24	; 0x01
}

void send_string(const char *string_data)
{
	u8 counter=0;
	while(string_data[counter]!='\0')
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	9b 81       	ldd	r25, Y+3	; 0x03
    1582:	fc 01       	movw	r30, r24
    1584:	e2 0f       	add	r30, r18
    1586:	f3 1f       	adc	r31, r19
    1588:	80 81       	ld	r24, Z
    158a:	88 23       	and	r24, r24
    158c:	39 f7       	brne	.-50     	; 0x155c <send_string+0x14>
	{
		send_data(string_data[counter]);
		counter++;
	}

}
    158e:	0f 90       	pop	r0
    1590:	0f 90       	pop	r0
    1592:	0f 90       	pop	r0
    1594:	cf 91       	pop	r28
    1596:	df 91       	pop	r29
    1598:	08 95       	ret

0000159a <go_pos>:

void go_pos(u8 x_pos, u8 y_pos)
{
    159a:	df 93       	push	r29
    159c:	cf 93       	push	r28
    159e:	00 d0       	rcall	.+0      	; 0x15a0 <go_pos+0x6>
    15a0:	0f 92       	push	r0
    15a2:	cd b7       	in	r28, 0x3d	; 61
    15a4:	de b7       	in	r29, 0x3e	; 62
    15a6:	8a 83       	std	Y+2, r24	; 0x02
    15a8:	6b 83       	std	Y+3, r22	; 0x03
	u8 address;
	if (y_pos==0)
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	88 23       	and	r24, r24
    15ae:	19 f4       	brne	.+6      	; 0x15b6 <go_pos+0x1c>
		address= x_pos;
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	89 83       	std	Y+1, r24	; 0x01
    15b4:	06 c0       	rjmp	.+12     	; 0x15c2 <go_pos+0x28>
	else if(y_pos==1)
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	81 30       	cpi	r24, 0x01	; 1
    15ba:	19 f4       	brne	.+6      	; 0x15c2 <go_pos+0x28>
	address=(x_pos+ start_secound_colom);
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	80 5c       	subi	r24, 0xC0	; 192
    15c0:	89 83       	std	Y+1, r24	; 0x01

	send_command(address+data_sheet_send_pos_command);
    15c2:	89 81       	ldd	r24, Y+1	; 0x01
    15c4:	80 58       	subi	r24, 0x80	; 128
    15c6:	0e 94 68 09 	call	0x12d0	; 0x12d0 <send_command>

}
    15ca:	0f 90       	pop	r0
    15cc:	0f 90       	pop	r0
    15ce:	0f 90       	pop	r0
    15d0:	cf 91       	pop	r28
    15d2:	df 91       	pop	r29
    15d4:	08 95       	ret

000015d6 <write_num>:

void write_num (u32 num)
{
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	6a 97       	sbiw	r28, 0x1a	; 26
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	de bf       	out	0x3e, r29	; 62
    15e6:	0f be       	out	0x3f, r0	; 63
    15e8:	cd bf       	out	0x3d, r28	; 61
    15ea:	6f 8b       	std	Y+23, r22	; 0x17
    15ec:	78 8f       	std	Y+24, r23	; 0x18
    15ee:	89 8f       	std	Y+25, r24	; 0x19
    15f0:	9a 8f       	std	Y+26, r25	; 0x1a
	u8 rem,arr[20], arr_index=0;
    15f2:	19 82       	std	Y+1, r1	; 0x01
	if (num =='0')
    15f4:	8f 89       	ldd	r24, Y+23	; 0x17
    15f6:	98 8d       	ldd	r25, Y+24	; 0x18
    15f8:	a9 8d       	ldd	r26, Y+25	; 0x19
    15fa:	ba 8d       	ldd	r27, Y+26	; 0x1a
    15fc:	80 33       	cpi	r24, 0x30	; 48
    15fe:	91 05       	cpc	r25, r1
    1600:	a1 05       	cpc	r26, r1
    1602:	b1 05       	cpc	r27, r1
    1604:	f1 f5       	brne	.+124    	; 0x1682 <write_num+0xac>
		{arr[arr_index]='0';
    1606:	89 81       	ldd	r24, Y+1	; 0x01
    1608:	28 2f       	mov	r18, r24
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	ce 01       	movw	r24, r28
    160e:	03 96       	adiw	r24, 0x03	; 3
    1610:	fc 01       	movw	r30, r24
    1612:	e2 0f       	add	r30, r18
    1614:	f3 1f       	adc	r31, r19
    1616:	80 e3       	ldi	r24, 0x30	; 48
    1618:	80 83       	st	Z, r24
	arr_index++;}
    161a:	89 81       	ldd	r24, Y+1	; 0x01
    161c:	8f 5f       	subi	r24, 0xFF	; 255
    161e:	89 83       	std	Y+1, r24	; 0x01
    1620:	30 c0       	rjmp	.+96     	; 0x1682 <write_num+0xac>
	while(num!='0')
		{
			rem=num % 10;
    1622:	8f 89       	ldd	r24, Y+23	; 0x17
    1624:	98 8d       	ldd	r25, Y+24	; 0x18
    1626:	a9 8d       	ldd	r26, Y+25	; 0x19
    1628:	ba 8d       	ldd	r27, Y+26	; 0x1a
    162a:	2a e0       	ldi	r18, 0x0A	; 10
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	40 e0       	ldi	r20, 0x00	; 0
    1630:	50 e0       	ldi	r21, 0x00	; 0
    1632:	bc 01       	movw	r22, r24
    1634:	cd 01       	movw	r24, r26
    1636:	0e 94 0d 12 	call	0x241a	; 0x241a <__udivmodsi4>
    163a:	dc 01       	movw	r26, r24
    163c:	cb 01       	movw	r24, r22
    163e:	8a 83       	std	Y+2, r24	; 0x02
			arr[arr_index]=rem+'0';
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	8a 81       	ldd	r24, Y+2	; 0x02
    1648:	48 2f       	mov	r20, r24
    164a:	40 5d       	subi	r20, 0xD0	; 208
    164c:	ce 01       	movw	r24, r28
    164e:	03 96       	adiw	r24, 0x03	; 3
    1650:	fc 01       	movw	r30, r24
    1652:	e2 0f       	add	r30, r18
    1654:	f3 1f       	adc	r31, r19
    1656:	40 83       	st	Z, r20
			arr_index++;
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	8f 5f       	subi	r24, 0xFF	; 255
    165c:	89 83       	std	Y+1, r24	; 0x01
			num= num/10;
    165e:	8f 89       	ldd	r24, Y+23	; 0x17
    1660:	98 8d       	ldd	r25, Y+24	; 0x18
    1662:	a9 8d       	ldd	r26, Y+25	; 0x19
    1664:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1666:	2a e0       	ldi	r18, 0x0A	; 10
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	40 e0       	ldi	r20, 0x00	; 0
    166c:	50 e0       	ldi	r21, 0x00	; 0
    166e:	bc 01       	movw	r22, r24
    1670:	cd 01       	movw	r24, r26
    1672:	0e 94 0d 12 	call	0x241a	; 0x241a <__udivmodsi4>
    1676:	da 01       	movw	r26, r20
    1678:	c9 01       	movw	r24, r18
    167a:	8f 8b       	std	Y+23, r24	; 0x17
    167c:	98 8f       	std	Y+24, r25	; 0x18
    167e:	a9 8f       	std	Y+25, r26	; 0x19
    1680:	ba 8f       	std	Y+26, r27	; 0x1a
{
	u8 rem,arr[20], arr_index=0;
	if (num =='0')
		{arr[arr_index]='0';
	arr_index++;}
	while(num!='0')
    1682:	8f 89       	ldd	r24, Y+23	; 0x17
    1684:	98 8d       	ldd	r25, Y+24	; 0x18
    1686:	a9 8d       	ldd	r26, Y+25	; 0x19
    1688:	ba 8d       	ldd	r27, Y+26	; 0x1a
    168a:	80 33       	cpi	r24, 0x30	; 48
    168c:	91 05       	cpc	r25, r1
    168e:	a1 05       	cpc	r26, r1
    1690:	b1 05       	cpc	r27, r1
    1692:	39 f6       	brne	.-114    	; 0x1622 <write_num+0x4c>
			arr_index++;
			num= num/10;


		}
	arr[arr_index]='\0';
    1694:	89 81       	ldd	r24, Y+1	; 0x01
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	ce 01       	movw	r24, r28
    169c:	03 96       	adiw	r24, 0x03	; 3
    169e:	fc 01       	movw	r30, r24
    16a0:	e2 0f       	add	r30, r18
    16a2:	f3 1f       	adc	r31, r19
    16a4:	10 82       	st	Z, r1
reverse(arr,arr_index);
    16a6:	ce 01       	movw	r24, r28
    16a8:	03 96       	adiw	r24, 0x03	; 3
    16aa:	69 81       	ldd	r22, Y+1	; 0x01
    16ac:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <reverse>
send_string(arr);
    16b0:	ce 01       	movw	r24, r28
    16b2:	03 96       	adiw	r24, 0x03	; 3
    16b4:	0e 94 a4 0a 	call	0x1548	; 0x1548 <send_string>

}
    16b8:	6a 96       	adiw	r28, 0x1a	; 26
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	de bf       	out	0x3e, r29	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	cd bf       	out	0x3d, r28	; 61
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <LCD_write_cmd>:
//****************************************************************

void LCD_write_cmd(u8 cmd){
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	0f 92       	push	r0
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	89 83       	std	Y+1, r24	; 0x01
	DIO_set_pin_value(LCD_Control_Port,LCD_RS_Pin,DIO_Low);
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	60 e0       	ldi	r22, 0x00	; 0
    16da:	40 e0       	ldi	r20, 0x00	; 0
    16dc:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_set_pin_value>
	LCD_write(cmd);
    16e0:	89 81       	ldd	r24, Y+1	; 0x01
    16e2:	0e 94 89 0b 	call	0x1712	; 0x1712 <LCD_write>
}
    16e6:	0f 90       	pop	r0
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <LCD_write_data>:

void LCD_write_data(u8 data){
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	0f 92       	push	r0
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	89 83       	std	Y+1, r24	; 0x01
	DIO_set_pin_value(LCD_Control_Port,LCD_RS_Pin,DIO_High);
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	41 e0       	ldi	r20, 0x01	; 1
    1700:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_set_pin_value>
	LCD_write(data);
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	0e 94 89 0b 	call	0x1712	; 0x1712 <LCD_write>
}
    170a:	0f 90       	pop	r0
    170c:	cf 91       	pop	r28
    170e:	df 91       	pop	r29
    1710:	08 95       	ret

00001712 <LCD_write>:

void LCD_write(u8 value){
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	cd b7       	in	r28, 0x3d	; 61
    1718:	de b7       	in	r29, 0x3e	; 62
    171a:	61 97       	sbiw	r28, 0x11	; 17
    171c:	0f b6       	in	r0, 0x3f	; 63
    171e:	f8 94       	cli
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	0f be       	out	0x3f, r0	; 63
    1724:	cd bf       	out	0x3d, r28	; 61
    1726:	89 8b       	std	Y+17, r24	; 0x11
	DIO_set_pin_value(LCD_Control_Port,LCD_RW_Pin,DIO_Low);
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	61 e0       	ldi	r22, 0x01	; 1
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_set_pin_value>
	for(int i=0;i<8;i++){
    1732:	18 8a       	std	Y+16, r1	; 0x10
    1734:	1f 86       	std	Y+15, r1	; 0x0f
    1736:	16 c0       	rjmp	.+44     	; 0x1764 <LCD_write+0x52>
		DIO_set_pin_value(LCD_Data_Port,i,get_bit(value,i));//get bit for get each bit from byte cmd or data
    1738:	2f 85       	ldd	r18, Y+15	; 0x0f
    173a:	89 89       	ldd	r24, Y+17	; 0x11
    173c:	88 2f       	mov	r24, r24
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0f 84       	ldd	r0, Y+15	; 0x0f
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <LCD_write+0x36>
    1744:	95 95       	asr	r25
    1746:	87 95       	ror	r24
    1748:	0a 94       	dec	r0
    174a:	e2 f7       	brpl	.-8      	; 0x1744 <LCD_write+0x32>
    174c:	98 2f       	mov	r25, r24
    174e:	91 70       	andi	r25, 0x01	; 1
    1750:	83 e0       	ldi	r24, 0x03	; 3
    1752:	62 2f       	mov	r22, r18
    1754:	49 2f       	mov	r20, r25
    1756:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_set_pin_value>
	LCD_write(data);
}

void LCD_write(u8 value){
	DIO_set_pin_value(LCD_Control_Port,LCD_RW_Pin,DIO_Low);
	for(int i=0;i<8;i++){
    175a:	8f 85       	ldd	r24, Y+15	; 0x0f
    175c:	98 89       	ldd	r25, Y+16	; 0x10
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	98 8b       	std	Y+16, r25	; 0x10
    1762:	8f 87       	std	Y+15, r24	; 0x0f
    1764:	8f 85       	ldd	r24, Y+15	; 0x0f
    1766:	98 89       	ldd	r25, Y+16	; 0x10
    1768:	88 30       	cpi	r24, 0x08	; 8
    176a:	91 05       	cpc	r25, r1
    176c:	2c f3       	brlt	.-54     	; 0x1738 <LCD_write+0x26>
		DIO_set_pin_value(LCD_Data_Port,i,get_bit(value,i));//get bit for get each bit from byte cmd or data
	}
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_High); //pulse for know instruction is coming
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	62 e0       	ldi	r22, 0x02	; 2
    1772:	41 e0       	ldi	r20, 0x01	; 1
    1774:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_set_pin_value>
    1778:	80 e0       	ldi	r24, 0x00	; 0
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	a0 e8       	ldi	r26, 0x80	; 128
    177e:	bf e3       	ldi	r27, 0x3F	; 63
    1780:	8b 87       	std	Y+11, r24	; 0x0b
    1782:	9c 87       	std	Y+12, r25	; 0x0c
    1784:	ad 87       	std	Y+13, r26	; 0x0d
    1786:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1788:	6b 85       	ldd	r22, Y+11	; 0x0b
    178a:	7c 85       	ldd	r23, Y+12	; 0x0c
    178c:	8d 85       	ldd	r24, Y+13	; 0x0d
    178e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	4a ef       	ldi	r20, 0xFA	; 250
    1796:	54 e4       	ldi	r21, 0x44	; 68
    1798:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    179c:	dc 01       	movw	r26, r24
    179e:	cb 01       	movw	r24, r22
    17a0:	8f 83       	std	Y+7, r24	; 0x07
    17a2:	98 87       	std	Y+8, r25	; 0x08
    17a4:	a9 87       	std	Y+9, r26	; 0x09
    17a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17a8:	6f 81       	ldd	r22, Y+7	; 0x07
    17aa:	78 85       	ldd	r23, Y+8	; 0x08
    17ac:	89 85       	ldd	r24, Y+9	; 0x09
    17ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	40 e8       	ldi	r20, 0x80	; 128
    17b6:	5f e3       	ldi	r21, 0x3F	; 63
    17b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    17bc:	88 23       	and	r24, r24
    17be:	2c f4       	brge	.+10     	; 0x17ca <LCD_write+0xb8>
		__ticks = 1;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	9e 83       	std	Y+6, r25	; 0x06
    17c6:	8d 83       	std	Y+5, r24	; 0x05
    17c8:	3f c0       	rjmp	.+126    	; 0x1848 <LCD_write+0x136>
	else if (__tmp > 65535)
    17ca:	6f 81       	ldd	r22, Y+7	; 0x07
    17cc:	78 85       	ldd	r23, Y+8	; 0x08
    17ce:	89 85       	ldd	r24, Y+9	; 0x09
    17d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d2:	20 e0       	ldi	r18, 0x00	; 0
    17d4:	3f ef       	ldi	r19, 0xFF	; 255
    17d6:	4f e7       	ldi	r20, 0x7F	; 127
    17d8:	57 e4       	ldi	r21, 0x47	; 71
    17da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    17de:	18 16       	cp	r1, r24
    17e0:	4c f5       	brge	.+82     	; 0x1834 <LCD_write+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ea:	20 e0       	ldi	r18, 0x00	; 0
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	40 e2       	ldi	r20, 0x20	; 32
    17f0:	51 e4       	ldi	r21, 0x41	; 65
    17f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f6:	dc 01       	movw	r26, r24
    17f8:	cb 01       	movw	r24, r22
    17fa:	bc 01       	movw	r22, r24
    17fc:	cd 01       	movw	r24, r26
    17fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	9e 83       	std	Y+6, r25	; 0x06
    1808:	8d 83       	std	Y+5, r24	; 0x05
    180a:	0f c0       	rjmp	.+30     	; 0x182a <LCD_write+0x118>
    180c:	88 ec       	ldi	r24, 0xC8	; 200
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	9c 83       	std	Y+4, r25	; 0x04
    1812:	8b 83       	std	Y+3, r24	; 0x03
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	01 97       	sbiw	r24, 0x01	; 1
    181a:	f1 f7       	brne	.-4      	; 0x1818 <LCD_write+0x106>
    181c:	9c 83       	std	Y+4, r25	; 0x04
    181e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1820:	8d 81       	ldd	r24, Y+5	; 0x05
    1822:	9e 81       	ldd	r25, Y+6	; 0x06
    1824:	01 97       	sbiw	r24, 0x01	; 1
    1826:	9e 83       	std	Y+6, r25	; 0x06
    1828:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182a:	8d 81       	ldd	r24, Y+5	; 0x05
    182c:	9e 81       	ldd	r25, Y+6	; 0x06
    182e:	00 97       	sbiw	r24, 0x00	; 0
    1830:	69 f7       	brne	.-38     	; 0x180c <LCD_write+0xfa>
    1832:	14 c0       	rjmp	.+40     	; 0x185c <LCD_write+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1834:	6f 81       	ldd	r22, Y+7	; 0x07
    1836:	78 85       	ldd	r23, Y+8	; 0x08
    1838:	89 85       	ldd	r24, Y+9	; 0x09
    183a:	9a 85       	ldd	r25, Y+10	; 0x0a
    183c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1840:	dc 01       	movw	r26, r24
    1842:	cb 01       	movw	r24, r22
    1844:	9e 83       	std	Y+6, r25	; 0x06
    1846:	8d 83       	std	Y+5, r24	; 0x05
    1848:	8d 81       	ldd	r24, Y+5	; 0x05
    184a:	9e 81       	ldd	r25, Y+6	; 0x06
    184c:	9a 83       	std	Y+2, r25	; 0x02
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	9a 81       	ldd	r25, Y+2	; 0x02
    1854:	01 97       	sbiw	r24, 0x01	; 1
    1856:	f1 f7       	brne	.-4      	; 0x1854 <LCD_write+0x142>
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);											//pulse for know instruction is coming
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_Low);//pulse for know instruction is coming
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	62 e0       	ldi	r22, 0x02	; 2
    1860:	40 e0       	ldi	r20, 0x00	; 0
    1862:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_set_pin_value>
}
    1866:	61 96       	adiw	r28, 0x11	; 17
    1868:	0f b6       	in	r0, 0x3f	; 63
    186a:	f8 94       	cli
    186c:	de bf       	out	0x3e, r29	; 62
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	cd bf       	out	0x3d, r28	; 61
    1872:	cf 91       	pop	r28
    1874:	df 91       	pop	r29
    1876:	08 95       	ret

00001878 <LCD_Intialization>:

void LCD_Intialization(void){
    1878:	0f 93       	push	r16
    187a:	1f 93       	push	r17
    187c:	df 93       	push	r29
    187e:	cf 93       	push	r28
    1880:	cd b7       	in	r28, 0x3d	; 61
    1882:	de b7       	in	r29, 0x3e	; 62
    1884:	cc 54       	subi	r28, 0x4C	; 76
    1886:	d0 40       	sbci	r29, 0x00	; 0
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
	DIO_set_port_direction(LCD_Data_Port,DIO_max_port_direction);
    1892:	83 e0       	ldi	r24, 0x03	; 3
    1894:	6f ef       	ldi	r22, 0xFF	; 255
    1896:	0e 94 1d 09 	call	0x123a	; 0x123a <DIO_set_port_direction>
	DIO_set_pin_direction(LCD_Control_Port,LCD_RS_Pin,DIO_Output);
    189a:	81 e0       	ldi	r24, 0x01	; 1
    189c:	60 e0       	ldi	r22, 0x00	; 0
    189e:	41 e0       	ldi	r20, 0x01	; 1
    18a0:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_set_pin_direction>
	DIO_set_pin_direction(LCD_Control_Port,LCD_RW_Pin,DIO_Output);
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	61 e0       	ldi	r22, 0x01	; 1
    18a8:	41 e0       	ldi	r20, 0x01	; 1
    18aa:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_set_pin_direction>
	DIO_set_pin_direction(LCD_Control_Port,LCD_E_Pin,DIO_Output);
    18ae:	81 e0       	ldi	r24, 0x01	; 1
    18b0:	62 e0       	ldi	r22, 0x02	; 2
    18b2:	41 e0       	ldi	r20, 0x01	; 1
    18b4:	0e 94 42 07 	call	0xe84	; 0xe84 <DIO_set_pin_direction>
    18b8:	fe 01       	movw	r30, r28
    18ba:	e7 5b       	subi	r30, 0xB7	; 183
    18bc:	ff 4f       	sbci	r31, 0xFF	; 255
    18be:	80 e0       	ldi	r24, 0x00	; 0
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	a0 e2       	ldi	r26, 0x20	; 32
    18c4:	b2 e4       	ldi	r27, 0x42	; 66
    18c6:	80 83       	st	Z, r24
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	a2 83       	std	Z+2, r26	; 0x02
    18cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ce:	8e 01       	movw	r16, r28
    18d0:	0b 5b       	subi	r16, 0xBB	; 187
    18d2:	1f 4f       	sbci	r17, 0xFF	; 255
    18d4:	fe 01       	movw	r30, r28
    18d6:	e7 5b       	subi	r30, 0xB7	; 183
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	60 81       	ld	r22, Z
    18dc:	71 81       	ldd	r23, Z+1	; 0x01
    18de:	82 81       	ldd	r24, Z+2	; 0x02
    18e0:	93 81       	ldd	r25, Z+3	; 0x03
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	4a ef       	ldi	r20, 0xFA	; 250
    18e8:	54 e4       	ldi	r21, 0x44	; 68
    18ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	f8 01       	movw	r30, r16
    18f4:	80 83       	st	Z, r24
    18f6:	91 83       	std	Z+1, r25	; 0x01
    18f8:	a2 83       	std	Z+2, r26	; 0x02
    18fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18fc:	fe 01       	movw	r30, r28
    18fe:	eb 5b       	subi	r30, 0xBB	; 187
    1900:	ff 4f       	sbci	r31, 0xFF	; 255
    1902:	60 81       	ld	r22, Z
    1904:	71 81       	ldd	r23, Z+1	; 0x01
    1906:	82 81       	ldd	r24, Z+2	; 0x02
    1908:	93 81       	ldd	r25, Z+3	; 0x03
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	40 e8       	ldi	r20, 0x80	; 128
    1910:	5f e3       	ldi	r21, 0x3F	; 63
    1912:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1916:	88 23       	and	r24, r24
    1918:	44 f4       	brge	.+16     	; 0x192a <LCD_Intialization+0xb2>
		__ticks = 1;
    191a:	fe 01       	movw	r30, r28
    191c:	ed 5b       	subi	r30, 0xBD	; 189
    191e:	ff 4f       	sbci	r31, 0xFF	; 255
    1920:	81 e0       	ldi	r24, 0x01	; 1
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	91 83       	std	Z+1, r25	; 0x01
    1926:	80 83       	st	Z, r24
    1928:	64 c0       	rjmp	.+200    	; 0x19f2 <LCD_Intialization+0x17a>
	else if (__tmp > 65535)
    192a:	fe 01       	movw	r30, r28
    192c:	eb 5b       	subi	r30, 0xBB	; 187
    192e:	ff 4f       	sbci	r31, 0xFF	; 255
    1930:	60 81       	ld	r22, Z
    1932:	71 81       	ldd	r23, Z+1	; 0x01
    1934:	82 81       	ldd	r24, Z+2	; 0x02
    1936:	93 81       	ldd	r25, Z+3	; 0x03
    1938:	20 e0       	ldi	r18, 0x00	; 0
    193a:	3f ef       	ldi	r19, 0xFF	; 255
    193c:	4f e7       	ldi	r20, 0x7F	; 127
    193e:	57 e4       	ldi	r21, 0x47	; 71
    1940:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1944:	18 16       	cp	r1, r24
    1946:	0c f0       	brlt	.+2      	; 0x194a <LCD_Intialization+0xd2>
    1948:	43 c0       	rjmp	.+134    	; 0x19d0 <LCD_Intialization+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    194a:	fe 01       	movw	r30, r28
    194c:	e7 5b       	subi	r30, 0xB7	; 183
    194e:	ff 4f       	sbci	r31, 0xFF	; 255
    1950:	60 81       	ld	r22, Z
    1952:	71 81       	ldd	r23, Z+1	; 0x01
    1954:	82 81       	ldd	r24, Z+2	; 0x02
    1956:	93 81       	ldd	r25, Z+3	; 0x03
    1958:	20 e0       	ldi	r18, 0x00	; 0
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	40 e2       	ldi	r20, 0x20	; 32
    195e:	51 e4       	ldi	r21, 0x41	; 65
    1960:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1964:	dc 01       	movw	r26, r24
    1966:	cb 01       	movw	r24, r22
    1968:	8e 01       	movw	r16, r28
    196a:	0d 5b       	subi	r16, 0xBD	; 189
    196c:	1f 4f       	sbci	r17, 0xFF	; 255
    196e:	bc 01       	movw	r22, r24
    1970:	cd 01       	movw	r24, r26
    1972:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	f8 01       	movw	r30, r16
    197c:	91 83       	std	Z+1, r25	; 0x01
    197e:	80 83       	st	Z, r24
    1980:	1f c0       	rjmp	.+62     	; 0x19c0 <LCD_Intialization+0x148>
    1982:	fe 01       	movw	r30, r28
    1984:	ef 5b       	subi	r30, 0xBF	; 191
    1986:	ff 4f       	sbci	r31, 0xFF	; 255
    1988:	88 ec       	ldi	r24, 0xC8	; 200
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	80 83       	st	Z, r24
    1990:	fe 01       	movw	r30, r28
    1992:	ef 5b       	subi	r30, 0xBF	; 191
    1994:	ff 4f       	sbci	r31, 0xFF	; 255
    1996:	80 81       	ld	r24, Z
    1998:	91 81       	ldd	r25, Z+1	; 0x01
    199a:	01 97       	sbiw	r24, 0x01	; 1
    199c:	f1 f7       	brne	.-4      	; 0x199a <LCD_Intialization+0x122>
    199e:	fe 01       	movw	r30, r28
    19a0:	ef 5b       	subi	r30, 0xBF	; 191
    19a2:	ff 4f       	sbci	r31, 0xFF	; 255
    19a4:	91 83       	std	Z+1, r25	; 0x01
    19a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19a8:	de 01       	movw	r26, r28
    19aa:	ad 5b       	subi	r26, 0xBD	; 189
    19ac:	bf 4f       	sbci	r27, 0xFF	; 255
    19ae:	fe 01       	movw	r30, r28
    19b0:	ed 5b       	subi	r30, 0xBD	; 189
    19b2:	ff 4f       	sbci	r31, 0xFF	; 255
    19b4:	80 81       	ld	r24, Z
    19b6:	91 81       	ldd	r25, Z+1	; 0x01
    19b8:	01 97       	sbiw	r24, 0x01	; 1
    19ba:	11 96       	adiw	r26, 0x01	; 1
    19bc:	9c 93       	st	X, r25
    19be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c0:	fe 01       	movw	r30, r28
    19c2:	ed 5b       	subi	r30, 0xBD	; 189
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	80 81       	ld	r24, Z
    19c8:	91 81       	ldd	r25, Z+1	; 0x01
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	d1 f6       	brne	.-76     	; 0x1982 <LCD_Intialization+0x10a>
    19ce:	24 c0       	rjmp	.+72     	; 0x1a18 <LCD_Intialization+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19d0:	8e 01       	movw	r16, r28
    19d2:	0d 5b       	subi	r16, 0xBD	; 189
    19d4:	1f 4f       	sbci	r17, 0xFF	; 255
    19d6:	fe 01       	movw	r30, r28
    19d8:	eb 5b       	subi	r30, 0xBB	; 187
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	60 81       	ld	r22, Z
    19de:	71 81       	ldd	r23, Z+1	; 0x01
    19e0:	82 81       	ldd	r24, Z+2	; 0x02
    19e2:	93 81       	ldd	r25, Z+3	; 0x03
    19e4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	f8 01       	movw	r30, r16
    19ee:	91 83       	std	Z+1, r25	; 0x01
    19f0:	80 83       	st	Z, r24
    19f2:	fe 01       	movw	r30, r28
    19f4:	ed 5b       	subi	r30, 0xBD	; 189
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	80 81       	ld	r24, Z
    19fa:	91 81       	ldd	r25, Z+1	; 0x01
    19fc:	fe 01       	movw	r30, r28
    19fe:	ff 96       	adiw	r30, 0x3f	; 63
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	80 83       	st	Z, r24
    1a04:	fe 01       	movw	r30, r28
    1a06:	ff 96       	adiw	r30, 0x3f	; 63
    1a08:	80 81       	ld	r24, Z
    1a0a:	91 81       	ldd	r25, Z+1	; 0x01
    1a0c:	01 97       	sbiw	r24, 0x01	; 1
    1a0e:	f1 f7       	brne	.-4      	; 0x1a0c <LCD_Intialization+0x194>
    1a10:	fe 01       	movw	r30, r28
    1a12:	ff 96       	adiw	r30, 0x3f	; 63
    1a14:	91 83       	std	Z+1, r25	; 0x01
    1a16:	80 83       	st	Z, r24
	_delay_ms(40);
	LCD_write_cmd(0b00111000);
    1a18:	88 e3       	ldi	r24, 0x38	; 56
    1a1a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_write_cmd>
    1a1e:	80 e0       	ldi	r24, 0x00	; 0
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a8 e4       	ldi	r26, 0x48	; 72
    1a24:	b2 e4       	ldi	r27, 0x42	; 66
    1a26:	8b af       	std	Y+59, r24	; 0x3b
    1a28:	9c af       	std	Y+60, r25	; 0x3c
    1a2a:	ad af       	std	Y+61, r26	; 0x3d
    1a2c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a2e:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a30:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a32:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a34:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a36:	2b ea       	ldi	r18, 0xAB	; 171
    1a38:	3a ea       	ldi	r19, 0xAA	; 170
    1a3a:	4a e2       	ldi	r20, 0x2A	; 42
    1a3c:	50 e4       	ldi	r21, 0x40	; 64
    1a3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a42:	dc 01       	movw	r26, r24
    1a44:	cb 01       	movw	r24, r22
    1a46:	8f ab       	std	Y+55, r24	; 0x37
    1a48:	98 af       	std	Y+56, r25	; 0x38
    1a4a:	a9 af       	std	Y+57, r26	; 0x39
    1a4c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1a4e:	6f a9       	ldd	r22, Y+55	; 0x37
    1a50:	78 ad       	ldd	r23, Y+56	; 0x38
    1a52:	89 ad       	ldd	r24, Y+57	; 0x39
    1a54:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a56:	20 e0       	ldi	r18, 0x00	; 0
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	40 e8       	ldi	r20, 0x80	; 128
    1a5c:	5f e3       	ldi	r21, 0x3F	; 63
    1a5e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a62:	88 23       	and	r24, r24
    1a64:	1c f4       	brge	.+6      	; 0x1a6c <LCD_Intialization+0x1f4>
		__ticks = 1;
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	8e ab       	std	Y+54, r24	; 0x36
    1a6a:	91 c0       	rjmp	.+290    	; 0x1b8e <LCD_Intialization+0x316>
	else if (__tmp > 255)
    1a6c:	6f a9       	ldd	r22, Y+55	; 0x37
    1a6e:	78 ad       	ldd	r23, Y+56	; 0x38
    1a70:	89 ad       	ldd	r24, Y+57	; 0x39
    1a72:	9a ad       	ldd	r25, Y+58	; 0x3a
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	4f e7       	ldi	r20, 0x7F	; 127
    1a7a:	53 e4       	ldi	r21, 0x43	; 67
    1a7c:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a80:	18 16       	cp	r1, r24
    1a82:	0c f0       	brlt	.+2      	; 0x1a86 <LCD_Intialization+0x20e>
    1a84:	7b c0       	rjmp	.+246    	; 0x1b7c <LCD_Intialization+0x304>
	{
		_delay_ms(__us / 1000.0);
    1a86:	6b ad       	ldd	r22, Y+59	; 0x3b
    1a88:	7c ad       	ldd	r23, Y+60	; 0x3c
    1a8a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a8c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	4a e7       	ldi	r20, 0x7A	; 122
    1a94:	54 e4       	ldi	r21, 0x44	; 68
    1a96:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	8a ab       	std	Y+50, r24	; 0x32
    1aa0:	9b ab       	std	Y+51, r25	; 0x33
    1aa2:	ac ab       	std	Y+52, r26	; 0x34
    1aa4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa6:	6a a9       	ldd	r22, Y+50	; 0x32
    1aa8:	7b a9       	ldd	r23, Y+51	; 0x33
    1aaa:	8c a9       	ldd	r24, Y+52	; 0x34
    1aac:	9d a9       	ldd	r25, Y+53	; 0x35
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	4a ef       	ldi	r20, 0xFA	; 250
    1ab4:	54 e4       	ldi	r21, 0x44	; 68
    1ab6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1aba:	dc 01       	movw	r26, r24
    1abc:	cb 01       	movw	r24, r22
    1abe:	8e a7       	std	Y+46, r24	; 0x2e
    1ac0:	9f a7       	std	Y+47, r25	; 0x2f
    1ac2:	a8 ab       	std	Y+48, r26	; 0x30
    1ac4:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1ac6:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ac8:	7f a5       	ldd	r23, Y+47	; 0x2f
    1aca:	88 a9       	ldd	r24, Y+48	; 0x30
    1acc:	99 a9       	ldd	r25, Y+49	; 0x31
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e8       	ldi	r20, 0x80	; 128
    1ad4:	5f e3       	ldi	r21, 0x3F	; 63
    1ad6:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ada:	88 23       	and	r24, r24
    1adc:	2c f4       	brge	.+10     	; 0x1ae8 <LCD_Intialization+0x270>
		__ticks = 1;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	90 e0       	ldi	r25, 0x00	; 0
    1ae2:	9d a7       	std	Y+45, r25	; 0x2d
    1ae4:	8c a7       	std	Y+44, r24	; 0x2c
    1ae6:	3f c0       	rjmp	.+126    	; 0x1b66 <LCD_Intialization+0x2ee>
	else if (__tmp > 65535)
    1ae8:	6e a5       	ldd	r22, Y+46	; 0x2e
    1aea:	7f a5       	ldd	r23, Y+47	; 0x2f
    1aec:	88 a9       	ldd	r24, Y+48	; 0x30
    1aee:	99 a9       	ldd	r25, Y+49	; 0x31
    1af0:	20 e0       	ldi	r18, 0x00	; 0
    1af2:	3f ef       	ldi	r19, 0xFF	; 255
    1af4:	4f e7       	ldi	r20, 0x7F	; 127
    1af6:	57 e4       	ldi	r21, 0x47	; 71
    1af8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1afc:	18 16       	cp	r1, r24
    1afe:	4c f5       	brge	.+82     	; 0x1b52 <LCD_Intialization+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b00:	6a a9       	ldd	r22, Y+50	; 0x32
    1b02:	7b a9       	ldd	r23, Y+51	; 0x33
    1b04:	8c a9       	ldd	r24, Y+52	; 0x34
    1b06:	9d a9       	ldd	r25, Y+53	; 0x35
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	40 e2       	ldi	r20, 0x20	; 32
    1b0e:	51 e4       	ldi	r21, 0x41	; 65
    1b10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	bc 01       	movw	r22, r24
    1b1a:	cd 01       	movw	r24, r26
    1b1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b20:	dc 01       	movw	r26, r24
    1b22:	cb 01       	movw	r24, r22
    1b24:	9d a7       	std	Y+45, r25	; 0x2d
    1b26:	8c a7       	std	Y+44, r24	; 0x2c
    1b28:	0f c0       	rjmp	.+30     	; 0x1b48 <LCD_Intialization+0x2d0>
    1b2a:	88 ec       	ldi	r24, 0xC8	; 200
    1b2c:	90 e0       	ldi	r25, 0x00	; 0
    1b2e:	9b a7       	std	Y+43, r25	; 0x2b
    1b30:	8a a7       	std	Y+42, r24	; 0x2a
    1b32:	8a a5       	ldd	r24, Y+42	; 0x2a
    1b34:	9b a5       	ldd	r25, Y+43	; 0x2b
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <LCD_Intialization+0x2be>
    1b3a:	9b a7       	std	Y+43, r25	; 0x2b
    1b3c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b40:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b42:	01 97       	sbiw	r24, 0x01	; 1
    1b44:	9d a7       	std	Y+45, r25	; 0x2d
    1b46:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b48:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b4a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	69 f7       	brne	.-38     	; 0x1b2a <LCD_Intialization+0x2b2>
    1b50:	24 c0       	rjmp	.+72     	; 0x1b9a <LCD_Intialization+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b52:	6e a5       	ldd	r22, Y+46	; 0x2e
    1b54:	7f a5       	ldd	r23, Y+47	; 0x2f
    1b56:	88 a9       	ldd	r24, Y+48	; 0x30
    1b58:	99 a9       	ldd	r25, Y+49	; 0x31
    1b5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b5e:	dc 01       	movw	r26, r24
    1b60:	cb 01       	movw	r24, r22
    1b62:	9d a7       	std	Y+45, r25	; 0x2d
    1b64:	8c a7       	std	Y+44, r24	; 0x2c
    1b66:	8c a5       	ldd	r24, Y+44	; 0x2c
    1b68:	9d a5       	ldd	r25, Y+45	; 0x2d
    1b6a:	99 a7       	std	Y+41, r25	; 0x29
    1b6c:	88 a7       	std	Y+40, r24	; 0x28
    1b6e:	88 a5       	ldd	r24, Y+40	; 0x28
    1b70:	99 a5       	ldd	r25, Y+41	; 0x29
    1b72:	01 97       	sbiw	r24, 0x01	; 1
    1b74:	f1 f7       	brne	.-4      	; 0x1b72 <LCD_Intialization+0x2fa>
    1b76:	99 a7       	std	Y+41, r25	; 0x29
    1b78:	88 a7       	std	Y+40, r24	; 0x28
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <LCD_Intialization+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b7c:	6f a9       	ldd	r22, Y+55	; 0x37
    1b7e:	78 ad       	ldd	r23, Y+56	; 0x38
    1b80:	89 ad       	ldd	r24, Y+57	; 0x39
    1b82:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	8e ab       	std	Y+54, r24	; 0x36
    1b8e:	8e a9       	ldd	r24, Y+54	; 0x36
    1b90:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b92:	8f a1       	ldd	r24, Y+39	; 0x27
    1b94:	8a 95       	dec	r24
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <LCD_Intialization+0x31c>
    1b98:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	LCD_write_cmd(0b00001100);
    1b9a:	8c e0       	ldi	r24, 0x0C	; 12
    1b9c:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_write_cmd>
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	a8 e4       	ldi	r26, 0x48	; 72
    1ba6:	b2 e4       	ldi	r27, 0x42	; 66
    1ba8:	8b a3       	std	Y+35, r24	; 0x23
    1baa:	9c a3       	std	Y+36, r25	; 0x24
    1bac:	ad a3       	std	Y+37, r26	; 0x25
    1bae:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1bb0:	6b a1       	ldd	r22, Y+35	; 0x23
    1bb2:	7c a1       	ldd	r23, Y+36	; 0x24
    1bb4:	8d a1       	ldd	r24, Y+37	; 0x25
    1bb6:	9e a1       	ldd	r25, Y+38	; 0x26
    1bb8:	2b ea       	ldi	r18, 0xAB	; 171
    1bba:	3a ea       	ldi	r19, 0xAA	; 170
    1bbc:	4a e2       	ldi	r20, 0x2A	; 42
    1bbe:	50 e4       	ldi	r21, 0x40	; 64
    1bc0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc4:	dc 01       	movw	r26, r24
    1bc6:	cb 01       	movw	r24, r22
    1bc8:	8f 8f       	std	Y+31, r24	; 0x1f
    1bca:	98 a3       	std	Y+32, r25	; 0x20
    1bcc:	a9 a3       	std	Y+33, r26	; 0x21
    1bce:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1bd0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bd2:	78 a1       	ldd	r23, Y+32	; 0x20
    1bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    1bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    1bd8:	20 e0       	ldi	r18, 0x00	; 0
    1bda:	30 e0       	ldi	r19, 0x00	; 0
    1bdc:	40 e8       	ldi	r20, 0x80	; 128
    1bde:	5f e3       	ldi	r21, 0x3F	; 63
    1be0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1be4:	88 23       	and	r24, r24
    1be6:	1c f4       	brge	.+6      	; 0x1bee <LCD_Intialization+0x376>
		__ticks = 1;
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	8e 8f       	std	Y+30, r24	; 0x1e
    1bec:	91 c0       	rjmp	.+290    	; 0x1d10 <LCD_Intialization+0x498>
	else if (__tmp > 255)
    1bee:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1bf0:	78 a1       	ldd	r23, Y+32	; 0x20
    1bf2:	89 a1       	ldd	r24, Y+33	; 0x21
    1bf4:	9a a1       	ldd	r25, Y+34	; 0x22
    1bf6:	20 e0       	ldi	r18, 0x00	; 0
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	4f e7       	ldi	r20, 0x7F	; 127
    1bfc:	53 e4       	ldi	r21, 0x43	; 67
    1bfe:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c02:	18 16       	cp	r1, r24
    1c04:	0c f0       	brlt	.+2      	; 0x1c08 <LCD_Intialization+0x390>
    1c06:	7b c0       	rjmp	.+246    	; 0x1cfe <LCD_Intialization+0x486>
	{
		_delay_ms(__us / 1000.0);
    1c08:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0a:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0c:	8d a1       	ldd	r24, Y+37	; 0x25
    1c0e:	9e a1       	ldd	r25, Y+38	; 0x26
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	4a e7       	ldi	r20, 0x7A	; 122
    1c16:	54 e4       	ldi	r21, 0x44	; 68
    1c18:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	8a 8f       	std	Y+26, r24	; 0x1a
    1c22:	9b 8f       	std	Y+27, r25	; 0x1b
    1c24:	ac 8f       	std	Y+28, r26	; 0x1c
    1c26:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c28:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c2a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c2c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c2e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c30:	20 e0       	ldi	r18, 0x00	; 0
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	4a ef       	ldi	r20, 0xFA	; 250
    1c36:	54 e4       	ldi	r21, 0x44	; 68
    1c38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c3c:	dc 01       	movw	r26, r24
    1c3e:	cb 01       	movw	r24, r22
    1c40:	8e 8b       	std	Y+22, r24	; 0x16
    1c42:	9f 8b       	std	Y+23, r25	; 0x17
    1c44:	a8 8f       	std	Y+24, r26	; 0x18
    1c46:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1c48:	6e 89       	ldd	r22, Y+22	; 0x16
    1c4a:	7f 89       	ldd	r23, Y+23	; 0x17
    1c4c:	88 8d       	ldd	r24, Y+24	; 0x18
    1c4e:	99 8d       	ldd	r25, Y+25	; 0x19
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	40 e8       	ldi	r20, 0x80	; 128
    1c56:	5f e3       	ldi	r21, 0x3F	; 63
    1c58:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1c5c:	88 23       	and	r24, r24
    1c5e:	2c f4       	brge	.+10     	; 0x1c6a <LCD_Intialization+0x3f2>
		__ticks = 1;
    1c60:	81 e0       	ldi	r24, 0x01	; 1
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	9d 8b       	std	Y+21, r25	; 0x15
    1c66:	8c 8b       	std	Y+20, r24	; 0x14
    1c68:	3f c0       	rjmp	.+126    	; 0x1ce8 <LCD_Intialization+0x470>
	else if (__tmp > 65535)
    1c6a:	6e 89       	ldd	r22, Y+22	; 0x16
    1c6c:	7f 89       	ldd	r23, Y+23	; 0x17
    1c6e:	88 8d       	ldd	r24, Y+24	; 0x18
    1c70:	99 8d       	ldd	r25, Y+25	; 0x19
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	3f ef       	ldi	r19, 0xFF	; 255
    1c76:	4f e7       	ldi	r20, 0x7F	; 127
    1c78:	57 e4       	ldi	r21, 0x47	; 71
    1c7a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1c7e:	18 16       	cp	r1, r24
    1c80:	4c f5       	brge	.+82     	; 0x1cd4 <LCD_Intialization+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c82:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1c84:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1c86:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1c88:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1c8a:	20 e0       	ldi	r18, 0x00	; 0
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	40 e2       	ldi	r20, 0x20	; 32
    1c90:	51 e4       	ldi	r21, 0x41	; 65
    1c92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	bc 01       	movw	r22, r24
    1c9c:	cd 01       	movw	r24, r26
    1c9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9d 8b       	std	Y+21, r25	; 0x15
    1ca8:	8c 8b       	std	Y+20, r24	; 0x14
    1caa:	0f c0       	rjmp	.+30     	; 0x1cca <LCD_Intialization+0x452>
    1cac:	88 ec       	ldi	r24, 0xC8	; 200
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9b 8b       	std	Y+19, r25	; 0x13
    1cb2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cb4:	8a 89       	ldd	r24, Y+18	; 0x12
    1cb6:	9b 89       	ldd	r25, Y+19	; 0x13
    1cb8:	01 97       	sbiw	r24, 0x01	; 1
    1cba:	f1 f7       	brne	.-4      	; 0x1cb8 <LCD_Intialization+0x440>
    1cbc:	9b 8b       	std	Y+19, r25	; 0x13
    1cbe:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc0:	8c 89       	ldd	r24, Y+20	; 0x14
    1cc2:	9d 89       	ldd	r25, Y+21	; 0x15
    1cc4:	01 97       	sbiw	r24, 0x01	; 1
    1cc6:	9d 8b       	std	Y+21, r25	; 0x15
    1cc8:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cca:	8c 89       	ldd	r24, Y+20	; 0x14
    1ccc:	9d 89       	ldd	r25, Y+21	; 0x15
    1cce:	00 97       	sbiw	r24, 0x00	; 0
    1cd0:	69 f7       	brne	.-38     	; 0x1cac <LCD_Intialization+0x434>
    1cd2:	24 c0       	rjmp	.+72     	; 0x1d1c <LCD_Intialization+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd4:	6e 89       	ldd	r22, Y+22	; 0x16
    1cd6:	7f 89       	ldd	r23, Y+23	; 0x17
    1cd8:	88 8d       	ldd	r24, Y+24	; 0x18
    1cda:	99 8d       	ldd	r25, Y+25	; 0x19
    1cdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9d 8b       	std	Y+21, r25	; 0x15
    1ce6:	8c 8b       	std	Y+20, r24	; 0x14
    1ce8:	8c 89       	ldd	r24, Y+20	; 0x14
    1cea:	9d 89       	ldd	r25, Y+21	; 0x15
    1cec:	99 8b       	std	Y+17, r25	; 0x11
    1cee:	88 8b       	std	Y+16, r24	; 0x10
    1cf0:	88 89       	ldd	r24, Y+16	; 0x10
    1cf2:	99 89       	ldd	r25, Y+17	; 0x11
    1cf4:	01 97       	sbiw	r24, 0x01	; 1
    1cf6:	f1 f7       	brne	.-4      	; 0x1cf4 <LCD_Intialization+0x47c>
    1cf8:	99 8b       	std	Y+17, r25	; 0x11
    1cfa:	88 8b       	std	Y+16, r24	; 0x10
    1cfc:	0f c0       	rjmp	.+30     	; 0x1d1c <LCD_Intialization+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cfe:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1d00:	78 a1       	ldd	r23, Y+32	; 0x20
    1d02:	89 a1       	ldd	r24, Y+33	; 0x21
    1d04:	9a a1       	ldd	r25, Y+34	; 0x22
    1d06:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	8e 8f       	std	Y+30, r24	; 0x1e
    1d10:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1d12:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d14:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d16:	8a 95       	dec	r24
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_Intialization+0x49e>
    1d1a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_write_cmd(0b00000001);
    1d1c:	81 e0       	ldi	r24, 0x01	; 1
    1d1e:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_write_cmd>
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	a0 e0       	ldi	r26, 0x00	; 0
    1d28:	b0 e4       	ldi	r27, 0x40	; 64
    1d2a:	8b 87       	std	Y+11, r24	; 0x0b
    1d2c:	9c 87       	std	Y+12, r25	; 0x0c
    1d2e:	ad 87       	std	Y+13, r26	; 0x0d
    1d30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	4a ef       	ldi	r20, 0xFA	; 250
    1d40:	54 e4       	ldi	r21, 0x44	; 68
    1d42:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d46:	dc 01       	movw	r26, r24
    1d48:	cb 01       	movw	r24, r22
    1d4a:	8f 83       	std	Y+7, r24	; 0x07
    1d4c:	98 87       	std	Y+8, r25	; 0x08
    1d4e:	a9 87       	std	Y+9, r26	; 0x09
    1d50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d52:	6f 81       	ldd	r22, Y+7	; 0x07
    1d54:	78 85       	ldd	r23, Y+8	; 0x08
    1d56:	89 85       	ldd	r24, Y+9	; 0x09
    1d58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	40 e8       	ldi	r20, 0x80	; 128
    1d60:	5f e3       	ldi	r21, 0x3F	; 63
    1d62:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d66:	88 23       	and	r24, r24
    1d68:	2c f4       	brge	.+10     	; 0x1d74 <LCD_Intialization+0x4fc>
		__ticks = 1;
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9e 83       	std	Y+6, r25	; 0x06
    1d70:	8d 83       	std	Y+5, r24	; 0x05
    1d72:	3f c0       	rjmp	.+126    	; 0x1df2 <LCD_Intialization+0x57a>
	else if (__tmp > 65535)
    1d74:	6f 81       	ldd	r22, Y+7	; 0x07
    1d76:	78 85       	ldd	r23, Y+8	; 0x08
    1d78:	89 85       	ldd	r24, Y+9	; 0x09
    1d7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	3f ef       	ldi	r19, 0xFF	; 255
    1d80:	4f e7       	ldi	r20, 0x7F	; 127
    1d82:	57 e4       	ldi	r21, 0x47	; 71
    1d84:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d88:	18 16       	cp	r1, r24
    1d8a:	4c f5       	brge	.+82     	; 0x1dde <LCD_Intialization+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e2       	ldi	r20, 0x20	; 32
    1d9a:	51 e4       	ldi	r21, 0x41	; 65
    1d9c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	bc 01       	movw	r22, r24
    1da6:	cd 01       	movw	r24, r26
    1da8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	9e 83       	std	Y+6, r25	; 0x06
    1db2:	8d 83       	std	Y+5, r24	; 0x05
    1db4:	0f c0       	rjmp	.+30     	; 0x1dd4 <LCD_Intialization+0x55c>
    1db6:	88 ec       	ldi	r24, 0xC8	; 200
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	9c 83       	std	Y+4, r25	; 0x04
    1dbc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc2:	01 97       	sbiw	r24, 0x01	; 1
    1dc4:	f1 f7       	brne	.-4      	; 0x1dc2 <LCD_Intialization+0x54a>
    1dc6:	9c 83       	std	Y+4, r25	; 0x04
    1dc8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dca:	8d 81       	ldd	r24, Y+5	; 0x05
    1dcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1dce:	01 97       	sbiw	r24, 0x01	; 1
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	69 f7       	brne	.-38     	; 0x1db6 <LCD_Intialization+0x53e>
    1ddc:	14 c0       	rjmp	.+40     	; 0x1e06 <LCD_Intialization+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dde:	6f 81       	ldd	r22, Y+7	; 0x07
    1de0:	78 85       	ldd	r23, Y+8	; 0x08
    1de2:	89 85       	ldd	r24, Y+9	; 0x09
    1de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1dea:	dc 01       	movw	r26, r24
    1dec:	cb 01       	movw	r24, r22
    1dee:	9e 83       	std	Y+6, r25	; 0x06
    1df0:	8d 83       	std	Y+5, r24	; 0x05
    1df2:	8d 81       	ldd	r24, Y+5	; 0x05
    1df4:	9e 81       	ldd	r25, Y+6	; 0x06
    1df6:	9a 83       	std	Y+2, r25	; 0x02
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	89 81       	ldd	r24, Y+1	; 0x01
    1dfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1dfe:	01 97       	sbiw	r24, 0x01	; 1
    1e00:	f1 f7       	brne	.-4      	; 0x1dfe <LCD_Intialization+0x586>
    1e02:	9a 83       	std	Y+2, r25	; 0x02
    1e04:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    1e06:	c4 5b       	subi	r28, 0xB4	; 180
    1e08:	df 4f       	sbci	r29, 0xFF	; 255
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	cf 91       	pop	r28
    1e16:	df 91       	pop	r29
    1e18:	1f 91       	pop	r17
    1e1a:	0f 91       	pop	r16
    1e1c:	08 95       	ret

00001e1e <LCD_WRITE_POS>:

u8 LCD_WRITE_POS(u8*Data,u8 x_pos,u8 y_pos){
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	2a 97       	sbiw	r28, 0x0a	; 10
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	9f 83       	std	Y+7, r25	; 0x07
    1e34:	8e 83       	std	Y+6, r24	; 0x06
    1e36:	68 87       	std	Y+8, r22	; 0x08
    1e38:	49 87       	std	Y+9, r20	; 0x09
	u8 error_stat=0; u8 ddramadd,frist_element=*Data,shifter,j=3;
    1e3a:	1d 82       	std	Y+5, r1	; 0x05
    1e3c:	ee 81       	ldd	r30, Y+6	; 0x06
    1e3e:	ff 81       	ldd	r31, Y+7	; 0x07
    1e40:	80 81       	ld	r24, Z
    1e42:	8b 83       	std	Y+3, r24	; 0x03
    1e44:	83 e0       	ldi	r24, 0x03	; 3
    1e46:	89 83       	std	Y+1, r24	; 0x01
	if ((x_pos<LCD_collom) &&( y_pos<LCD_row))
    1e48:	88 85       	ldd	r24, Y+8	; 0x08
    1e4a:	80 31       	cpi	r24, 0x10	; 16
    1e4c:	98 f5       	brcc	.+102    	; 0x1eb4 <LCD_WRITE_POS+0x96>
    1e4e:	89 85       	ldd	r24, Y+9	; 0x09
    1e50:	82 30       	cpi	r24, 0x02	; 2
    1e52:	80 f5       	brcc	.+96     	; 0x1eb4 <LCD_WRITE_POS+0x96>
	{
		ddramadd= (x_pos + (y_pos*64))|0b10000000;
    1e54:	89 85       	ldd	r24, Y+9	; 0x09
    1e56:	88 2f       	mov	r24, r24
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	00 24       	eor	r0, r0
    1e5c:	96 95       	lsr	r25
    1e5e:	87 95       	ror	r24
    1e60:	07 94       	ror	r0
    1e62:	96 95       	lsr	r25
    1e64:	87 95       	ror	r24
    1e66:	07 94       	ror	r0
    1e68:	98 2f       	mov	r25, r24
    1e6a:	80 2d       	mov	r24, r0
    1e6c:	98 2f       	mov	r25, r24
    1e6e:	88 85       	ldd	r24, Y+8	; 0x08
    1e70:	89 0f       	add	r24, r25
    1e72:	80 68       	ori	r24, 0x80	; 128
    1e74:	8c 83       	std	Y+4, r24	; 0x04
		LCD_write_cmd(ddramadd);
    1e76:	8c 81       	ldd	r24, Y+4	; 0x04
    1e78:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_write_cmd>
    1e7c:	15 c0       	rjmp	.+42     	; 0x1ea8 <LCD_WRITE_POS+0x8a>

		while(*Data!='\0')
		{if(ddramadd==LCD_max_collom_address)
    1e7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e80:	80 39       	cpi	r24, 0x90	; 144
    1e82:	29 f4       	brne	.+10     	; 0x1e8e <LCD_WRITE_POS+0x70>
		{
			ddramadd=LCD_frist_second_collom;
    1e84:	80 ec       	ldi	r24, 0xC0	; 192
    1e86:	8c 83       	std	Y+4, r24	; 0x04
			LCD_write_cmd(ddramadd);}
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	0e 94 65 0b 	call	0x16ca	; 0x16ca <LCD_write_cmd>

		LCD_write_data(*Data);
    1e8e:	ee 81       	ldd	r30, Y+6	; 0x06
    1e90:	ff 81       	ldd	r31, Y+7	; 0x07
    1e92:	80 81       	ld	r24, Z
    1e94:	0e 94 77 0b 	call	0x16ee	; 0x16ee <LCD_write_data>
		Data++;
    1e98:	8e 81       	ldd	r24, Y+6	; 0x06
    1e9a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e9c:	01 96       	adiw	r24, 0x01	; 1
    1e9e:	9f 83       	std	Y+7, r25	; 0x07
    1ea0:	8e 83       	std	Y+6, r24	; 0x06
		ddramadd++;
    1ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea4:	8f 5f       	subi	r24, 0xFF	; 255
    1ea6:	8c 83       	std	Y+4, r24	; 0x04
	if ((x_pos<LCD_collom) &&( y_pos<LCD_row))
	{
		ddramadd= (x_pos + (y_pos*64))|0b10000000;
		LCD_write_cmd(ddramadd);

		while(*Data!='\0')
    1ea8:	ee 81       	ldd	r30, Y+6	; 0x06
    1eaa:	ff 81       	ldd	r31, Y+7	; 0x07
    1eac:	80 81       	ld	r24, Z
    1eae:	88 23       	and	r24, r24
    1eb0:	31 f7       	brne	.-52     	; 0x1e7e <LCD_WRITE_POS+0x60>
    1eb2:	04 c0       	rjmp	.+8      	; 0x1ebc <LCD_WRITE_POS+0x9e>

		}*/

	}else {

		error_stat=1;
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	8d 83       	std	Y+5, r24	; 0x05
		return error_stat;}
    1eb8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eba:	8a 87       	std	Y+10, r24	; 0x0a


}
    1ebc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ebe:	2a 96       	adiw	r28, 0x0a	; 10
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	08 95       	ret

00001ed0 <LCD_WRITE_num>:



u8 LCD_WRITE_num(u32 num)//,u8 x_pos,u8 y_pos)
{u8 rem, arr[20],arr_index=0;
    1ed0:	df 93       	push	r29
    1ed2:	cf 93       	push	r28
    1ed4:	cd b7       	in	r28, 0x3d	; 61
    1ed6:	de b7       	in	r29, 0x3e	; 62
    1ed8:	6b 97       	sbiw	r28, 0x1b	; 27
    1eda:	0f b6       	in	r0, 0x3f	; 63
    1edc:	f8 94       	cli
    1ede:	de bf       	out	0x3e, r29	; 62
    1ee0:	0f be       	out	0x3f, r0	; 63
    1ee2:	cd bf       	out	0x3d, r28	; 61
    1ee4:	6f 8b       	std	Y+23, r22	; 0x17
    1ee6:	78 8f       	std	Y+24, r23	; 0x18
    1ee8:	89 8f       	std	Y+25, r24	; 0x19
    1eea:	9a 8f       	std	Y+26, r25	; 0x1a
    1eec:	19 82       	std	Y+1, r1	; 0x01
	if (num==0)
    1eee:	8f 89       	ldd	r24, Y+23	; 0x17
    1ef0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ef2:	a9 8d       	ldd	r26, Y+25	; 0x19
    1ef4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1ef6:	00 97       	sbiw	r24, 0x00	; 0
    1ef8:	a1 05       	cpc	r26, r1
    1efa:	b1 05       	cpc	r27, r1
    1efc:	f1 f5       	brne	.+124    	; 0x1f7a <LCD_WRITE_num+0xaa>

{
	arr[arr_index]='0';
    1efe:	89 81       	ldd	r24, Y+1	; 0x01
    1f00:	28 2f       	mov	r18, r24
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	ce 01       	movw	r24, r28
    1f06:	03 96       	adiw	r24, 0x03	; 3
    1f08:	fc 01       	movw	r30, r24
    1f0a:	e2 0f       	add	r30, r18
    1f0c:	f3 1f       	adc	r31, r19
    1f0e:	80 e3       	ldi	r24, 0x30	; 48
    1f10:	80 83       	st	Z, r24
		arr_index++;}
    1f12:	89 81       	ldd	r24, Y+1	; 0x01
    1f14:	8f 5f       	subi	r24, 0xFF	; 255
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	30 c0       	rjmp	.+96     	; 0x1f7a <LCD_WRITE_num+0xaa>
	while(num!=0)
	{

	rem= num%10;
    1f1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f1e:	a9 8d       	ldd	r26, Y+25	; 0x19
    1f20:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1f22:	2a e0       	ldi	r18, 0x0A	; 10
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e0       	ldi	r20, 0x00	; 0
    1f28:	50 e0       	ldi	r21, 0x00	; 0
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	cd 01       	movw	r24, r26
    1f2e:	0e 94 0d 12 	call	0x241a	; 0x241a <__udivmodsi4>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	8a 83       	std	Y+2, r24	; 0x02
	arr[arr_index]=rem+'0';//to know ascy for any char add num to ascy ((0)->48) ex know asccy num 5 -> (5+48=53)
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	28 2f       	mov	r18, r24
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	48 2f       	mov	r20, r24
    1f42:	40 5d       	subi	r20, 0xD0	; 208
    1f44:	ce 01       	movw	r24, r28
    1f46:	03 96       	adiw	r24, 0x03	; 3
    1f48:	fc 01       	movw	r30, r24
    1f4a:	e2 0f       	add	r30, r18
    1f4c:	f3 1f       	adc	r31, r19
    1f4e:	40 83       	st	Z, r20
	arr_index++;
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	8f 5f       	subi	r24, 0xFF	; 255
    1f54:	89 83       	std	Y+1, r24	; 0x01
	num = num /10;
    1f56:	8f 89       	ldd	r24, Y+23	; 0x17
    1f58:	98 8d       	ldd	r25, Y+24	; 0x18
    1f5a:	a9 8d       	ldd	r26, Y+25	; 0x19
    1f5c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1f5e:	2a e0       	ldi	r18, 0x0A	; 10
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	40 e0       	ldi	r20, 0x00	; 0
    1f64:	50 e0       	ldi	r21, 0x00	; 0
    1f66:	bc 01       	movw	r22, r24
    1f68:	cd 01       	movw	r24, r26
    1f6a:	0e 94 0d 12 	call	0x241a	; 0x241a <__udivmodsi4>
    1f6e:	da 01       	movw	r26, r20
    1f70:	c9 01       	movw	r24, r18
    1f72:	8f 8b       	std	Y+23, r24	; 0x17
    1f74:	98 8f       	std	Y+24, r25	; 0x18
    1f76:	a9 8f       	std	Y+25, r26	; 0x19
    1f78:	ba 8f       	std	Y+26, r27	; 0x1a
	if (num==0)

{
	arr[arr_index]='0';
		arr_index++;}
	while(num!=0)
    1f7a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f7e:	a9 8d       	ldd	r26, Y+25	; 0x19
    1f80:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	a1 05       	cpc	r26, r1
    1f86:	b1 05       	cpc	r27, r1
    1f88:	41 f6       	brne	.-112    	; 0x1f1a <LCD_WRITE_num+0x4a>
	rem= num%10;
	arr[arr_index]=rem+'0';//to know ascy for any char add num to ascy ((0)->48) ex know asccy num 5 -> (5+48=53)
	arr_index++;
	num = num /10;

	}arr[arr_index]='\0';
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	ce 01       	movw	r24, r28
    1f92:	03 96       	adiw	r24, 0x03	; 3
    1f94:	fc 01       	movw	r30, r24
    1f96:	e2 0f       	add	r30, r18
    1f98:	f3 1f       	adc	r31, r19
    1f9a:	10 82       	st	Z, r1
	reverse(arr,arr_index);
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	03 96       	adiw	r24, 0x03	; 3
    1fa0:	69 81       	ldd	r22, Y+1	; 0x01
    1fa2:	0e 94 e0 0f 	call	0x1fc0	; 0x1fc0 <reverse>

		send_string(arr);//LCD_WRITE_POS(arr,x_pos,y_pos);
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	03 96       	adiw	r24, 0x03	; 3
    1faa:	0e 94 a4 0a 	call	0x1548	; 0x1548 <send_string>



}
    1fae:	6b 96       	adiw	r28, 0x1b	; 27
    1fb0:	0f b6       	in	r0, 0x3f	; 63
    1fb2:	f8 94       	cli
    1fb4:	de bf       	out	0x3e, r29	; 62
    1fb6:	0f be       	out	0x3f, r0	; 63
    1fb8:	cd bf       	out	0x3d, r28	; 61
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <reverse>:
reverse(u8 *arr,u8 length)
{
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <reverse+0x6>
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <reverse+0x8>
    1fc8:	0f 92       	push	r0
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	9c 83       	std	Y+4, r25	; 0x04
    1fd0:	8b 83       	std	Y+3, r24	; 0x03
    1fd2:	6d 83       	std	Y+5, r22	; 0x05
u8 start=0;
    1fd4:	1a 82       	std	Y+2, r1	; 0x02
u8 end=length-1;
    1fd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd8:	81 50       	subi	r24, 0x01	; 1
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	19 c0       	rjmp	.+50     	; 0x2010 <reverse+0x50>
while (start<end)
{
swap(&arr[start],&arr[end]);
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	ac 01       	movw	r20, r24
    1fea:	42 0f       	add	r20, r18
    1fec:	53 1f       	adc	r21, r19
    1fee:	89 81       	ldd	r24, Y+1	; 0x01
    1ff0:	28 2f       	mov	r18, r24
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff8:	28 0f       	add	r18, r24
    1ffa:	39 1f       	adc	r19, r25
    1ffc:	ca 01       	movw	r24, r20
    1ffe:	b9 01       	movw	r22, r18
    2000:	0e 94 14 10 	call	0x2028	; 0x2028 <swap>
start++;
    2004:	8a 81       	ldd	r24, Y+2	; 0x02
    2006:	8f 5f       	subi	r24, 0xFF	; 255
    2008:	8a 83       	std	Y+2, r24	; 0x02
end--;}
    200a:	89 81       	ldd	r24, Y+1	; 0x01
    200c:	81 50       	subi	r24, 0x01	; 1
    200e:	89 83       	std	Y+1, r24	; 0x01
}
reverse(u8 *arr,u8 length)
{
u8 start=0;
u8 end=length-1;
while (start<end)
    2010:	9a 81       	ldd	r25, Y+2	; 0x02
    2012:	89 81       	ldd	r24, Y+1	; 0x01
    2014:	98 17       	cp	r25, r24
    2016:	18 f3       	brcs	.-58     	; 0x1fde <reverse+0x1e>
{
swap(&arr[start],&arr[end]);
start++;
end--;}

}
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <swap>:

void swap (u8 *a,u8 *b)
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	00 d0       	rcall	.+0      	; 0x202e <swap+0x6>
    202e:	00 d0       	rcall	.+0      	; 0x2030 <swap+0x8>
    2030:	0f 92       	push	r0
    2032:	cd b7       	in	r28, 0x3d	; 61
    2034:	de b7       	in	r29, 0x3e	; 62
    2036:	9b 83       	std	Y+3, r25	; 0x03
    2038:	8a 83       	std	Y+2, r24	; 0x02
    203a:	7d 83       	std	Y+5, r23	; 0x05
    203c:	6c 83       	std	Y+4, r22	; 0x04
	u8 z =*a;
    203e:	ea 81       	ldd	r30, Y+2	; 0x02
    2040:	fb 81       	ldd	r31, Y+3	; 0x03
    2042:	80 81       	ld	r24, Z
    2044:	89 83       	std	Y+1, r24	; 0x01
	*a=*b;
    2046:	ec 81       	ldd	r30, Y+4	; 0x04
    2048:	fd 81       	ldd	r31, Y+5	; 0x05
    204a:	80 81       	ld	r24, Z
    204c:	ea 81       	ldd	r30, Y+2	; 0x02
    204e:	fb 81       	ldd	r31, Y+3	; 0x03
    2050:	80 83       	st	Z, r24
		*b=z;
    2052:	ec 81       	ldd	r30, Y+4	; 0x04
    2054:	fd 81       	ldd	r31, Y+5	; 0x05
    2056:	89 81       	ldd	r24, Y+1	; 0x01
    2058:	80 83       	st	Z, r24

}
    205a:	0f 90       	pop	r0
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	cf 91       	pop	r28
    2066:	df 91       	pop	r29
    2068:	08 95       	ret

0000206a <i2c_init_master>:

#include"i2c_interface.h"


void i2c_init_master(void)
{
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62

	TWSR=0b00000000;//bit 0 and 1 config freq
    2072:	e1 e2       	ldi	r30, 0x21	; 33
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	10 82       	st	Z, r1
	TWBR=192;//config freq
    2078:	e0 e2       	ldi	r30, 0x20	; 32
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 ec       	ldi	r24, 0xC0	; 192
    207e:	80 83       	st	Z, r24

}
    2080:	cf 91       	pop	r28
    2082:	df 91       	pop	r29
    2084:	08 95       	ret

00002086 <i2c_start>:


void i2c_start(void)
{
    2086:	df 93       	push	r29
    2088:	cf 93       	push	r28
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62

	TWCR=0b10100100;//start next operation ,start condition, enable i2c , enable interupt flag (disable)
    208e:	e6 e5       	ldi	r30, 0x56	; 86
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	84 ea       	ldi	r24, 0xA4	; 164
    2094:	80 83       	st	Z, r24

	while (get_bit(TWCR,7)==0);
    2096:	e6 e5       	ldi	r30, 0x56	; 86
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	88 23       	and	r24, r24
    209e:	dc f7       	brge	.-10     	; 0x2096 <i2c_start+0x10>





}
    20a0:	cf 91       	pop	r28
    20a2:	df 91       	pop	r29
    20a4:	08 95       	ret

000020a6 <i2c_master_transmit_data>:


void i2c_master_transmit_data(u8 data)
{
    20a6:	df 93       	push	r29
    20a8:	cf 93       	push	r28
    20aa:	0f 92       	push	r0
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
    20b0:	89 83       	std	Y+1, r24	; 0x01
TWDR=data;
    20b2:	e3 e2       	ldi	r30, 0x23	; 35
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	89 81       	ldd	r24, Y+1	; 0x01
    20b8:	80 83       	st	Z, r24
TWCR=0b10000100;//bit 7 start next operation and make flag =0, bit 2 enable i2c
    20ba:	e6 e5       	ldi	r30, 0x56	; 86
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	84 e8       	ldi	r24, 0x84	; 132
    20c0:	80 83       	st	Z, r24
while (get_bit(TWCR,7)==0);
    20c2:	e6 e5       	ldi	r30, 0x56	; 86
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	88 23       	and	r24, r24
    20ca:	dc f7       	brge	.-10     	; 0x20c2 <i2c_master_transmit_data+0x1c>


}
    20cc:	0f 90       	pop	r0
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	08 95       	ret

000020d4 <i2c_master_transmit_address>:

void i2c_master_transmit_address(u8 address)
{
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	0f 92       	push	r0
    20da:	cd b7       	in	r28, 0x3d	; 61
    20dc:	de b7       	in	r29, 0x3e	; 62
    20de:	89 83       	std	Y+1, r24	; 0x01
TWDR=address;
    20e0:	e3 e2       	ldi	r30, 0x23	; 35
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	80 83       	st	Z, r24
TWCR=0b10000100;//bit 7 start next operation and make flag =0, bit 2 enable i2c
    20e8:	e6 e5       	ldi	r30, 0x56	; 86
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	84 e8       	ldi	r24, 0x84	; 132
    20ee:	80 83       	st	Z, r24
while (get_bit(TWCR,7)==0);
    20f0:	e6 e5       	ldi	r30, 0x56	; 86
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	80 81       	ld	r24, Z
    20f6:	88 23       	and	r24, r24
    20f8:	dc f7       	brge	.-10     	; 0x20f0 <i2c_master_transmit_address+0x1c>


}
    20fa:	0f 90       	pop	r0
    20fc:	cf 91       	pop	r28
    20fe:	df 91       	pop	r29
    2100:	08 95       	ret

00002102 <i2c_master_receive_ack>:




u8 i2c_master_receive_ack(void)
{
    2102:	df 93       	push	r29
    2104:	cf 93       	push	r28
    2106:	cd b7       	in	r28, 0x3d	; 61
    2108:	de b7       	in	r29, 0x3e	; 62
	TWCR=0b11000100; //bit6 اول مبعمل ريسيف برد بقول تمام اكنولدج
    210a:	e6 e5       	ldi	r30, 0x56	; 86
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	84 ec       	ldi	r24, 0xC4	; 196
    2110:	80 83       	st	Z, r24
	while (get_bit(TWCR,7)==0);
    2112:	e6 e5       	ldi	r30, 0x56	; 86
    2114:	f0 e0       	ldi	r31, 0x00	; 0
    2116:	80 81       	ld	r24, Z
    2118:	88 23       	and	r24, r24
    211a:	dc f7       	brge	.-10     	; 0x2112 <i2c_master_receive_ack+0x10>

return TWDR;
    211c:	e3 e2       	ldi	r30, 0x23	; 35
    211e:	f0 e0       	ldi	r31, 0x00	; 0
    2120:	80 81       	ld	r24, Z
}
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <i2c_master_receive_not_ack>:


u8 i2c_master_receive_not_ack(void)
{
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
	TWCR=0b10000100; //bit6 اول مبعمل ريسيف برد بقول مش تمام مش اكنولدج
    2130:	e6 e5       	ldi	r30, 0x56	; 86
    2132:	f0 e0       	ldi	r31, 0x00	; 0
    2134:	84 e8       	ldi	r24, 0x84	; 132
    2136:	80 83       	st	Z, r24
	while (get_bit(TWCR,7)==0);
    2138:	e6 e5       	ldi	r30, 0x56	; 86
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	88 23       	and	r24, r24
    2140:	dc f7       	brge	.-10     	; 0x2138 <i2c_master_receive_not_ack+0x10>

return TWDR;
    2142:	e3 e2       	ldi	r30, 0x23	; 35
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
}
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <i2c_stop>:


void i2c_stop(void)
{//data sheet page 175
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
	TWCR=0b10010100;//start next operation ,bit 4 stop condition, enable i2c , enable interupt flag (disable)
    2156:	e6 e5       	ldi	r30, 0x56	; 86
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	84 e9       	ldi	r24, 0x94	; 148
    215c:	80 83       	st	Z, r24

		while (get_bit(TWCR,4)==1);//هو لما بيخلص بيصفر البتايه لوحده
    215e:	e6 e5       	ldi	r30, 0x56	; 86
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	80 81       	ld	r24, Z
    2164:	82 95       	swap	r24
    2166:	8f 70       	andi	r24, 0x0F	; 15
    2168:	88 2f       	mov	r24, r24
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	81 70       	andi	r24, 0x01	; 1
    216e:	90 70       	andi	r25, 0x00	; 0
    2170:	88 23       	and	r24, r24
    2172:	a9 f7       	brne	.-22     	; 0x215e <i2c_stop+0x10>


}
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <i2c_init_slave>:




void i2c_init_slave(u8 slave_address)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	0f 92       	push	r0
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	89 83       	std	Y+1, r24	; 0x01

	TWAR=slave_address;
    2186:	e2 e2       	ldi	r30, 0x22	; 34
    2188:	f0 e0       	ldi	r31, 0x00	; 0
    218a:	89 81       	ldd	r24, Y+1	; 0x01
    218c:	80 83       	st	Z, r24
	TWCR=0b11000100;//bit 7 خد بالك لو حد كلمك وبعتلك عنوانك, bit 6 acnoledg, bit 3 enable i2c
    218e:	e6 e5       	ldi	r30, 0x56	; 86
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	84 ec       	ldi	r24, 0xC4	; 196
    2194:	80 83       	st	Z, r24



}
    2196:	0f 90       	pop	r0
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <i2c_listen>:

//متخرجش منها غير لما حد يكلمني
void i2c_listen(void)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
	while (get_bit(TWCR,7)==0);
    21a6:	e6 e5       	ldi	r30, 0x56	; 86
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	88 23       	and	r24, r24
    21ae:	dc f7       	brge	.-10     	; 0x21a6 <i2c_listen+0x8>

}
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	08 95       	ret

000021b6 <i2c_slave_transmit_data>:


void i2c_slave_transmit_data(u8 data)
{
    21b6:	df 93       	push	r29
    21b8:	cf 93       	push	r28
    21ba:	0f 92       	push	r0
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	89 83       	std	Y+1, r24	; 0x01
TWDR=data;
    21c2:	e3 e2       	ldi	r30, 0x23	; 35
    21c4:	f0 e0       	ldi	r31, 0x00	; 0
    21c6:	89 81       	ldd	r24, Y+1	; 0x01
    21c8:	80 83       	st	Z, r24
TWCR=0b10000100;//bit 7 start next operation and make flag =0, bit 2 enable i2c
    21ca:	e6 e5       	ldi	r30, 0x56	; 86
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	84 e8       	ldi	r24, 0x84	; 132
    21d0:	80 83       	st	Z, r24
while (get_bit(TWCR,7)==0);
    21d2:	e6 e5       	ldi	r30, 0x56	; 86
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	88 23       	and	r24, r24
    21da:	dc f7       	brge	.-10     	; 0x21d2 <i2c_slave_transmit_data+0x1c>


}
    21dc:	0f 90       	pop	r0
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	08 95       	ret

000021e4 <i2c_slave_receive_ack>:


u8 i2c_slave_receive_ack(void)
{
    21e4:	df 93       	push	r29
    21e6:	cf 93       	push	r28
    21e8:	cd b7       	in	r28, 0x3d	; 61
    21ea:	de b7       	in	r29, 0x3e	; 62
	TWCR=0b11000100; //bit6 اول مبعمل ريسيف برد بقول تمام اكنولدج
    21ec:	e6 e5       	ldi	r30, 0x56	; 86
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	84 ec       	ldi	r24, 0xC4	; 196
    21f2:	80 83       	st	Z, r24
	while (get_bit(TWCR,7)==0);
    21f4:	e6 e5       	ldi	r30, 0x56	; 86
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	88 23       	and	r24, r24
    21fc:	dc f7       	brge	.-10     	; 0x21f4 <i2c_slave_receive_ack+0x10>

return TWDR;
    21fe:	e3 e2       	ldi	r30, 0x23	; 35
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	80 81       	ld	r24, Z
}
    2204:	cf 91       	pop	r28
    2206:	df 91       	pop	r29
    2208:	08 95       	ret

0000220a <i2c_slave_receive_not_ack>:


u8 i2c_slave_receive_not_ack(void)
{
    220a:	df 93       	push	r29
    220c:	cf 93       	push	r28
    220e:	cd b7       	in	r28, 0x3d	; 61
    2210:	de b7       	in	r29, 0x3e	; 62
	TWCR=0b10000100; //bit6 اول مبعمل ريسيف برد بقول مش تمام مش اكنولدج
    2212:	e6 e5       	ldi	r30, 0x56	; 86
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	84 e8       	ldi	r24, 0x84	; 132
    2218:	80 83       	st	Z, r24
	while (get_bit(TWCR,7)==0);
    221a:	e6 e5       	ldi	r30, 0x56	; 86
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	88 23       	and	r24, r24
    2222:	dc f7       	brge	.-10     	; 0x221a <i2c_slave_receive_not_ack+0x10>

return TWDR;
    2224:	e3 e2       	ldi	r30, 0x23	; 35
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
}
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <main>:




void main (void)
{
    2230:	0f 93       	push	r16
    2232:	1f 93       	push	r17
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	a2 97       	sbiw	r28, 0x22	; 34
    223e:	0f b6       	in	r0, 0x3f	; 63
    2240:	f8 94       	cli
    2242:	de bf       	out	0x3e, r29	; 62
    2244:	0f be       	out	0x3f, r0	; 63
    2246:	cd bf       	out	0x3d, r28	; 61
	u8 arr[]="moataz", lcd[7];u8 i=0;
    2248:	ce 01       	movw	r24, r28
    224a:	40 96       	adiw	r24, 0x10	; 16
    224c:	9f 8f       	std	Y+31, r25	; 0x1f
    224e:	8e 8f       	std	Y+30, r24	; 0x1e
    2250:	e0 e6       	ldi	r30, 0x60	; 96
    2252:	f0 e0       	ldi	r31, 0x00	; 0
    2254:	f9 a3       	std	Y+33, r31	; 0x21
    2256:	e8 a3       	std	Y+32, r30	; 0x20
    2258:	f7 e0       	ldi	r31, 0x07	; 7
    225a:	fa a3       	std	Y+34, r31	; 0x22
    225c:	e8 a1       	ldd	r30, Y+32	; 0x20
    225e:	f9 a1       	ldd	r31, Y+33	; 0x21
    2260:	00 80       	ld	r0, Z
    2262:	88 a1       	ldd	r24, Y+32	; 0x20
    2264:	99 a1       	ldd	r25, Y+33	; 0x21
    2266:	01 96       	adiw	r24, 0x01	; 1
    2268:	99 a3       	std	Y+33, r25	; 0x21
    226a:	88 a3       	std	Y+32, r24	; 0x20
    226c:	ee 8d       	ldd	r30, Y+30	; 0x1e
    226e:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2270:	00 82       	st	Z, r0
    2272:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2274:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2276:	01 96       	adiw	r24, 0x01	; 1
    2278:	9f 8f       	std	Y+31, r25	; 0x1f
    227a:	8e 8f       	std	Y+30, r24	; 0x1e
    227c:	9a a1       	ldd	r25, Y+34	; 0x22
    227e:	91 50       	subi	r25, 0x01	; 1
    2280:	9a a3       	std	Y+34, r25	; 0x22
    2282:	ea a1       	ldd	r30, Y+34	; 0x22
    2284:	ee 23       	and	r30, r30
    2286:	51 f7       	brne	.-44     	; 0x225c <main+0x2c>
    2288:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_Intialization();
    228a:	0e 94 3c 0c 	call	0x1878	; 0x1878 <LCD_Intialization>
	i2c_init_master();
    228e:	0e 94 35 10 	call	0x206a	; 0x206a <i2c_init_master>
	i2c_start();
    2292:	0e 94 43 10 	call	0x2086	; 0x2086 <i2c_start>
	i2c_master_transmit_address(0b10100000);//بعت العنوان وقولتلو بلوك 0 وقولتله هكتب
    2296:	80 ea       	ldi	r24, 0xA0	; 160
    2298:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <i2c_master_transmit_address>
	i2c_master_transmit_address(0b00000000);//هبدا كتابه من لوكيشن زيرو
    229c:	80 e0       	ldi	r24, 0x00	; 0
    229e:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <i2c_master_transmit_address>
	for(i=0;i<6;i++)
    22a2:	1f 86       	std	Y+15, r1	; 0x0f
    22a4:	0e c0       	rjmp	.+28     	; 0x22c2 <main+0x92>
	{
	i2c_master_transmit_data(arr[i]);
    22a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    22a8:	28 2f       	mov	r18, r24
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	ce 01       	movw	r24, r28
    22ae:	40 96       	adiw	r24, 0x10	; 16
    22b0:	fc 01       	movw	r30, r24
    22b2:	e2 0f       	add	r30, r18
    22b4:	f3 1f       	adc	r31, r19
    22b6:	80 81       	ld	r24, Z
    22b8:	0e 94 53 10 	call	0x20a6	; 0x20a6 <i2c_master_transmit_data>
	LCD_Intialization();
	i2c_init_master();
	i2c_start();
	i2c_master_transmit_address(0b10100000);//بعت العنوان وقولتلو بلوك 0 وقولتله هكتب
	i2c_master_transmit_address(0b00000000);//هبدا كتابه من لوكيشن زيرو
	for(i=0;i<6;i++)
    22bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    22be:	8f 5f       	subi	r24, 0xFF	; 255
    22c0:	8f 87       	std	Y+15, r24	; 0x0f
    22c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22c4:	86 30       	cpi	r24, 0x06	; 6
    22c6:	78 f3       	brcs	.-34     	; 0x22a6 <main+0x76>
	{
	i2c_master_transmit_data(arr[i]);
	}
	i2c_stop();
    22c8:	0e 94 a7 10 	call	0x214e	; 0x214e <i2c_stop>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a0 e2       	ldi	r26, 0x20	; 32
    22d2:	b1 e4       	ldi	r27, 0x41	; 65
    22d4:	8b 87       	std	Y+11, r24	; 0x0b
    22d6:	9c 87       	std	Y+12, r25	; 0x0c
    22d8:	ad 87       	std	Y+13, r26	; 0x0d
    22da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22de:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	4a ef       	ldi	r20, 0xFA	; 250
    22ea:	54 e4       	ldi	r21, 0x44	; 68
    22ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	8f 83       	std	Y+7, r24	; 0x07
    22f6:	98 87       	std	Y+8, r25	; 0x08
    22f8:	a9 87       	std	Y+9, r26	; 0x09
    22fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22fc:	6f 81       	ldd	r22, Y+7	; 0x07
    22fe:	78 85       	ldd	r23, Y+8	; 0x08
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e8       	ldi	r20, 0x80	; 128
    230a:	5f e3       	ldi	r21, 0x3F	; 63
    230c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2310:	88 23       	and	r24, r24
    2312:	2c f4       	brge	.+10     	; 0x231e <main+0xee>
		__ticks = 1;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	3f c0       	rjmp	.+126    	; 0x239c <main+0x16c>
	else if (__tmp > 65535)
    231e:	6f 81       	ldd	r22, Y+7	; 0x07
    2320:	78 85       	ldd	r23, Y+8	; 0x08
    2322:	89 85       	ldd	r24, Y+9	; 0x09
    2324:	9a 85       	ldd	r25, Y+10	; 0x0a
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	3f ef       	ldi	r19, 0xFF	; 255
    232a:	4f e7       	ldi	r20, 0x7F	; 127
    232c:	57 e4       	ldi	r21, 0x47	; 71
    232e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2332:	18 16       	cp	r1, r24
    2334:	4c f5       	brge	.+82     	; 0x2388 <main+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2336:	6b 85       	ldd	r22, Y+11	; 0x0b
    2338:	7c 85       	ldd	r23, Y+12	; 0x0c
    233a:	8d 85       	ldd	r24, Y+13	; 0x0d
    233c:	9e 85       	ldd	r25, Y+14	; 0x0e
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e2       	ldi	r20, 0x20	; 32
    2344:	51 e4       	ldi	r21, 0x41	; 65
    2346:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	bc 01       	movw	r22, r24
    2350:	cd 01       	movw	r24, r26
    2352:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	0f c0       	rjmp	.+30     	; 0x237e <main+0x14e>
    2360:	88 ec       	ldi	r24, 0xC8	; 200
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9c 83       	std	Y+4, r25	; 0x04
    2366:	8b 83       	std	Y+3, r24	; 0x03
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <main+0x13c>
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	69 f7       	brne	.-38     	; 0x2360 <main+0x130>
    2386:	14 c0       	rjmp	.+40     	; 0x23b0 <main+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2388:	6f 81       	ldd	r22, Y+7	; 0x07
    238a:	78 85       	ldd	r23, Y+8	; 0x08
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9e 83       	std	Y+6, r25	; 0x06
    239a:	8d 83       	std	Y+5, r24	; 0x05
    239c:	8d 81       	ldd	r24, Y+5	; 0x05
    239e:	9e 81       	ldd	r25, Y+6	; 0x06
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <main+0x178>
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01

_delay_ms(10);
//عشان اعمل رييد
//
i2c_start();
    23b0:	0e 94 43 10 	call	0x2086	; 0x2086 <i2c_start>
	i2c_master_transmit_address(0b10100000);//بعت العنوان وقولتلو بلوك 0 وقولتله هكتب
    23b4:	80 ea       	ldi	r24, 0xA0	; 160
    23b6:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <i2c_master_transmit_address>
	i2c_master_transmit_address(0b00000000);
    23ba:	80 e0       	ldi	r24, 0x00	; 0
    23bc:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <i2c_master_transmit_address>
	i2c_start();
    23c0:	0e 94 43 10 	call	0x2086	; 0x2086 <i2c_start>
	i2c_master_transmit_address(0b10100001);//بعت العنوان وقولتلو بلوك 0 وقولتله 1 هقرا
    23c4:	81 ea       	ldi	r24, 0xA1	; 161
    23c6:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <i2c_master_transmit_address>
	for(i=0;i<6;i++)
    23ca:	1f 86       	std	Y+15, r1	; 0x0f
    23cc:	0f c0       	rjmp	.+30     	; 0x23ec <main+0x1bc>
	{
	lcd[i]=i2c_master_receive_ack();
    23ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    23d0:	08 2f       	mov	r16, r24
    23d2:	10 e0       	ldi	r17, 0x00	; 0
    23d4:	0e 94 81 10 	call	0x2102	; 0x2102 <i2c_master_receive_ack>
    23d8:	28 2f       	mov	r18, r24
    23da:	ce 01       	movw	r24, r28
    23dc:	47 96       	adiw	r24, 0x17	; 23
    23de:	fc 01       	movw	r30, r24
    23e0:	e0 0f       	add	r30, r16
    23e2:	f1 1f       	adc	r31, r17
    23e4:	20 83       	st	Z, r18
i2c_start();
	i2c_master_transmit_address(0b10100000);//بعت العنوان وقولتلو بلوك 0 وقولتله هكتب
	i2c_master_transmit_address(0b00000000);
	i2c_start();
	i2c_master_transmit_address(0b10100001);//بعت العنوان وقولتلو بلوك 0 وقولتله 1 هقرا
	for(i=0;i<6;i++)
    23e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23e8:	8f 5f       	subi	r24, 0xFF	; 255
    23ea:	8f 87       	std	Y+15, r24	; 0x0f
    23ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    23ee:	86 30       	cpi	r24, 0x06	; 6
    23f0:	70 f3       	brcs	.-36     	; 0x23ce <main+0x19e>
	{
	lcd[i]=i2c_master_receive_ack();
	}
	lcd[i]='\0';
    23f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    23f4:	28 2f       	mov	r18, r24
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	ce 01       	movw	r24, r28
    23fa:	47 96       	adiw	r24, 0x17	; 23
    23fc:	fc 01       	movw	r30, r24
    23fe:	e2 0f       	add	r30, r18
    2400:	f3 1f       	adc	r31, r19
    2402:	10 82       	st	Z, r1

	i2c_master_receive_not_ack();
    2404:	0e 94 94 10 	call	0x2128	; 0x2128 <i2c_master_receive_not_ack>
	i2c_stop();
    2408:	0e 94 a7 10 	call	0x214e	; 0x214e <i2c_stop>
	LCD_WRITE_POS(lcd,0,0);
    240c:	ce 01       	movw	r24, r28
    240e:	47 96       	adiw	r24, 0x17	; 23
    2410:	60 e0       	ldi	r22, 0x00	; 0
    2412:	40 e0       	ldi	r20, 0x00	; 0
    2414:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <LCD_WRITE_POS>
    2418:	ff cf       	rjmp	.-2      	; 0x2418 <main+0x1e8>

0000241a <__udivmodsi4>:
    241a:	a1 e2       	ldi	r26, 0x21	; 33
    241c:	1a 2e       	mov	r1, r26
    241e:	aa 1b       	sub	r26, r26
    2420:	bb 1b       	sub	r27, r27
    2422:	fd 01       	movw	r30, r26
    2424:	0d c0       	rjmp	.+26     	; 0x2440 <__udivmodsi4_ep>

00002426 <__udivmodsi4_loop>:
    2426:	aa 1f       	adc	r26, r26
    2428:	bb 1f       	adc	r27, r27
    242a:	ee 1f       	adc	r30, r30
    242c:	ff 1f       	adc	r31, r31
    242e:	a2 17       	cp	r26, r18
    2430:	b3 07       	cpc	r27, r19
    2432:	e4 07       	cpc	r30, r20
    2434:	f5 07       	cpc	r31, r21
    2436:	20 f0       	brcs	.+8      	; 0x2440 <__udivmodsi4_ep>
    2438:	a2 1b       	sub	r26, r18
    243a:	b3 0b       	sbc	r27, r19
    243c:	e4 0b       	sbc	r30, r20
    243e:	f5 0b       	sbc	r31, r21

00002440 <__udivmodsi4_ep>:
    2440:	66 1f       	adc	r22, r22
    2442:	77 1f       	adc	r23, r23
    2444:	88 1f       	adc	r24, r24
    2446:	99 1f       	adc	r25, r25
    2448:	1a 94       	dec	r1
    244a:	69 f7       	brne	.-38     	; 0x2426 <__udivmodsi4_loop>
    244c:	60 95       	com	r22
    244e:	70 95       	com	r23
    2450:	80 95       	com	r24
    2452:	90 95       	com	r25
    2454:	9b 01       	movw	r18, r22
    2456:	ac 01       	movw	r20, r24
    2458:	bd 01       	movw	r22, r26
    245a:	cf 01       	movw	r24, r30
    245c:	08 95       	ret

0000245e <__prologue_saves__>:
    245e:	2f 92       	push	r2
    2460:	3f 92       	push	r3
    2462:	4f 92       	push	r4
    2464:	5f 92       	push	r5
    2466:	6f 92       	push	r6
    2468:	7f 92       	push	r7
    246a:	8f 92       	push	r8
    246c:	9f 92       	push	r9
    246e:	af 92       	push	r10
    2470:	bf 92       	push	r11
    2472:	cf 92       	push	r12
    2474:	df 92       	push	r13
    2476:	ef 92       	push	r14
    2478:	ff 92       	push	r15
    247a:	0f 93       	push	r16
    247c:	1f 93       	push	r17
    247e:	cf 93       	push	r28
    2480:	df 93       	push	r29
    2482:	cd b7       	in	r28, 0x3d	; 61
    2484:	de b7       	in	r29, 0x3e	; 62
    2486:	ca 1b       	sub	r28, r26
    2488:	db 0b       	sbc	r29, r27
    248a:	0f b6       	in	r0, 0x3f	; 63
    248c:	f8 94       	cli
    248e:	de bf       	out	0x3e, r29	; 62
    2490:	0f be       	out	0x3f, r0	; 63
    2492:	cd bf       	out	0x3d, r28	; 61
    2494:	09 94       	ijmp

00002496 <__epilogue_restores__>:
    2496:	2a 88       	ldd	r2, Y+18	; 0x12
    2498:	39 88       	ldd	r3, Y+17	; 0x11
    249a:	48 88       	ldd	r4, Y+16	; 0x10
    249c:	5f 84       	ldd	r5, Y+15	; 0x0f
    249e:	6e 84       	ldd	r6, Y+14	; 0x0e
    24a0:	7d 84       	ldd	r7, Y+13	; 0x0d
    24a2:	8c 84       	ldd	r8, Y+12	; 0x0c
    24a4:	9b 84       	ldd	r9, Y+11	; 0x0b
    24a6:	aa 84       	ldd	r10, Y+10	; 0x0a
    24a8:	b9 84       	ldd	r11, Y+9	; 0x09
    24aa:	c8 84       	ldd	r12, Y+8	; 0x08
    24ac:	df 80       	ldd	r13, Y+7	; 0x07
    24ae:	ee 80       	ldd	r14, Y+6	; 0x06
    24b0:	fd 80       	ldd	r15, Y+5	; 0x05
    24b2:	0c 81       	ldd	r16, Y+4	; 0x04
    24b4:	1b 81       	ldd	r17, Y+3	; 0x03
    24b6:	aa 81       	ldd	r26, Y+2	; 0x02
    24b8:	b9 81       	ldd	r27, Y+1	; 0x01
    24ba:	ce 0f       	add	r28, r30
    24bc:	d1 1d       	adc	r29, r1
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	f8 94       	cli
    24c2:	de bf       	out	0x3e, r29	; 62
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	cd bf       	out	0x3d, r28	; 61
    24c8:	ed 01       	movw	r28, r26
    24ca:	08 95       	ret

000024cc <_exit>:
    24cc:	f8 94       	cli

000024ce <__stop_program>:
    24ce:	ff cf       	rjmp	.-2      	; 0x24ce <__stop_program>
