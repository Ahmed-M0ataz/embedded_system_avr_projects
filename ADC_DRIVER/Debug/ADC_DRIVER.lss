
ADC_DRIVER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  000029ea  00002a5e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000020dc  00000000  00000000  00002b88  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000de8  00000000  00000000  00004c64  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00005a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00005bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00005dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  000081e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  0000956f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000a748  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000a908  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000abfe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b56c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 cd 13 	call	0x279a	; 0x279a <main>
      7a:	0c 94 f3 14 	jmp	0x29e6	; 0x29e6 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 bc 14 	jmp	0x2978	; 0x2978 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 d8 14 	jmp	0x29b0	; 0x29b0 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	60 e6       	ldi	r22, 0x60	; 96
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 e4 14 	jmp	0x29c8	; 0x29c8 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 c4 14 	jmp	0x2988	; 0x2988 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e8 59       	subi	r30, 0x98	; 152
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <ADC_INT>:
#include "ADC_private.h"
#include "ADC_Interface.h"


void ADC_INT(void)
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
	set_bit(ADCSRA,2);//(prescalas =128) اقل تردد ممكن اشتغل بيه بقسم ال 8000000علي 128 وهو الي بيعمل كده
     e26:	a6 e2       	ldi	r26, 0x26	; 38
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e6 e2       	ldi	r30, 0x26	; 38
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	84 60       	ori	r24, 0x04	; 4
     e32:	8c 93       	st	X, r24
	set_bit(ADCSRA,1);//(prescalas =128) اقل تردد ممكن اشتغل بيه بقسم ال 8000000علي 128 وهو الي بيعمل كده
     e34:	a6 e2       	ldi	r26, 0x26	; 38
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	e6 e2       	ldi	r30, 0x26	; 38
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	80 81       	ld	r24, Z
     e3e:	82 60       	ori	r24, 0x02	; 2
     e40:	8c 93       	st	X, r24
	set_bit(ADCSRA,0);//(prescalas =128) اقل تردد ممكن اشتغل بيه بقسم ال 8000000علي 128 وهو الي بيعمل كده
     e42:	a6 e2       	ldi	r26, 0x26	; 38
     e44:	b0 e0       	ldi	r27, 0x00	; 0
     e46:	e6 e2       	ldi	r30, 0x26	; 38
     e48:	f0 e0       	ldi	r31, 0x00	; 0
     e4a:	80 81       	ld	r24, Z
     e4c:	81 60       	ori	r24, 0x01	; 1
     e4e:	8c 93       	st	X, r24

	clear_bit(ADMUX,REFRENCE_VOLT_BIT7);//refrance volt 5v avcc
     e50:	a7 e2       	ldi	r26, 0x27	; 39
     e52:	b0 e0       	ldi	r27, 0x00	; 0
     e54:	e7 e2       	ldi	r30, 0x27	; 39
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	8f 77       	andi	r24, 0x7F	; 127
     e5c:	8c 93       	st	X, r24
	set_bit(ADMUX,REFRENCE_VOLT_BIT6);//refrance volt 5v avcc
     e5e:	a7 e2       	ldi	r26, 0x27	; 39
     e60:	b0 e0       	ldi	r27, 0x00	; 0
     e62:	e7 e2       	ldi	r30, 0x27	; 39
     e64:	f0 e0       	ldi	r31, 0x00	; 0
     e66:	80 81       	ld	r24, Z
     e68:	80 64       	ori	r24, 0x40	; 64
     e6a:	8c 93       	st	X, r24
	set_bit(ADMUX,LIFT_ADJUST_10BIT);//left adjustment
     e6c:	a7 e2       	ldi	r26, 0x27	; 39
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	e7 e2       	ldi	r30, 0x27	; 39
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	80 62       	ori	r24, 0x20	; 32
     e78:	8c 93       	st	X, r24
	set_bit(ADCSRA,ADC_BIT_enable);//adc enable
     e7a:	a6 e2       	ldi	r26, 0x26	; 38
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e6 e2       	ldi	r30, 0x26	; 38
     e80:	f0 e0       	ldi	r31, 0x00	; 0
     e82:	80 81       	ld	r24, Z
     e84:	80 68       	ori	r24, 0x80	; 128
     e86:	8c 93       	st	X, r24
}
     e88:	cf 91       	pop	r28
     e8a:	df 91       	pop	r29
     e8c:	08 95       	ret

00000e8e <ADC_READ>:

u16 ADC_READ(u8 channel)//تعبر عن ال بن chanal
{
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	00 d0       	rcall	.+0      	; 0xe94 <ADC_READ+0x6>
     e94:	0f 92       	push	r0
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	8b 83       	std	Y+3, r24	; 0x03

	ADMUX &=0b11100000; //ال الأند مع الواحد هحافظ علي اول تلات بتات الي هما الخاصين الكونفجريشن الي اول بتين بالرفرنس فولت والتالته بتاعت الليفت والاند مع الزيرو بيصفر كل حاجه
     e9c:	a7 e2       	ldi	r26, 0x27	; 39
     e9e:	b0 e0       	ldi	r27, 0x00	; 0
     ea0:	e7 e2       	ldi	r30, 0x27	; 39
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 7e       	andi	r24, 0xE0	; 224
     ea8:	8c 93       	st	X, r24
ADMUX |=channel;//اوور عشان احط الإتشنل الي هو عاوزها وكده كده بيتحطو في اول 5 بت
     eaa:	a7 e2       	ldi	r26, 0x27	; 39
     eac:	b0 e0       	ldi	r27, 0x00	; 0
     eae:	e7 e2       	ldi	r30, 0x27	; 39
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	90 81       	ld	r25, Z
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	89 2b       	or	r24, r25
     eb8:	8c 93       	st	X, r24
set_bit(ADCSRA,6);//start conv
     eba:	a6 e2       	ldi	r26, 0x26	; 38
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e6 e2       	ldi	r30, 0x26	; 38
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	80 64       	ori	r24, 0x40	; 64
     ec6:	8c 93       	st	X, r24

while (get_bit(ADCSRA,ADC_FLAG_BIT)==0);//طول ما الفلاج ب زيرو خليك لووب هنا لو بقي ب واحد اخرج من اللوب
     ec8:	e6 e2       	ldi	r30, 0x26	; 38
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	82 95       	swap	r24
     ed0:	8f 70       	andi	r24, 0x0F	; 15
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	81 70       	andi	r24, 0x01	; 1
     ed8:	90 70       	andi	r25, 0x00	; 0
     eda:	00 97       	sbiw	r24, 0x00	; 0
     edc:	a9 f3       	breq	.-22     	; 0xec8 <ADC_READ+0x3a>
//set_bit(ADCSRA,4);
//u16 res=ADCH;
//res= (res<<2)|(ADCL>>6);
u16 res=(ADCL>>6);
     ede:	e4 e2       	ldi	r30, 0x24	; 36
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	82 95       	swap	r24
     ee6:	86 95       	lsr	r24
     ee8:	86 95       	lsr	r24
     eea:	83 70       	andi	r24, 0x03	; 3
     eec:	88 2f       	mov	r24, r24
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	9a 83       	std	Y+2, r25	; 0x02
     ef2:	89 83       	std	Y+1, r24	; 0x01
res|= (ADCH<<2);
     ef4:	e5 e2       	ldi	r30, 0x25	; 37
     ef6:	f0 e0       	ldi	r31, 0x00	; 0
     ef8:	80 81       	ld	r24, Z
     efa:	88 2f       	mov	r24, r24
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	9c 01       	movw	r18, r24
     f08:	89 81       	ldd	r24, Y+1	; 0x01
     f0a:	9a 81       	ldd	r25, Y+2	; 0x02
     f0c:	82 2b       	or	r24, r18
     f0e:	93 2b       	or	r25, r19
     f10:	9a 83       	std	Y+2, r25	; 0x02
     f12:	89 83       	std	Y+1, r24	; 0x01
return res;
     f14:	89 81       	ldd	r24, Y+1	; 0x01
     f16:	9a 81       	ldd	r25, Y+2	; 0x02

}
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	0f 90       	pop	r0
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <DIO_set_pin_value>:
#include"STD_TYPES.h"
#include "DIO_Configuration.h"
#include "DIO_Private.h"
#include "DIO_Interface.h"

u8 DIO_set_pin_value(u8 Port_no,u8 Pin_no,u8 Pin_value){
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	00 d0       	rcall	.+0      	; 0xf2a <DIO_set_pin_value+0x6>
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <DIO_set_pin_value+0x8>
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <DIO_set_pin_value+0xa>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	8a 83       	std	Y+2, r24	; 0x02
     f34:	6b 83       	std	Y+3, r22	; 0x03
     f36:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_state=0;
     f38:	19 82       	std	Y+1, r1	; 0x01
	if(Port_no>=DIO_max_port_no){
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	84 30       	cpi	r24, 0x04	; 4
     f3e:	18 f0       	brcs	.+6      	; 0xf46 <DIO_set_pin_value+0x22>
		Error_state=1;
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	89 83       	std	Y+1, r24	; 0x01
     f44:	e0 c0       	rjmp	.+448    	; 0x1106 <DIO_set_pin_value+0x1e2>
	}else if(Pin_no>=DIO_max_pin_no){
     f46:	8b 81       	ldd	r24, Y+3	; 0x03
     f48:	88 30       	cpi	r24, 0x08	; 8
     f4a:	18 f0       	brcs	.+6      	; 0xf52 <DIO_set_pin_value+0x2e>
		Error_state=2;
     f4c:	82 e0       	ldi	r24, 0x02	; 2
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	da c0       	rjmp	.+436    	; 0x1106 <DIO_set_pin_value+0x1e2>
	}else if((Pin_value!=DIO_Low)&&(Pin_value!=DIO_High)){
     f52:	8c 81       	ldd	r24, Y+4	; 0x04
     f54:	88 23       	and	r24, r24
     f56:	31 f0       	breq	.+12     	; 0xf64 <DIO_set_pin_value+0x40>
     f58:	8c 81       	ldd	r24, Y+4	; 0x04
     f5a:	81 30       	cpi	r24, 0x01	; 1
     f5c:	19 f0       	breq	.+6      	; 0xf64 <DIO_set_pin_value+0x40>
		Error_state=3;
     f5e:	83 e0       	ldi	r24, 0x03	; 3
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	d1 c0       	rjmp	.+418    	; 0x1106 <DIO_set_pin_value+0x1e2>
	}else{
		switch(Port_no){
     f64:	8a 81       	ldd	r24, Y+2	; 0x02
     f66:	28 2f       	mov	r18, r24
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	3e 83       	std	Y+6, r19	; 0x06
     f6c:	2d 83       	std	Y+5, r18	; 0x05
     f6e:	8d 81       	ldd	r24, Y+5	; 0x05
     f70:	9e 81       	ldd	r25, Y+6	; 0x06
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	91 05       	cpc	r25, r1
     f76:	09 f4       	brne	.+2      	; 0xf7a <DIO_set_pin_value+0x56>
     f78:	43 c0       	rjmp	.+134    	; 0x1000 <DIO_set_pin_value+0xdc>
     f7a:	2d 81       	ldd	r18, Y+5	; 0x05
     f7c:	3e 81       	ldd	r19, Y+6	; 0x06
     f7e:	22 30       	cpi	r18, 0x02	; 2
     f80:	31 05       	cpc	r19, r1
     f82:	2c f4       	brge	.+10     	; 0xf8e <DIO_set_pin_value+0x6a>
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	71 f0       	breq	.+28     	; 0xfa8 <DIO_set_pin_value+0x84>
     f8c:	bc c0       	rjmp	.+376    	; 0x1106 <DIO_set_pin_value+0x1e2>
     f8e:	2d 81       	ldd	r18, Y+5	; 0x05
     f90:	3e 81       	ldd	r19, Y+6	; 0x06
     f92:	22 30       	cpi	r18, 0x02	; 2
     f94:	31 05       	cpc	r19, r1
     f96:	09 f4       	brne	.+2      	; 0xf9a <DIO_set_pin_value+0x76>
     f98:	5f c0       	rjmp	.+190    	; 0x1058 <DIO_set_pin_value+0x134>
     f9a:	8d 81       	ldd	r24, Y+5	; 0x05
     f9c:	9e 81       	ldd	r25, Y+6	; 0x06
     f9e:	83 30       	cpi	r24, 0x03	; 3
     fa0:	91 05       	cpc	r25, r1
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <DIO_set_pin_value+0x82>
     fa4:	85 c0       	rjmp	.+266    	; 0x10b0 <DIO_set_pin_value+0x18c>
     fa6:	af c0       	rjmp	.+350    	; 0x1106 <DIO_set_pin_value+0x1e2>
		case Group_A: assign_bit(DIO_u8_PORTA,Pin_no,Pin_value);
     fa8:	8c 81       	ldd	r24, Y+4	; 0x04
     faa:	81 30       	cpi	r24, 0x01	; 1
     fac:	a1 f4       	brne	.+40     	; 0xfd6 <DIO_set_pin_value+0xb2>
     fae:	ab e3       	ldi	r26, 0x3B	; 59
     fb0:	b0 e0       	ldi	r27, 0x00	; 0
     fb2:	eb e3       	ldi	r30, 0x3B	; 59
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	80 81       	ld	r24, Z
     fb8:	48 2f       	mov	r20, r24
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	28 2f       	mov	r18, r24
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_set_pin_value+0xa8>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_set_pin_value+0xa4>
     fd0:	84 2b       	or	r24, r20
     fd2:	8c 93       	st	X, r24
     fd4:	98 c0       	rjmp	.+304    	; 0x1106 <DIO_set_pin_value+0x1e2>
     fd6:	ab e3       	ldi	r26, 0x3B	; 59
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	eb e3       	ldi	r30, 0x3B	; 59
     fdc:	f0 e0       	ldi	r31, 0x00	; 0
     fde:	80 81       	ld	r24, Z
     fe0:	48 2f       	mov	r20, r24
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	81 e0       	ldi	r24, 0x01	; 1
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	02 2e       	mov	r0, r18
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <DIO_set_pin_value+0xd0>
     ff0:	88 0f       	add	r24, r24
     ff2:	99 1f       	adc	r25, r25
     ff4:	0a 94       	dec	r0
     ff6:	e2 f7       	brpl	.-8      	; 0xff0 <DIO_set_pin_value+0xcc>
     ff8:	80 95       	com	r24
     ffa:	84 23       	and	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	83 c0       	rjmp	.+262    	; 0x1106 <DIO_set_pin_value+0x1e2>
		break;
		case Group_B: assign_bit(DIO_u8_PORTB,Pin_no,Pin_value);
    1000:	8c 81       	ldd	r24, Y+4	; 0x04
    1002:	81 30       	cpi	r24, 0x01	; 1
    1004:	a1 f4       	brne	.+40     	; 0x102e <DIO_set_pin_value+0x10a>
    1006:	a8 e3       	ldi	r26, 0x38	; 56
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e8 e3       	ldi	r30, 0x38	; 56
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	48 2f       	mov	r20, r24
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	28 2f       	mov	r18, r24
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	81 e0       	ldi	r24, 0x01	; 1
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	02 2e       	mov	r0, r18
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <DIO_set_pin_value+0x100>
    1020:	88 0f       	add	r24, r24
    1022:	99 1f       	adc	r25, r25
    1024:	0a 94       	dec	r0
    1026:	e2 f7       	brpl	.-8      	; 0x1020 <DIO_set_pin_value+0xfc>
    1028:	84 2b       	or	r24, r20
    102a:	8c 93       	st	X, r24
    102c:	6c c0       	rjmp	.+216    	; 0x1106 <DIO_set_pin_value+0x1e2>
    102e:	a8 e3       	ldi	r26, 0x38	; 56
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	e8 e3       	ldi	r30, 0x38	; 56
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	48 2f       	mov	r20, r24
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	81 e0       	ldi	r24, 0x01	; 1
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	02 2e       	mov	r0, r18
    1046:	02 c0       	rjmp	.+4      	; 0x104c <DIO_set_pin_value+0x128>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	0a 94       	dec	r0
    104e:	e2 f7       	brpl	.-8      	; 0x1048 <DIO_set_pin_value+0x124>
    1050:	80 95       	com	r24
    1052:	84 23       	and	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	57 c0       	rjmp	.+174    	; 0x1106 <DIO_set_pin_value+0x1e2>
		break;
		case Group_C: assign_bit(DIO_u8_PORTC,Pin_no,Pin_value);
    1058:	8c 81       	ldd	r24, Y+4	; 0x04
    105a:	81 30       	cpi	r24, 0x01	; 1
    105c:	a1 f4       	brne	.+40     	; 0x1086 <DIO_set_pin_value+0x162>
    105e:	a5 e3       	ldi	r26, 0x35	; 53
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e5 e3       	ldi	r30, 0x35	; 53
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	48 2f       	mov	r20, r24
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 2e       	mov	r0, r18
    1076:	02 c0       	rjmp	.+4      	; 0x107c <DIO_set_pin_value+0x158>
    1078:	88 0f       	add	r24, r24
    107a:	99 1f       	adc	r25, r25
    107c:	0a 94       	dec	r0
    107e:	e2 f7       	brpl	.-8      	; 0x1078 <DIO_set_pin_value+0x154>
    1080:	84 2b       	or	r24, r20
    1082:	8c 93       	st	X, r24
    1084:	40 c0       	rjmp	.+128    	; 0x1106 <DIO_set_pin_value+0x1e2>
    1086:	a5 e3       	ldi	r26, 0x35	; 53
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e5 e3       	ldi	r30, 0x35	; 53
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	48 2f       	mov	r20, r24
    1092:	8b 81       	ldd	r24, Y+3	; 0x03
    1094:	28 2f       	mov	r18, r24
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	02 2e       	mov	r0, r18
    109e:	02 c0       	rjmp	.+4      	; 0x10a4 <DIO_set_pin_value+0x180>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	0a 94       	dec	r0
    10a6:	e2 f7       	brpl	.-8      	; 0x10a0 <DIO_set_pin_value+0x17c>
    10a8:	80 95       	com	r24
    10aa:	84 23       	and	r24, r20
    10ac:	8c 93       	st	X, r24
    10ae:	2b c0       	rjmp	.+86     	; 0x1106 <DIO_set_pin_value+0x1e2>
		break;
		case Group_D: assign_bit(DIO_u8_PORTD,Pin_no,Pin_value);
    10b0:	8c 81       	ldd	r24, Y+4	; 0x04
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	a1 f4       	brne	.+40     	; 0x10de <DIO_set_pin_value+0x1ba>
    10b6:	a2 e3       	ldi	r26, 0x32	; 50
    10b8:	b0 e0       	ldi	r27, 0x00	; 0
    10ba:	e2 e3       	ldi	r30, 0x32	; 50
    10bc:	f0 e0       	ldi	r31, 0x00	; 0
    10be:	80 81       	ld	r24, Z
    10c0:	48 2f       	mov	r20, r24
    10c2:	8b 81       	ldd	r24, Y+3	; 0x03
    10c4:	28 2f       	mov	r18, r24
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	02 2e       	mov	r0, r18
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <DIO_set_pin_value+0x1b0>
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	0a 94       	dec	r0
    10d6:	e2 f7       	brpl	.-8      	; 0x10d0 <DIO_set_pin_value+0x1ac>
    10d8:	84 2b       	or	r24, r20
    10da:	8c 93       	st	X, r24
    10dc:	14 c0       	rjmp	.+40     	; 0x1106 <DIO_set_pin_value+0x1e2>
    10de:	a2 e3       	ldi	r26, 0x32	; 50
    10e0:	b0 e0       	ldi	r27, 0x00	; 0
    10e2:	e2 e3       	ldi	r30, 0x32	; 50
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	48 2f       	mov	r20, r24
    10ea:	8b 81       	ldd	r24, Y+3	; 0x03
    10ec:	28 2f       	mov	r18, r24
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	81 e0       	ldi	r24, 0x01	; 1
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	02 2e       	mov	r0, r18
    10f6:	02 c0       	rjmp	.+4      	; 0x10fc <DIO_set_pin_value+0x1d8>
    10f8:	88 0f       	add	r24, r24
    10fa:	99 1f       	adc	r25, r25
    10fc:	0a 94       	dec	r0
    10fe:	e2 f7       	brpl	.-8      	; 0x10f8 <DIO_set_pin_value+0x1d4>
    1100:	80 95       	com	r24
    1102:	84 23       	and	r24, r20
    1104:	8c 93       	st	X, r24
		break;
		}
	}
	return Error_state;
    1106:	89 81       	ldd	r24, Y+1	; 0x01
}
    1108:	26 96       	adiw	r28, 0x06	; 6
    110a:	0f b6       	in	r0, 0x3f	; 63
    110c:	f8 94       	cli
    110e:	de bf       	out	0x3e, r29	; 62
    1110:	0f be       	out	0x3f, r0	; 63
    1112:	cd bf       	out	0x3d, r28	; 61
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <DIO_set_pin_direction>:

u8 DIO_set_pin_direction(u8 Port_no,u8 Pin_no,u8 Pin_direction){
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <DIO_set_pin_direction+0x6>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <DIO_set_pin_direction+0x8>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <DIO_set_pin_direction+0xa>
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	8a 83       	std	Y+2, r24	; 0x02
    112a:	6b 83       	std	Y+3, r22	; 0x03
    112c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_state=0;
    112e:	19 82       	std	Y+1, r1	; 0x01
		if(Port_no>=DIO_max_port_no){
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	84 30       	cpi	r24, 0x04	; 4
    1134:	18 f0       	brcs	.+6      	; 0x113c <DIO_set_pin_direction+0x22>
			Error_state=1;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	e0 c0       	rjmp	.+448    	; 0x12fc <DIO_set_pin_direction+0x1e2>
		}else if(Pin_no>=DIO_max_pin_no){
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	88 30       	cpi	r24, 0x08	; 8
    1140:	18 f0       	brcs	.+6      	; 0x1148 <DIO_set_pin_direction+0x2e>
			Error_state=2;
    1142:	82 e0       	ldi	r24, 0x02	; 2
    1144:	89 83       	std	Y+1, r24	; 0x01
    1146:	da c0       	rjmp	.+436    	; 0x12fc <DIO_set_pin_direction+0x1e2>
		}else if((Pin_direction!=DIO_Input)&&(Pin_direction!=DIO_Output)){
    1148:	8c 81       	ldd	r24, Y+4	; 0x04
    114a:	88 23       	and	r24, r24
    114c:	31 f0       	breq	.+12     	; 0x115a <DIO_set_pin_direction+0x40>
    114e:	8c 81       	ldd	r24, Y+4	; 0x04
    1150:	81 30       	cpi	r24, 0x01	; 1
    1152:	19 f0       	breq	.+6      	; 0x115a <DIO_set_pin_direction+0x40>
			Error_state=3;
    1154:	83 e0       	ldi	r24, 0x03	; 3
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	d1 c0       	rjmp	.+418    	; 0x12fc <DIO_set_pin_direction+0x1e2>
		}else{
			switch(Port_no){
    115a:	8a 81       	ldd	r24, Y+2	; 0x02
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	3e 83       	std	Y+6, r19	; 0x06
    1162:	2d 83       	std	Y+5, r18	; 0x05
    1164:	8d 81       	ldd	r24, Y+5	; 0x05
    1166:	9e 81       	ldd	r25, Y+6	; 0x06
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	91 05       	cpc	r25, r1
    116c:	09 f4       	brne	.+2      	; 0x1170 <DIO_set_pin_direction+0x56>
    116e:	43 c0       	rjmp	.+134    	; 0x11f6 <DIO_set_pin_direction+0xdc>
    1170:	2d 81       	ldd	r18, Y+5	; 0x05
    1172:	3e 81       	ldd	r19, Y+6	; 0x06
    1174:	22 30       	cpi	r18, 0x02	; 2
    1176:	31 05       	cpc	r19, r1
    1178:	2c f4       	brge	.+10     	; 0x1184 <DIO_set_pin_direction+0x6a>
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	00 97       	sbiw	r24, 0x00	; 0
    1180:	71 f0       	breq	.+28     	; 0x119e <DIO_set_pin_direction+0x84>
    1182:	bc c0       	rjmp	.+376    	; 0x12fc <DIO_set_pin_direction+0x1e2>
    1184:	2d 81       	ldd	r18, Y+5	; 0x05
    1186:	3e 81       	ldd	r19, Y+6	; 0x06
    1188:	22 30       	cpi	r18, 0x02	; 2
    118a:	31 05       	cpc	r19, r1
    118c:	09 f4       	brne	.+2      	; 0x1190 <DIO_set_pin_direction+0x76>
    118e:	5f c0       	rjmp	.+190    	; 0x124e <DIO_set_pin_direction+0x134>
    1190:	8d 81       	ldd	r24, Y+5	; 0x05
    1192:	9e 81       	ldd	r25, Y+6	; 0x06
    1194:	83 30       	cpi	r24, 0x03	; 3
    1196:	91 05       	cpc	r25, r1
    1198:	09 f4       	brne	.+2      	; 0x119c <DIO_set_pin_direction+0x82>
    119a:	85 c0       	rjmp	.+266    	; 0x12a6 <DIO_set_pin_direction+0x18c>
    119c:	af c0       	rjmp	.+350    	; 0x12fc <DIO_set_pin_direction+0x1e2>
			case Group_A: assign_bit(DIO_u8_DDRA,Pin_no,Pin_direction);
    119e:	8c 81       	ldd	r24, Y+4	; 0x04
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	a1 f4       	brne	.+40     	; 0x11cc <DIO_set_pin_direction+0xb2>
    11a4:	aa e3       	ldi	r26, 0x3A	; 58
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	ea e3       	ldi	r30, 0x3A	; 58
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	48 2f       	mov	r20, r24
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	28 2f       	mov	r18, r24
    11b4:	30 e0       	ldi	r19, 0x00	; 0
    11b6:	81 e0       	ldi	r24, 0x01	; 1
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	02 2e       	mov	r0, r18
    11bc:	02 c0       	rjmp	.+4      	; 0x11c2 <DIO_set_pin_direction+0xa8>
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0a 94       	dec	r0
    11c4:	e2 f7       	brpl	.-8      	; 0x11be <DIO_set_pin_direction+0xa4>
    11c6:	84 2b       	or	r24, r20
    11c8:	8c 93       	st	X, r24
    11ca:	98 c0       	rjmp	.+304    	; 0x12fc <DIO_set_pin_direction+0x1e2>
    11cc:	aa e3       	ldi	r26, 0x3A	; 58
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ea e3       	ldi	r30, 0x3A	; 58
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	28 2f       	mov	r18, r24
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	02 2e       	mov	r0, r18
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <DIO_set_pin_direction+0xd0>
    11e6:	88 0f       	add	r24, r24
    11e8:	99 1f       	adc	r25, r25
    11ea:	0a 94       	dec	r0
    11ec:	e2 f7       	brpl	.-8      	; 0x11e6 <DIO_set_pin_direction+0xcc>
    11ee:	80 95       	com	r24
    11f0:	84 23       	and	r24, r20
    11f2:	8c 93       	st	X, r24
    11f4:	83 c0       	rjmp	.+262    	; 0x12fc <DIO_set_pin_direction+0x1e2>
			break;
			case Group_B: assign_bit(DIO_u8_DDRB,Pin_no,Pin_direction);
    11f6:	8c 81       	ldd	r24, Y+4	; 0x04
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	a1 f4       	brne	.+40     	; 0x1224 <DIO_set_pin_direction+0x10a>
    11fc:	a7 e3       	ldi	r26, 0x37	; 55
    11fe:	b0 e0       	ldi	r27, 0x00	; 0
    1200:	e7 e3       	ldi	r30, 0x37	; 55
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	80 81       	ld	r24, Z
    1206:	48 2f       	mov	r20, r24
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	28 2f       	mov	r18, r24
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	02 2e       	mov	r0, r18
    1214:	02 c0       	rjmp	.+4      	; 0x121a <DIO_set_pin_direction+0x100>
    1216:	88 0f       	add	r24, r24
    1218:	99 1f       	adc	r25, r25
    121a:	0a 94       	dec	r0
    121c:	e2 f7       	brpl	.-8      	; 0x1216 <DIO_set_pin_direction+0xfc>
    121e:	84 2b       	or	r24, r20
    1220:	8c 93       	st	X, r24
    1222:	6c c0       	rjmp	.+216    	; 0x12fc <DIO_set_pin_direction+0x1e2>
    1224:	a7 e3       	ldi	r26, 0x37	; 55
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e7 e3       	ldi	r30, 0x37	; 55
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	48 2f       	mov	r20, r24
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	28 2f       	mov	r18, r24
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	02 2e       	mov	r0, r18
    123c:	02 c0       	rjmp	.+4      	; 0x1242 <DIO_set_pin_direction+0x128>
    123e:	88 0f       	add	r24, r24
    1240:	99 1f       	adc	r25, r25
    1242:	0a 94       	dec	r0
    1244:	e2 f7       	brpl	.-8      	; 0x123e <DIO_set_pin_direction+0x124>
    1246:	80 95       	com	r24
    1248:	84 23       	and	r24, r20
    124a:	8c 93       	st	X, r24
    124c:	57 c0       	rjmp	.+174    	; 0x12fc <DIO_set_pin_direction+0x1e2>
			break;
			case Group_C: assign_bit(DIO_u8_DDRC,Pin_no,Pin_direction);
    124e:	8c 81       	ldd	r24, Y+4	; 0x04
    1250:	81 30       	cpi	r24, 0x01	; 1
    1252:	a1 f4       	brne	.+40     	; 0x127c <DIO_set_pin_direction+0x162>
    1254:	a4 e3       	ldi	r26, 0x34	; 52
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e4 e3       	ldi	r30, 0x34	; 52
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 2e       	mov	r0, r18
    126c:	02 c0       	rjmp	.+4      	; 0x1272 <DIO_set_pin_direction+0x158>
    126e:	88 0f       	add	r24, r24
    1270:	99 1f       	adc	r25, r25
    1272:	0a 94       	dec	r0
    1274:	e2 f7       	brpl	.-8      	; 0x126e <DIO_set_pin_direction+0x154>
    1276:	84 2b       	or	r24, r20
    1278:	8c 93       	st	X, r24
    127a:	40 c0       	rjmp	.+128    	; 0x12fc <DIO_set_pin_direction+0x1e2>
    127c:	a4 e3       	ldi	r26, 0x34	; 52
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e4 e3       	ldi	r30, 0x34	; 52
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	48 2f       	mov	r20, r24
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	28 2f       	mov	r18, r24
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	02 2e       	mov	r0, r18
    1294:	02 c0       	rjmp	.+4      	; 0x129a <DIO_set_pin_direction+0x180>
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	0a 94       	dec	r0
    129c:	e2 f7       	brpl	.-8      	; 0x1296 <DIO_set_pin_direction+0x17c>
    129e:	80 95       	com	r24
    12a0:	84 23       	and	r24, r20
    12a2:	8c 93       	st	X, r24
    12a4:	2b c0       	rjmp	.+86     	; 0x12fc <DIO_set_pin_direction+0x1e2>
			break;
			case Group_D: assign_bit(DIO_u8_DDRD,Pin_no,Pin_direction);
    12a6:	8c 81       	ldd	r24, Y+4	; 0x04
    12a8:	81 30       	cpi	r24, 0x01	; 1
    12aa:	a1 f4       	brne	.+40     	; 0x12d4 <DIO_set_pin_direction+0x1ba>
    12ac:	a1 e3       	ldi	r26, 0x31	; 49
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e1 e3       	ldi	r30, 0x31	; 49
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	48 2f       	mov	r20, r24
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	28 2f       	mov	r18, r24
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	81 e0       	ldi	r24, 0x01	; 1
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	02 2e       	mov	r0, r18
    12c4:	02 c0       	rjmp	.+4      	; 0x12ca <DIO_set_pin_direction+0x1b0>
    12c6:	88 0f       	add	r24, r24
    12c8:	99 1f       	adc	r25, r25
    12ca:	0a 94       	dec	r0
    12cc:	e2 f7       	brpl	.-8      	; 0x12c6 <DIO_set_pin_direction+0x1ac>
    12ce:	84 2b       	or	r24, r20
    12d0:	8c 93       	st	X, r24
    12d2:	14 c0       	rjmp	.+40     	; 0x12fc <DIO_set_pin_direction+0x1e2>
    12d4:	a1 e3       	ldi	r26, 0x31	; 49
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	e1 e3       	ldi	r30, 0x31	; 49
    12da:	f0 e0       	ldi	r31, 0x00	; 0
    12dc:	80 81       	ld	r24, Z
    12de:	48 2f       	mov	r20, r24
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	28 2f       	mov	r18, r24
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	02 2e       	mov	r0, r18
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <DIO_set_pin_direction+0x1d8>
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	0a 94       	dec	r0
    12f4:	e2 f7       	brpl	.-8      	; 0x12ee <DIO_set_pin_direction+0x1d4>
    12f6:	80 95       	com	r24
    12f8:	84 23       	and	r24, r20
    12fa:	8c 93       	st	X, r24
			break;
			}
		}
		return Error_state;
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    12fe:	26 96       	adiw	r28, 0x06	; 6
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	cf 91       	pop	r28
    130c:	df 91       	pop	r29
    130e:	08 95       	ret

00001310 <DIO_get_pin_value>:

u8 DIO_get_pin_value(u8 Port_no,u8 Pin_no,u8*Pin_value){
    1310:	df 93       	push	r29
    1312:	cf 93       	push	r28
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	27 97       	sbiw	r28, 0x07	; 7
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	8a 83       	std	Y+2, r24	; 0x02
    1326:	6b 83       	std	Y+3, r22	; 0x03
    1328:	5d 83       	std	Y+5, r21	; 0x05
    132a:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_state=0;
    132c:	19 82       	std	Y+1, r1	; 0x01
			if(Port_no>=DIO_max_port_no){
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	84 30       	cpi	r24, 0x04	; 4
    1332:	18 f0       	brcs	.+6      	; 0x133a <DIO_get_pin_value+0x2a>
				Error_state=1;
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	89 83       	std	Y+1, r24	; 0x01
    1338:	76 c0       	rjmp	.+236    	; 0x1426 <DIO_get_pin_value+0x116>
			}else if(Pin_no>=DIO_max_pin_no){
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	88 30       	cpi	r24, 0x08	; 8
    133e:	18 f0       	brcs	.+6      	; 0x1346 <DIO_get_pin_value+0x36>
				Error_state=2;
    1340:	82 e0       	ldi	r24, 0x02	; 2
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	70 c0       	rjmp	.+224    	; 0x1426 <DIO_get_pin_value+0x116>
			}else{
				switch(Port_no){
    1346:	8a 81       	ldd	r24, Y+2	; 0x02
    1348:	28 2f       	mov	r18, r24
    134a:	30 e0       	ldi	r19, 0x00	; 0
    134c:	3f 83       	std	Y+7, r19	; 0x07
    134e:	2e 83       	std	Y+6, r18	; 0x06
    1350:	4e 81       	ldd	r20, Y+6	; 0x06
    1352:	5f 81       	ldd	r21, Y+7	; 0x07
    1354:	41 30       	cpi	r20, 0x01	; 1
    1356:	51 05       	cpc	r21, r1
    1358:	59 f1       	breq	.+86     	; 0x13b0 <DIO_get_pin_value+0xa0>
    135a:	8e 81       	ldd	r24, Y+6	; 0x06
    135c:	9f 81       	ldd	r25, Y+7	; 0x07
    135e:	82 30       	cpi	r24, 0x02	; 2
    1360:	91 05       	cpc	r25, r1
    1362:	34 f4       	brge	.+12     	; 0x1370 <DIO_get_pin_value+0x60>
    1364:	2e 81       	ldd	r18, Y+6	; 0x06
    1366:	3f 81       	ldd	r19, Y+7	; 0x07
    1368:	21 15       	cp	r18, r1
    136a:	31 05       	cpc	r19, r1
    136c:	69 f0       	breq	.+26     	; 0x1388 <DIO_get_pin_value+0x78>
    136e:	5b c0       	rjmp	.+182    	; 0x1426 <DIO_get_pin_value+0x116>
    1370:	4e 81       	ldd	r20, Y+6	; 0x06
    1372:	5f 81       	ldd	r21, Y+7	; 0x07
    1374:	42 30       	cpi	r20, 0x02	; 2
    1376:	51 05       	cpc	r21, r1
    1378:	79 f1       	breq	.+94     	; 0x13d8 <DIO_get_pin_value+0xc8>
    137a:	8e 81       	ldd	r24, Y+6	; 0x06
    137c:	9f 81       	ldd	r25, Y+7	; 0x07
    137e:	83 30       	cpi	r24, 0x03	; 3
    1380:	91 05       	cpc	r25, r1
    1382:	09 f4       	brne	.+2      	; 0x1386 <DIO_get_pin_value+0x76>
    1384:	3d c0       	rjmp	.+122    	; 0x1400 <DIO_get_pin_value+0xf0>
    1386:	4f c0       	rjmp	.+158    	; 0x1426 <DIO_get_pin_value+0x116>
				case Group_A: *Pin_value=get_bit(DIO_u8_PINA,Pin_no);
    1388:	e9 e3       	ldi	r30, 0x39	; 57
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	88 2f       	mov	r24, r24
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	a9 01       	movw	r20, r18
    139a:	02 c0       	rjmp	.+4      	; 0x13a0 <DIO_get_pin_value+0x90>
    139c:	55 95       	asr	r21
    139e:	47 95       	ror	r20
    13a0:	8a 95       	dec	r24
    13a2:	e2 f7       	brpl	.-8      	; 0x139c <DIO_get_pin_value+0x8c>
    13a4:	ca 01       	movw	r24, r20
    13a6:	81 70       	andi	r24, 0x01	; 1
    13a8:	ec 81       	ldd	r30, Y+4	; 0x04
    13aa:	fd 81       	ldd	r31, Y+5	; 0x05
    13ac:	80 83       	st	Z, r24
    13ae:	3b c0       	rjmp	.+118    	; 0x1426 <DIO_get_pin_value+0x116>
				break;
				case Group_B: *Pin_value=get_bit(DIO_u8_PINB,Pin_no);
    13b0:	e6 e3       	ldi	r30, 0x36	; 54
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	88 2f       	mov	r24, r24
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	a9 01       	movw	r20, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_get_pin_value+0xb8>
    13c4:	55 95       	asr	r21
    13c6:	47 95       	ror	r20
    13c8:	8a 95       	dec	r24
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_get_pin_value+0xb4>
    13cc:	ca 01       	movw	r24, r20
    13ce:	81 70       	andi	r24, 0x01	; 1
    13d0:	ec 81       	ldd	r30, Y+4	; 0x04
    13d2:	fd 81       	ldd	r31, Y+5	; 0x05
    13d4:	80 83       	st	Z, r24
    13d6:	27 c0       	rjmp	.+78     	; 0x1426 <DIO_get_pin_value+0x116>
				break;
				case Group_C: *Pin_value=get_bit(DIO_u8_PINC,Pin_no);
    13d8:	e3 e3       	ldi	r30, 0x33	; 51
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	88 2f       	mov	r24, r24
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a9 01       	movw	r20, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_get_pin_value+0xe0>
    13ec:	55 95       	asr	r21
    13ee:	47 95       	ror	r20
    13f0:	8a 95       	dec	r24
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_get_pin_value+0xdc>
    13f4:	ca 01       	movw	r24, r20
    13f6:	81 70       	andi	r24, 0x01	; 1
    13f8:	ec 81       	ldd	r30, Y+4	; 0x04
    13fa:	fd 81       	ldd	r31, Y+5	; 0x05
    13fc:	80 83       	st	Z, r24
    13fe:	13 c0       	rjmp	.+38     	; 0x1426 <DIO_get_pin_value+0x116>
				break;
				case Group_D: *Pin_value=get_bit(DIO_u8_PIND,Pin_no);
    1400:	e0 e3       	ldi	r30, 0x30	; 48
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a9 01       	movw	r20, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <DIO_get_pin_value+0x108>
    1414:	55 95       	asr	r21
    1416:	47 95       	ror	r20
    1418:	8a 95       	dec	r24
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <DIO_get_pin_value+0x104>
    141c:	ca 01       	movw	r24, r20
    141e:	81 70       	andi	r24, 0x01	; 1
    1420:	ec 81       	ldd	r30, Y+4	; 0x04
    1422:	fd 81       	ldd	r31, Y+5	; 0x05
    1424:	80 83       	st	Z, r24
				break;
				}
			}
			return Error_state;
    1426:	89 81       	ldd	r24, Y+1	; 0x01
}
    1428:	27 96       	adiw	r28, 0x07	; 7
    142a:	0f b6       	in	r0, 0x3f	; 63
    142c:	f8 94       	cli
    142e:	de bf       	out	0x3e, r29	; 62
    1430:	0f be       	out	0x3f, r0	; 63
    1432:	cd bf       	out	0x3d, r28	; 61
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <DIO_set_port_value>:

u8 DIO_set_port_value(u8 Port_no,u8 Port_value){
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	00 d0       	rcall	.+0      	; 0x1440 <DIO_set_port_value+0x6>
    1440:	00 d0       	rcall	.+0      	; 0x1442 <DIO_set_port_value+0x8>
    1442:	0f 92       	push	r0
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	8a 83       	std	Y+2, r24	; 0x02
    144a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_state=0;
    144c:	19 82       	std	Y+1, r1	; 0x01
		if(Port_no>=DIO_max_port_no){
    144e:	8a 81       	ldd	r24, Y+2	; 0x02
    1450:	84 30       	cpi	r24, 0x04	; 4
    1452:	18 f0       	brcs	.+6      	; 0x145a <DIO_set_port_value+0x20>
			Error_state=1;
    1454:	81 e0       	ldi	r24, 0x01	; 1
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	32 c0       	rjmp	.+100    	; 0x14be <DIO_set_port_value+0x84>
		}else if(Port_value>DIO_max_port_value){
			Error_state=2;
		}else{
			switch(Port_no){
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	3d 83       	std	Y+5, r19	; 0x05
    1462:	2c 83       	std	Y+4, r18	; 0x04
    1464:	8c 81       	ldd	r24, Y+4	; 0x04
    1466:	9d 81       	ldd	r25, Y+5	; 0x05
    1468:	81 30       	cpi	r24, 0x01	; 1
    146a:	91 05       	cpc	r25, r1
    146c:	d1 f0       	breq	.+52     	; 0x14a2 <DIO_set_port_value+0x68>
    146e:	2c 81       	ldd	r18, Y+4	; 0x04
    1470:	3d 81       	ldd	r19, Y+5	; 0x05
    1472:	22 30       	cpi	r18, 0x02	; 2
    1474:	31 05       	cpc	r19, r1
    1476:	2c f4       	brge	.+10     	; 0x1482 <DIO_set_port_value+0x48>
    1478:	8c 81       	ldd	r24, Y+4	; 0x04
    147a:	9d 81       	ldd	r25, Y+5	; 0x05
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	61 f0       	breq	.+24     	; 0x1498 <DIO_set_port_value+0x5e>
    1480:	1e c0       	rjmp	.+60     	; 0x14be <DIO_set_port_value+0x84>
    1482:	2c 81       	ldd	r18, Y+4	; 0x04
    1484:	3d 81       	ldd	r19, Y+5	; 0x05
    1486:	22 30       	cpi	r18, 0x02	; 2
    1488:	31 05       	cpc	r19, r1
    148a:	81 f0       	breq	.+32     	; 0x14ac <DIO_set_port_value+0x72>
    148c:	8c 81       	ldd	r24, Y+4	; 0x04
    148e:	9d 81       	ldd	r25, Y+5	; 0x05
    1490:	83 30       	cpi	r24, 0x03	; 3
    1492:	91 05       	cpc	r25, r1
    1494:	81 f0       	breq	.+32     	; 0x14b6 <DIO_set_port_value+0x7c>
    1496:	13 c0       	rjmp	.+38     	; 0x14be <DIO_set_port_value+0x84>
			case Group_A: DIO_u8_PORTA=Port_value;
    1498:	eb e3       	ldi	r30, 0x3B	; 59
    149a:	f0 e0       	ldi	r31, 0x00	; 0
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	80 83       	st	Z, r24
    14a0:	0e c0       	rjmp	.+28     	; 0x14be <DIO_set_port_value+0x84>
			break;
			case Group_B: DIO_u8_PORTB=Port_value;
    14a2:	e8 e3       	ldi	r30, 0x38	; 56
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	80 83       	st	Z, r24
    14aa:	09 c0       	rjmp	.+18     	; 0x14be <DIO_set_port_value+0x84>
			break;
			case Group_C: DIO_u8_PORTC=Port_value;
    14ac:	e5 e3       	ldi	r30, 0x35	; 53
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	80 83       	st	Z, r24
    14b4:	04 c0       	rjmp	.+8      	; 0x14be <DIO_set_port_value+0x84>
			break;
			case Group_D: DIO_u8_PORTD=Port_value;
    14b6:	e2 e3       	ldi	r30, 0x32	; 50
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	80 83       	st	Z, r24
			break;
			}
		}
		return Error_state;
    14be:	89 81       	ldd	r24, Y+1	; 0x01
}
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <DIO_set_port_direction>:

u8 DIO_set_port_direction(u8 Port_no,u8 Port_direction){
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <DIO_set_port_direction+0x6>
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <DIO_set_port_direction+0x8>
    14d8:	0f 92       	push	r0
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	8a 83       	std	Y+2, r24	; 0x02
    14e0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_state=0;
    14e2:	19 82       	std	Y+1, r1	; 0x01
			if(Port_no>=DIO_max_port_no){
    14e4:	8a 81       	ldd	r24, Y+2	; 0x02
    14e6:	84 30       	cpi	r24, 0x04	; 4
    14e8:	18 f0       	brcs	.+6      	; 0x14f0 <DIO_set_port_direction+0x20>
				Error_state=1;
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	89 83       	std	Y+1, r24	; 0x01
    14ee:	32 c0       	rjmp	.+100    	; 0x1554 <DIO_set_port_direction+0x84>
			}else if(Port_direction>DIO_max_port_direction){
				Error_state=2;
			}else{
				switch(Port_no){
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	3d 83       	std	Y+5, r19	; 0x05
    14f8:	2c 83       	std	Y+4, r18	; 0x04
    14fa:	8c 81       	ldd	r24, Y+4	; 0x04
    14fc:	9d 81       	ldd	r25, Y+5	; 0x05
    14fe:	81 30       	cpi	r24, 0x01	; 1
    1500:	91 05       	cpc	r25, r1
    1502:	d1 f0       	breq	.+52     	; 0x1538 <DIO_set_port_direction+0x68>
    1504:	2c 81       	ldd	r18, Y+4	; 0x04
    1506:	3d 81       	ldd	r19, Y+5	; 0x05
    1508:	22 30       	cpi	r18, 0x02	; 2
    150a:	31 05       	cpc	r19, r1
    150c:	2c f4       	brge	.+10     	; 0x1518 <DIO_set_port_direction+0x48>
    150e:	8c 81       	ldd	r24, Y+4	; 0x04
    1510:	9d 81       	ldd	r25, Y+5	; 0x05
    1512:	00 97       	sbiw	r24, 0x00	; 0
    1514:	61 f0       	breq	.+24     	; 0x152e <DIO_set_port_direction+0x5e>
    1516:	1e c0       	rjmp	.+60     	; 0x1554 <DIO_set_port_direction+0x84>
    1518:	2c 81       	ldd	r18, Y+4	; 0x04
    151a:	3d 81       	ldd	r19, Y+5	; 0x05
    151c:	22 30       	cpi	r18, 0x02	; 2
    151e:	31 05       	cpc	r19, r1
    1520:	81 f0       	breq	.+32     	; 0x1542 <DIO_set_port_direction+0x72>
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	9d 81       	ldd	r25, Y+5	; 0x05
    1526:	83 30       	cpi	r24, 0x03	; 3
    1528:	91 05       	cpc	r25, r1
    152a:	81 f0       	breq	.+32     	; 0x154c <DIO_set_port_direction+0x7c>
    152c:	13 c0       	rjmp	.+38     	; 0x1554 <DIO_set_port_direction+0x84>
				case Group_A: DIO_u8_DDRA=Port_direction;
    152e:	ea e3       	ldi	r30, 0x3A	; 58
    1530:	f0 e0       	ldi	r31, 0x00	; 0
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	80 83       	st	Z, r24
    1536:	0e c0       	rjmp	.+28     	; 0x1554 <DIO_set_port_direction+0x84>
				break;
				case Group_B: DIO_u8_DDRB=Port_direction;
    1538:	e7 e3       	ldi	r30, 0x37	; 55
    153a:	f0 e0       	ldi	r31, 0x00	; 0
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	80 83       	st	Z, r24
    1540:	09 c0       	rjmp	.+18     	; 0x1554 <DIO_set_port_direction+0x84>
				break;
				case Group_C: DIO_u8_DDRC=Port_direction;
    1542:	e4 e3       	ldi	r30, 0x34	; 52
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	80 83       	st	Z, r24
    154a:	04 c0       	rjmp	.+8      	; 0x1554 <DIO_set_port_direction+0x84>
				break;
				case Group_D: DIO_u8_DDRD=Port_direction;;
    154c:	e1 e3       	ldi	r30, 0x31	; 49
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	80 83       	st	Z, r24
				break;
				}
			}
			return Error_state;
    1554:	89 81       	ldd	r24, Y+1	; 0x01
}
    1556:	0f 90       	pop	r0
    1558:	0f 90       	pop	r0
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	cf 91       	pop	r28
    1562:	df 91       	pop	r29
    1564:	08 95       	ret

00001566 <send_command>:
#include"LCD_Interface.h"

//write command in lcd rs put low (rs: register select)
//******************************************study***********************
void send_command(u8 command)
{//rs low to write command
    1566:	df 93       	push	r29
    1568:	cf 93       	push	r28
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	2f 97       	sbiw	r28, 0x0f	; 15
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	de bf       	out	0x3e, r29	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	cd bf       	out	0x3d, r28	; 61
    157a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_set_pin_value(LCD_Control_Port,LCD_RS_Pin,DIO_Low);
    157c:	81 e0       	ldi	r24, 0x01	; 1
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
	//rw low to write not read
	DIO_set_pin_value(LCD_Control_Port,LCD_RW_Pin,DIO_Low);
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	61 e0       	ldi	r22, 0x01	; 1
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
	//set command in pins
	DIO_set_port_value(LCD_Data_Port,command);
    1590:	82 e0       	ldi	r24, 0x02	; 2
    1592:	6f 85       	ldd	r22, Y+15	; 0x0f
    1594:	0e 94 1d 0a 	call	0x143a	; 0x143a <DIO_set_port_value>
//final eneble the lcd to lcd know the data or command sent (pulse)
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_High);
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	62 e0       	ldi	r22, 0x02	; 2
    159c:	41 e0       	ldi	r20, 0x01	; 1
    159e:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	a0 e0       	ldi	r26, 0x00	; 0
    15a8:	b0 e4       	ldi	r27, 0x40	; 64
    15aa:	8b 87       	std	Y+11, r24	; 0x0b
    15ac:	9c 87       	std	Y+12, r25	; 0x0c
    15ae:	ad 87       	std	Y+13, r26	; 0x0d
    15b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	4a ef       	ldi	r20, 0xFA	; 250
    15c0:	54 e4       	ldi	r21, 0x44	; 68
    15c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	8f 83       	std	Y+7, r24	; 0x07
    15cc:	98 87       	std	Y+8, r25	; 0x08
    15ce:	a9 87       	std	Y+9, r26	; 0x09
    15d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15d2:	6f 81       	ldd	r22, Y+7	; 0x07
    15d4:	78 85       	ldd	r23, Y+8	; 0x08
    15d6:	89 85       	ldd	r24, Y+9	; 0x09
    15d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15da:	20 e0       	ldi	r18, 0x00	; 0
    15dc:	30 e0       	ldi	r19, 0x00	; 0
    15de:	40 e8       	ldi	r20, 0x80	; 128
    15e0:	5f e3       	ldi	r21, 0x3F	; 63
    15e2:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    15e6:	88 23       	and	r24, r24
    15e8:	2c f4       	brge	.+10     	; 0x15f4 <send_command+0x8e>
		__ticks = 1;
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	9e 83       	std	Y+6, r25	; 0x06
    15f0:	8d 83       	std	Y+5, r24	; 0x05
    15f2:	3f c0       	rjmp	.+126    	; 0x1672 <send_command+0x10c>
	else if (__tmp > 65535)
    15f4:	6f 81       	ldd	r22, Y+7	; 0x07
    15f6:	78 85       	ldd	r23, Y+8	; 0x08
    15f8:	89 85       	ldd	r24, Y+9	; 0x09
    15fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fc:	20 e0       	ldi	r18, 0x00	; 0
    15fe:	3f ef       	ldi	r19, 0xFF	; 255
    1600:	4f e7       	ldi	r20, 0x7F	; 127
    1602:	57 e4       	ldi	r21, 0x47	; 71
    1604:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1608:	18 16       	cp	r1, r24
    160a:	4c f5       	brge	.+82     	; 0x165e <send_command+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    160c:	6b 85       	ldd	r22, Y+11	; 0x0b
    160e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1610:	8d 85       	ldd	r24, Y+13	; 0x0d
    1612:	9e 85       	ldd	r25, Y+14	; 0x0e
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	40 e2       	ldi	r20, 0x20	; 32
    161a:	51 e4       	ldi	r21, 0x41	; 65
    161c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1620:	dc 01       	movw	r26, r24
    1622:	cb 01       	movw	r24, r22
    1624:	bc 01       	movw	r22, r24
    1626:	cd 01       	movw	r24, r26
    1628:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    162c:	dc 01       	movw	r26, r24
    162e:	cb 01       	movw	r24, r22
    1630:	9e 83       	std	Y+6, r25	; 0x06
    1632:	8d 83       	std	Y+5, r24	; 0x05
    1634:	0f c0       	rjmp	.+30     	; 0x1654 <send_command+0xee>
    1636:	88 ec       	ldi	r24, 0xC8	; 200
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	9c 83       	std	Y+4, r25	; 0x04
    163c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	9c 81       	ldd	r25, Y+4	; 0x04
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	f1 f7       	brne	.-4      	; 0x1642 <send_command+0xdc>
    1646:	9c 83       	std	Y+4, r25	; 0x04
    1648:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    164a:	8d 81       	ldd	r24, Y+5	; 0x05
    164c:	9e 81       	ldd	r25, Y+6	; 0x06
    164e:	01 97       	sbiw	r24, 0x01	; 1
    1650:	9e 83       	std	Y+6, r25	; 0x06
    1652:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1654:	8d 81       	ldd	r24, Y+5	; 0x05
    1656:	9e 81       	ldd	r25, Y+6	; 0x06
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	69 f7       	brne	.-38     	; 0x1636 <send_command+0xd0>
    165c:	14 c0       	rjmp	.+40     	; 0x1686 <send_command+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    165e:	6f 81       	ldd	r22, Y+7	; 0x07
    1660:	78 85       	ldd	r23, Y+8	; 0x08
    1662:	89 85       	ldd	r24, Y+9	; 0x09
    1664:	9a 85       	ldd	r25, Y+10	; 0x0a
    1666:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    166a:	dc 01       	movw	r26, r24
    166c:	cb 01       	movw	r24, r22
    166e:	9e 83       	std	Y+6, r25	; 0x06
    1670:	8d 83       	std	Y+5, r24	; 0x05
    1672:	8d 81       	ldd	r24, Y+5	; 0x05
    1674:	9e 81       	ldd	r25, Y+6	; 0x06
    1676:	9a 83       	std	Y+2, r25	; 0x02
    1678:	89 83       	std	Y+1, r24	; 0x01
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	9a 81       	ldd	r25, Y+2	; 0x02
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	f1 f7       	brne	.-4      	; 0x167e <send_command+0x118>
    1682:	9a 83       	std	Y+2, r25	; 0x02
    1684:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_Low);
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	62 e0       	ldi	r22, 0x02	; 2
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>

}
    1690:	2f 96       	adiw	r28, 0x0f	; 15
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	cf 91       	pop	r28
    169e:	df 91       	pop	r29
    16a0:	08 95       	ret

000016a2 <send_data>:
void send_data(u8 data)
{//rs low to write command
    16a2:	df 93       	push	r29
    16a4:	cf 93       	push	r28
    16a6:	cd b7       	in	r28, 0x3d	; 61
    16a8:	de b7       	in	r29, 0x3e	; 62
    16aa:	2f 97       	sbiw	r28, 0x0f	; 15
    16ac:	0f b6       	in	r0, 0x3f	; 63
    16ae:	f8 94       	cli
    16b0:	de bf       	out	0x3e, r29	; 62
    16b2:	0f be       	out	0x3f, r0	; 63
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_set_pin_value(LCD_Control_Port,LCD_RS_Pin,DIO_High);
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	41 e0       	ldi	r20, 0x01	; 1
    16be:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
	//rw low to write not read
	DIO_set_pin_value(LCD_Control_Port,LCD_RW_Pin,DIO_Low);
    16c2:	81 e0       	ldi	r24, 0x01	; 1
    16c4:	61 e0       	ldi	r22, 0x01	; 1
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
	//set command in pins
	DIO_set_port_value(LCD_Data_Port,data);
    16cc:	82 e0       	ldi	r24, 0x02	; 2
    16ce:	6f 85       	ldd	r22, Y+15	; 0x0f
    16d0:	0e 94 1d 0a 	call	0x143a	; 0x143a <DIO_set_port_value>
//final eneble the lcd to lcd know the data or command sent (pulse)
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_High);
    16d4:	81 e0       	ldi	r24, 0x01	; 1
    16d6:	62 e0       	ldi	r22, 0x02	; 2
    16d8:	41 e0       	ldi	r20, 0x01	; 1
    16da:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	a0 e0       	ldi	r26, 0x00	; 0
    16e4:	b0 e4       	ldi	r27, 0x40	; 64
    16e6:	8b 87       	std	Y+11, r24	; 0x0b
    16e8:	9c 87       	std	Y+12, r25	; 0x0c
    16ea:	ad 87       	std	Y+13, r26	; 0x0d
    16ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    16f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	4a ef       	ldi	r20, 0xFA	; 250
    16fc:	54 e4       	ldi	r21, 0x44	; 68
    16fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1702:	dc 01       	movw	r26, r24
    1704:	cb 01       	movw	r24, r22
    1706:	8f 83       	std	Y+7, r24	; 0x07
    1708:	98 87       	std	Y+8, r25	; 0x08
    170a:	a9 87       	std	Y+9, r26	; 0x09
    170c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    170e:	6f 81       	ldd	r22, Y+7	; 0x07
    1710:	78 85       	ldd	r23, Y+8	; 0x08
    1712:	89 85       	ldd	r24, Y+9	; 0x09
    1714:	9a 85       	ldd	r25, Y+10	; 0x0a
    1716:	20 e0       	ldi	r18, 0x00	; 0
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	40 e8       	ldi	r20, 0x80	; 128
    171c:	5f e3       	ldi	r21, 0x3F	; 63
    171e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1722:	88 23       	and	r24, r24
    1724:	2c f4       	brge	.+10     	; 0x1730 <send_data+0x8e>
		__ticks = 1;
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	9e 83       	std	Y+6, r25	; 0x06
    172c:	8d 83       	std	Y+5, r24	; 0x05
    172e:	3f c0       	rjmp	.+126    	; 0x17ae <send_data+0x10c>
	else if (__tmp > 65535)
    1730:	6f 81       	ldd	r22, Y+7	; 0x07
    1732:	78 85       	ldd	r23, Y+8	; 0x08
    1734:	89 85       	ldd	r24, Y+9	; 0x09
    1736:	9a 85       	ldd	r25, Y+10	; 0x0a
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	3f ef       	ldi	r19, 0xFF	; 255
    173c:	4f e7       	ldi	r20, 0x7F	; 127
    173e:	57 e4       	ldi	r21, 0x47	; 71
    1740:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1744:	18 16       	cp	r1, r24
    1746:	4c f5       	brge	.+82     	; 0x179a <send_data+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1748:	6b 85       	ldd	r22, Y+11	; 0x0b
    174a:	7c 85       	ldd	r23, Y+12	; 0x0c
    174c:	8d 85       	ldd	r24, Y+13	; 0x0d
    174e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e2       	ldi	r20, 0x20	; 32
    1756:	51 e4       	ldi	r21, 0x41	; 65
    1758:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	bc 01       	movw	r22, r24
    1762:	cd 01       	movw	r24, r26
    1764:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1768:	dc 01       	movw	r26, r24
    176a:	cb 01       	movw	r24, r22
    176c:	9e 83       	std	Y+6, r25	; 0x06
    176e:	8d 83       	std	Y+5, r24	; 0x05
    1770:	0f c0       	rjmp	.+30     	; 0x1790 <send_data+0xee>
    1772:	88 ec       	ldi	r24, 0xC8	; 200
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	9c 83       	std	Y+4, r25	; 0x04
    1778:	8b 83       	std	Y+3, r24	; 0x03
    177a:	8b 81       	ldd	r24, Y+3	; 0x03
    177c:	9c 81       	ldd	r25, Y+4	; 0x04
    177e:	01 97       	sbiw	r24, 0x01	; 1
    1780:	f1 f7       	brne	.-4      	; 0x177e <send_data+0xdc>
    1782:	9c 83       	std	Y+4, r25	; 0x04
    1784:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1786:	8d 81       	ldd	r24, Y+5	; 0x05
    1788:	9e 81       	ldd	r25, Y+6	; 0x06
    178a:	01 97       	sbiw	r24, 0x01	; 1
    178c:	9e 83       	std	Y+6, r25	; 0x06
    178e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1790:	8d 81       	ldd	r24, Y+5	; 0x05
    1792:	9e 81       	ldd	r25, Y+6	; 0x06
    1794:	00 97       	sbiw	r24, 0x00	; 0
    1796:	69 f7       	brne	.-38     	; 0x1772 <send_data+0xd0>
    1798:	14 c0       	rjmp	.+40     	; 0x17c2 <send_data+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    179a:	6f 81       	ldd	r22, Y+7	; 0x07
    179c:	78 85       	ldd	r23, Y+8	; 0x08
    179e:	89 85       	ldd	r24, Y+9	; 0x09
    17a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    17a6:	dc 01       	movw	r26, r24
    17a8:	cb 01       	movw	r24, r22
    17aa:	9e 83       	std	Y+6, r25	; 0x06
    17ac:	8d 83       	std	Y+5, r24	; 0x05
    17ae:	8d 81       	ldd	r24, Y+5	; 0x05
    17b0:	9e 81       	ldd	r25, Y+6	; 0x06
    17b2:	9a 83       	std	Y+2, r25	; 0x02
    17b4:	89 83       	std	Y+1, r24	; 0x01
    17b6:	89 81       	ldd	r24, Y+1	; 0x01
    17b8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	f1 f7       	brne	.-4      	; 0x17ba <send_data+0x118>
    17be:	9a 83       	std	Y+2, r25	; 0x02
    17c0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_Low);
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	62 e0       	ldi	r22, 0x02	; 2
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>

}
    17cc:	2f 96       	adiw	r28, 0x0f	; 15
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	cf 91       	pop	r28
    17da:	df 91       	pop	r29
    17dc:	08 95       	ret

000017de <send_string>:

void send_string(const char *string_data)
{
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	00 d0       	rcall	.+0      	; 0x17e4 <send_string+0x6>
    17e4:	0f 92       	push	r0
    17e6:	cd b7       	in	r28, 0x3d	; 61
    17e8:	de b7       	in	r29, 0x3e	; 62
    17ea:	9b 83       	std	Y+3, r25	; 0x03
    17ec:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter=0;
    17ee:	19 82       	std	Y+1, r1	; 0x01
    17f0:	0e c0       	rjmp	.+28     	; 0x180e <send_string+0x30>
	while(string_data[counter]!='\0')
	{
		send_data(string_data[counter]);
    17f2:	89 81       	ldd	r24, Y+1	; 0x01
    17f4:	28 2f       	mov	r18, r24
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	9b 81       	ldd	r25, Y+3	; 0x03
    17fc:	fc 01       	movw	r30, r24
    17fe:	e2 0f       	add	r30, r18
    1800:	f3 1f       	adc	r31, r19
    1802:	80 81       	ld	r24, Z
    1804:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <send_data>
		counter++;
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	8f 5f       	subi	r24, 0xFF	; 255
    180c:	89 83       	std	Y+1, r24	; 0x01
}

void send_string(const char *string_data)
{
	u8 counter=0;
	while(string_data[counter]!='\0')
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	8a 81       	ldd	r24, Y+2	; 0x02
    1816:	9b 81       	ldd	r25, Y+3	; 0x03
    1818:	fc 01       	movw	r30, r24
    181a:	e2 0f       	add	r30, r18
    181c:	f3 1f       	adc	r31, r19
    181e:	80 81       	ld	r24, Z
    1820:	88 23       	and	r24, r24
    1822:	39 f7       	brne	.-50     	; 0x17f2 <send_string+0x14>
	{
		send_data(string_data[counter]);
		counter++;
	}

}
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	08 95       	ret

00001830 <go_pos>:

void go_pos(u8 x_pos, u8 y_pos)
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	00 d0       	rcall	.+0      	; 0x1836 <go_pos+0x6>
    1836:	0f 92       	push	r0
    1838:	cd b7       	in	r28, 0x3d	; 61
    183a:	de b7       	in	r29, 0x3e	; 62
    183c:	8a 83       	std	Y+2, r24	; 0x02
    183e:	6b 83       	std	Y+3, r22	; 0x03
	u8 address;
	if (y_pos==0)
    1840:	8b 81       	ldd	r24, Y+3	; 0x03
    1842:	88 23       	and	r24, r24
    1844:	19 f4       	brne	.+6      	; 0x184c <go_pos+0x1c>
		address= x_pos;
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	89 83       	std	Y+1, r24	; 0x01
    184a:	06 c0       	rjmp	.+12     	; 0x1858 <go_pos+0x28>
	else if(y_pos==1)
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	19 f4       	brne	.+6      	; 0x1858 <go_pos+0x28>
	address=(x_pos+ start_secound_colom);
    1852:	8a 81       	ldd	r24, Y+2	; 0x02
    1854:	80 5c       	subi	r24, 0xC0	; 192
    1856:	89 83       	std	Y+1, r24	; 0x01

	send_command(address+data_sheet_send_pos_command);
    1858:	89 81       	ldd	r24, Y+1	; 0x01
    185a:	80 58       	subi	r24, 0x80	; 128
    185c:	0e 94 b3 0a 	call	0x1566	; 0x1566 <send_command>

}
    1860:	0f 90       	pop	r0
    1862:	0f 90       	pop	r0
    1864:	0f 90       	pop	r0
    1866:	cf 91       	pop	r28
    1868:	df 91       	pop	r29
    186a:	08 95       	ret

0000186c <write_num>:

void write_num (u32 num)
{
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	6a 97       	sbiw	r28, 0x1a	; 26
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	6f 8b       	std	Y+23, r22	; 0x17
    1882:	78 8f       	std	Y+24, r23	; 0x18
    1884:	89 8f       	std	Y+25, r24	; 0x19
    1886:	9a 8f       	std	Y+26, r25	; 0x1a
	u8 rem,arr[20], arr_index=0;
    1888:	19 82       	std	Y+1, r1	; 0x01
	if (num =='0')
    188a:	8f 89       	ldd	r24, Y+23	; 0x17
    188c:	98 8d       	ldd	r25, Y+24	; 0x18
    188e:	a9 8d       	ldd	r26, Y+25	; 0x19
    1890:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1892:	80 33       	cpi	r24, 0x30	; 48
    1894:	91 05       	cpc	r25, r1
    1896:	a1 05       	cpc	r26, r1
    1898:	b1 05       	cpc	r27, r1
    189a:	f1 f5       	brne	.+124    	; 0x1918 <write_num+0xac>
		{arr[arr_index]='0';
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	ce 01       	movw	r24, r28
    18a4:	03 96       	adiw	r24, 0x03	; 3
    18a6:	fc 01       	movw	r30, r24
    18a8:	e2 0f       	add	r30, r18
    18aa:	f3 1f       	adc	r31, r19
    18ac:	80 e3       	ldi	r24, 0x30	; 48
    18ae:	80 83       	st	Z, r24
	arr_index++;}
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	8f 5f       	subi	r24, 0xFF	; 255
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	30 c0       	rjmp	.+96     	; 0x1918 <write_num+0xac>
	while(num!='0')
		{
			rem=num % 10;
    18b8:	8f 89       	ldd	r24, Y+23	; 0x17
    18ba:	98 8d       	ldd	r25, Y+24	; 0x18
    18bc:	a9 8d       	ldd	r26, Y+25	; 0x19
    18be:	ba 8d       	ldd	r27, Y+26	; 0x1a
    18c0:	2a e0       	ldi	r18, 0x0A	; 10
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	40 e0       	ldi	r20, 0x00	; 0
    18c6:	50 e0       	ldi	r21, 0x00	; 0
    18c8:	bc 01       	movw	r22, r24
    18ca:	cd 01       	movw	r24, r26
    18cc:	0e 94 9a 14 	call	0x2934	; 0x2934 <__udivmodsi4>
    18d0:	dc 01       	movw	r26, r24
    18d2:	cb 01       	movw	r24, r22
    18d4:	8a 83       	std	Y+2, r24	; 0x02
			arr[arr_index]=rem+'0';
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	48 2f       	mov	r20, r24
    18e0:	40 5d       	subi	r20, 0xD0	; 208
    18e2:	ce 01       	movw	r24, r28
    18e4:	03 96       	adiw	r24, 0x03	; 3
    18e6:	fc 01       	movw	r30, r24
    18e8:	e2 0f       	add	r30, r18
    18ea:	f3 1f       	adc	r31, r19
    18ec:	40 83       	st	Z, r20
			arr_index++;
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	8f 5f       	subi	r24, 0xFF	; 255
    18f2:	89 83       	std	Y+1, r24	; 0x01
			num= num/10;
    18f4:	8f 89       	ldd	r24, Y+23	; 0x17
    18f6:	98 8d       	ldd	r25, Y+24	; 0x18
    18f8:	a9 8d       	ldd	r26, Y+25	; 0x19
    18fa:	ba 8d       	ldd	r27, Y+26	; 0x1a
    18fc:	2a e0       	ldi	r18, 0x0A	; 10
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e0       	ldi	r20, 0x00	; 0
    1902:	50 e0       	ldi	r21, 0x00	; 0
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 9a 14 	call	0x2934	; 0x2934 <__udivmodsi4>
    190c:	da 01       	movw	r26, r20
    190e:	c9 01       	movw	r24, r18
    1910:	8f 8b       	std	Y+23, r24	; 0x17
    1912:	98 8f       	std	Y+24, r25	; 0x18
    1914:	a9 8f       	std	Y+25, r26	; 0x19
    1916:	ba 8f       	std	Y+26, r27	; 0x1a
{
	u8 rem,arr[20], arr_index=0;
	if (num =='0')
		{arr[arr_index]='0';
	arr_index++;}
	while(num!='0')
    1918:	8f 89       	ldd	r24, Y+23	; 0x17
    191a:	98 8d       	ldd	r25, Y+24	; 0x18
    191c:	a9 8d       	ldd	r26, Y+25	; 0x19
    191e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    1920:	80 33       	cpi	r24, 0x30	; 48
    1922:	91 05       	cpc	r25, r1
    1924:	a1 05       	cpc	r26, r1
    1926:	b1 05       	cpc	r27, r1
    1928:	39 f6       	brne	.-114    	; 0x18b8 <write_num+0x4c>
			arr_index++;
			num= num/10;


		}
	arr[arr_index]='\0';
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	ce 01       	movw	r24, r28
    1932:	03 96       	adiw	r24, 0x03	; 3
    1934:	fc 01       	movw	r30, r24
    1936:	e2 0f       	add	r30, r18
    1938:	f3 1f       	adc	r31, r19
    193a:	10 82       	st	Z, r1
reverse(arr,arr_index);
    193c:	ce 01       	movw	r24, r28
    193e:	03 96       	adiw	r24, 0x03	; 3
    1940:	69 81       	ldd	r22, Y+1	; 0x01
    1942:	0e 94 2b 11 	call	0x2256	; 0x2256 <reverse>
send_string(arr);
    1946:	ce 01       	movw	r24, r28
    1948:	03 96       	adiw	r24, 0x03	; 3
    194a:	0e 94 ef 0b 	call	0x17de	; 0x17de <send_string>

}
    194e:	6a 96       	adiw	r28, 0x1a	; 26
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <LCD_write_cmd>:
//****************************************************************

void LCD_write_cmd(u8 cmd){
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	0f 92       	push	r0
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
    196a:	89 83       	std	Y+1, r24	; 0x01
	DIO_set_pin_value(LCD_Control_Port,LCD_RS_Pin,DIO_Low);
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	60 e0       	ldi	r22, 0x00	; 0
    1970:	40 e0       	ldi	r20, 0x00	; 0
    1972:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
	LCD_write(cmd);
    1976:	89 81       	ldd	r24, Y+1	; 0x01
    1978:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_write>
}
    197c:	0f 90       	pop	r0
    197e:	cf 91       	pop	r28
    1980:	df 91       	pop	r29
    1982:	08 95       	ret

00001984 <LCD_write_data>:

void LCD_write_data(u8 data){
    1984:	df 93       	push	r29
    1986:	cf 93       	push	r28
    1988:	0f 92       	push	r0
    198a:	cd b7       	in	r28, 0x3d	; 61
    198c:	de b7       	in	r29, 0x3e	; 62
    198e:	89 83       	std	Y+1, r24	; 0x01
	DIO_set_pin_value(LCD_Control_Port,LCD_RS_Pin,DIO_High);
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	60 e0       	ldi	r22, 0x00	; 0
    1994:	41 e0       	ldi	r20, 0x01	; 1
    1996:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
	LCD_write(data);
    199a:	89 81       	ldd	r24, Y+1	; 0x01
    199c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <LCD_write>
}
    19a0:	0f 90       	pop	r0
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <LCD_write>:

void LCD_write(u8 value){
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	61 97       	sbiw	r28, 0x11	; 17
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	f8 94       	cli
    19b6:	de bf       	out	0x3e, r29	; 62
    19b8:	0f be       	out	0x3f, r0	; 63
    19ba:	cd bf       	out	0x3d, r28	; 61
    19bc:	89 8b       	std	Y+17, r24	; 0x11
	DIO_set_pin_value(LCD_Control_Port,LCD_RW_Pin,DIO_Low);
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	61 e0       	ldi	r22, 0x01	; 1
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
	for(int i=0;i<8;i++){
    19c8:	18 8a       	std	Y+16, r1	; 0x10
    19ca:	1f 86       	std	Y+15, r1	; 0x0f
    19cc:	16 c0       	rjmp	.+44     	; 0x19fa <LCD_write+0x52>
		DIO_set_pin_value(LCD_Data_Port,i,get_bit(value,i));//get bit for get each bit from byte cmd or data
    19ce:	2f 85       	ldd	r18, Y+15	; 0x0f
    19d0:	89 89       	ldd	r24, Y+17	; 0x11
    19d2:	88 2f       	mov	r24, r24
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	0f 84       	ldd	r0, Y+15	; 0x0f
    19d8:	02 c0       	rjmp	.+4      	; 0x19de <LCD_write+0x36>
    19da:	95 95       	asr	r25
    19dc:	87 95       	ror	r24
    19de:	0a 94       	dec	r0
    19e0:	e2 f7       	brpl	.-8      	; 0x19da <LCD_write+0x32>
    19e2:	98 2f       	mov	r25, r24
    19e4:	91 70       	andi	r25, 0x01	; 1
    19e6:	82 e0       	ldi	r24, 0x02	; 2
    19e8:	62 2f       	mov	r22, r18
    19ea:	49 2f       	mov	r20, r25
    19ec:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
	LCD_write(data);
}

void LCD_write(u8 value){
	DIO_set_pin_value(LCD_Control_Port,LCD_RW_Pin,DIO_Low);
	for(int i=0;i<8;i++){
    19f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f2:	98 89       	ldd	r25, Y+16	; 0x10
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	98 8b       	std	Y+16, r25	; 0x10
    19f8:	8f 87       	std	Y+15, r24	; 0x0f
    19fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fc:	98 89       	ldd	r25, Y+16	; 0x10
    19fe:	88 30       	cpi	r24, 0x08	; 8
    1a00:	91 05       	cpc	r25, r1
    1a02:	2c f3       	brlt	.-54     	; 0x19ce <LCD_write+0x26>
		DIO_set_pin_value(LCD_Data_Port,i,get_bit(value,i));//get bit for get each bit from byte cmd or data
	}
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_High); //pulse for know instruction is coming
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	62 e0       	ldi	r22, 0x02	; 2
    1a08:	41 e0       	ldi	r20, 0x01	; 1
    1a0a:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a0 e8       	ldi	r26, 0x80	; 128
    1a14:	bf e3       	ldi	r27, 0x3F	; 63
    1a16:	8b 87       	std	Y+11, r24	; 0x0b
    1a18:	9c 87       	std	Y+12, r25	; 0x0c
    1a1a:	ad 87       	std	Y+13, r26	; 0x0d
    1a1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	4a ef       	ldi	r20, 0xFA	; 250
    1a2c:	54 e4       	ldi	r21, 0x44	; 68
    1a2e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	8f 83       	std	Y+7, r24	; 0x07
    1a38:	98 87       	std	Y+8, r25	; 0x08
    1a3a:	a9 87       	std	Y+9, r26	; 0x09
    1a3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1a40:	78 85       	ldd	r23, Y+8	; 0x08
    1a42:	89 85       	ldd	r24, Y+9	; 0x09
    1a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a46:	20 e0       	ldi	r18, 0x00	; 0
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	40 e8       	ldi	r20, 0x80	; 128
    1a4c:	5f e3       	ldi	r21, 0x3F	; 63
    1a4e:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1a52:	88 23       	and	r24, r24
    1a54:	2c f4       	brge	.+10     	; 0x1a60 <LCD_write+0xb8>
		__ticks = 1;
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	9e 83       	std	Y+6, r25	; 0x06
    1a5c:	8d 83       	std	Y+5, r24	; 0x05
    1a5e:	3f c0       	rjmp	.+126    	; 0x1ade <LCD_write+0x136>
	else if (__tmp > 65535)
    1a60:	6f 81       	ldd	r22, Y+7	; 0x07
    1a62:	78 85       	ldd	r23, Y+8	; 0x08
    1a64:	89 85       	ldd	r24, Y+9	; 0x09
    1a66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	3f ef       	ldi	r19, 0xFF	; 255
    1a6c:	4f e7       	ldi	r20, 0x7F	; 127
    1a6e:	57 e4       	ldi	r21, 0x47	; 71
    1a70:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1a74:	18 16       	cp	r1, r24
    1a76:	4c f5       	brge	.+82     	; 0x1aca <LCD_write+0x122>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e2       	ldi	r20, 0x20	; 32
    1a86:	51 e4       	ldi	r21, 0x41	; 65
    1a88:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a8c:	dc 01       	movw	r26, r24
    1a8e:	cb 01       	movw	r24, r22
    1a90:	bc 01       	movw	r22, r24
    1a92:	cd 01       	movw	r24, r26
    1a94:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	9e 83       	std	Y+6, r25	; 0x06
    1a9e:	8d 83       	std	Y+5, r24	; 0x05
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <LCD_write+0x118>
    1aa2:	88 ec       	ldi	r24, 0xC8	; 200
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	9c 83       	std	Y+4, r25	; 0x04
    1aa8:	8b 83       	std	Y+3, r24	; 0x03
    1aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    1aac:	9c 81       	ldd	r25, Y+4	; 0x04
    1aae:	01 97       	sbiw	r24, 0x01	; 1
    1ab0:	f1 f7       	brne	.-4      	; 0x1aae <LCD_write+0x106>
    1ab2:	9c 83       	std	Y+4, r25	; 0x04
    1ab4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ab6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aba:	01 97       	sbiw	r24, 0x01	; 1
    1abc:	9e 83       	std	Y+6, r25	; 0x06
    1abe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	69 f7       	brne	.-38     	; 0x1aa2 <LCD_write+0xfa>
    1ac8:	14 c0       	rjmp	.+40     	; 0x1af2 <LCD_write+0x14a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1aca:	6f 81       	ldd	r22, Y+7	; 0x07
    1acc:	78 85       	ldd	r23, Y+8	; 0x08
    1ace:	89 85       	ldd	r24, Y+9	; 0x09
    1ad0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ad6:	dc 01       	movw	r26, r24
    1ad8:	cb 01       	movw	r24, r22
    1ada:	9e 83       	std	Y+6, r25	; 0x06
    1adc:	8d 83       	std	Y+5, r24	; 0x05
    1ade:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ae2:	9a 83       	std	Y+2, r25	; 0x02
    1ae4:	89 83       	std	Y+1, r24	; 0x01
    1ae6:	89 81       	ldd	r24, Y+1	; 0x01
    1ae8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	f1 f7       	brne	.-4      	; 0x1aea <LCD_write+0x142>
    1aee:	9a 83       	std	Y+2, r25	; 0x02
    1af0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);											//pulse for know instruction is coming
	DIO_set_pin_value(LCD_Control_Port,LCD_E_Pin,DIO_Low);//pulse for know instruction is coming
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	62 e0       	ldi	r22, 0x02	; 2
    1af6:	40 e0       	ldi	r20, 0x00	; 0
    1af8:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
}
    1afc:	61 96       	adiw	r28, 0x11	; 17
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	de bf       	out	0x3e, r29	; 62
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	cd bf       	out	0x3d, r28	; 61
    1b08:	cf 91       	pop	r28
    1b0a:	df 91       	pop	r29
    1b0c:	08 95       	ret

00001b0e <LCD_Intialization>:

void LCD_Intialization(void){
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
    1b1a:	cc 54       	subi	r28, 0x4C	; 76
    1b1c:	d0 40       	sbci	r29, 0x00	; 0
    1b1e:	0f b6       	in	r0, 0x3f	; 63
    1b20:	f8 94       	cli
    1b22:	de bf       	out	0x3e, r29	; 62
    1b24:	0f be       	out	0x3f, r0	; 63
    1b26:	cd bf       	out	0x3d, r28	; 61
	DIO_set_port_direction(LCD_Data_Port,DIO_max_port_direction);
    1b28:	82 e0       	ldi	r24, 0x02	; 2
    1b2a:	6f ef       	ldi	r22, 0xFF	; 255
    1b2c:	0e 94 68 0a 	call	0x14d0	; 0x14d0 <DIO_set_port_direction>
	DIO_set_pin_direction(LCD_Control_Port,LCD_RS_Pin,DIO_Output);
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	41 e0       	ldi	r20, 0x01	; 1
    1b36:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_set_pin_direction>
	DIO_set_pin_direction(LCD_Control_Port,LCD_RW_Pin,DIO_Output);
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	61 e0       	ldi	r22, 0x01	; 1
    1b3e:	41 e0       	ldi	r20, 0x01	; 1
    1b40:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_set_pin_direction>
	DIO_set_pin_direction(LCD_Control_Port,LCD_E_Pin,DIO_Output);
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	62 e0       	ldi	r22, 0x02	; 2
    1b48:	41 e0       	ldi	r20, 0x01	; 1
    1b4a:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_set_pin_direction>
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e7 5b       	subi	r30, 0xB7	; 183
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	a0 e2       	ldi	r26, 0x20	; 32
    1b5a:	b2 e4       	ldi	r27, 0x42	; 66
    1b5c:	80 83       	st	Z, r24
    1b5e:	91 83       	std	Z+1, r25	; 0x01
    1b60:	a2 83       	std	Z+2, r26	; 0x02
    1b62:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b64:	8e 01       	movw	r16, r28
    1b66:	0b 5b       	subi	r16, 0xBB	; 187
    1b68:	1f 4f       	sbci	r17, 0xFF	; 255
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	e7 5b       	subi	r30, 0xB7	; 183
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	60 81       	ld	r22, Z
    1b72:	71 81       	ldd	r23, Z+1	; 0x01
    1b74:	82 81       	ldd	r24, Z+2	; 0x02
    1b76:	93 81       	ldd	r25, Z+3	; 0x03
    1b78:	20 e0       	ldi	r18, 0x00	; 0
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	4a ef       	ldi	r20, 0xFA	; 250
    1b7e:	54 e4       	ldi	r21, 0x44	; 68
    1b80:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b84:	dc 01       	movw	r26, r24
    1b86:	cb 01       	movw	r24, r22
    1b88:	f8 01       	movw	r30, r16
    1b8a:	80 83       	st	Z, r24
    1b8c:	91 83       	std	Z+1, r25	; 0x01
    1b8e:	a2 83       	std	Z+2, r26	; 0x02
    1b90:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b92:	fe 01       	movw	r30, r28
    1b94:	eb 5b       	subi	r30, 0xBB	; 187
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	60 81       	ld	r22, Z
    1b9a:	71 81       	ldd	r23, Z+1	; 0x01
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	40 e8       	ldi	r20, 0x80	; 128
    1ba6:	5f e3       	ldi	r21, 0x3F	; 63
    1ba8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1bac:	88 23       	and	r24, r24
    1bae:	44 f4       	brge	.+16     	; 0x1bc0 <LCD_Intialization+0xb2>
		__ticks = 1;
    1bb0:	fe 01       	movw	r30, r28
    1bb2:	ed 5b       	subi	r30, 0xBD	; 189
    1bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bb6:	81 e0       	ldi	r24, 0x01	; 1
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	91 83       	std	Z+1, r25	; 0x01
    1bbc:	80 83       	st	Z, r24
    1bbe:	64 c0       	rjmp	.+200    	; 0x1c88 <LCD_Intialization+0x17a>
	else if (__tmp > 65535)
    1bc0:	fe 01       	movw	r30, r28
    1bc2:	eb 5b       	subi	r30, 0xBB	; 187
    1bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1bc6:	60 81       	ld	r22, Z
    1bc8:	71 81       	ldd	r23, Z+1	; 0x01
    1bca:	82 81       	ldd	r24, Z+2	; 0x02
    1bcc:	93 81       	ldd	r25, Z+3	; 0x03
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	3f ef       	ldi	r19, 0xFF	; 255
    1bd2:	4f e7       	ldi	r20, 0x7F	; 127
    1bd4:	57 e4       	ldi	r21, 0x47	; 71
    1bd6:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1bda:	18 16       	cp	r1, r24
    1bdc:	0c f0       	brlt	.+2      	; 0x1be0 <LCD_Intialization+0xd2>
    1bde:	43 c0       	rjmp	.+134    	; 0x1c66 <LCD_Intialization+0x158>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be0:	fe 01       	movw	r30, r28
    1be2:	e7 5b       	subi	r30, 0xB7	; 183
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e2       	ldi	r20, 0x20	; 32
    1bf4:	51 e4       	ldi	r21, 0x41	; 65
    1bf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	8e 01       	movw	r16, r28
    1c00:	0d 5b       	subi	r16, 0xBD	; 189
    1c02:	1f 4f       	sbci	r17, 0xFF	; 255
    1c04:	bc 01       	movw	r22, r24
    1c06:	cd 01       	movw	r24, r26
    1c08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	f8 01       	movw	r30, r16
    1c12:	91 83       	std	Z+1, r25	; 0x01
    1c14:	80 83       	st	Z, r24
    1c16:	1f c0       	rjmp	.+62     	; 0x1c56 <LCD_Intialization+0x148>
    1c18:	fe 01       	movw	r30, r28
    1c1a:	ef 5b       	subi	r30, 0xBF	; 191
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	88 ec       	ldi	r24, 0xC8	; 200
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	91 83       	std	Z+1, r25	; 0x01
    1c24:	80 83       	st	Z, r24
    1c26:	fe 01       	movw	r30, r28
    1c28:	ef 5b       	subi	r30, 0xBF	; 191
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	80 81       	ld	r24, Z
    1c2e:	91 81       	ldd	r25, Z+1	; 0x01
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <LCD_Intialization+0x122>
    1c34:	fe 01       	movw	r30, r28
    1c36:	ef 5b       	subi	r30, 0xBF	; 191
    1c38:	ff 4f       	sbci	r31, 0xFF	; 255
    1c3a:	91 83       	std	Z+1, r25	; 0x01
    1c3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3e:	de 01       	movw	r26, r28
    1c40:	ad 5b       	subi	r26, 0xBD	; 189
    1c42:	bf 4f       	sbci	r27, 0xFF	; 255
    1c44:	fe 01       	movw	r30, r28
    1c46:	ed 5b       	subi	r30, 0xBD	; 189
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	80 81       	ld	r24, Z
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	11 96       	adiw	r26, 0x01	; 1
    1c52:	9c 93       	st	X, r25
    1c54:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c56:	fe 01       	movw	r30, r28
    1c58:	ed 5b       	subi	r30, 0xBD	; 189
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	80 81       	ld	r24, Z
    1c5e:	91 81       	ldd	r25, Z+1	; 0x01
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	d1 f6       	brne	.-76     	; 0x1c18 <LCD_Intialization+0x10a>
    1c64:	24 c0       	rjmp	.+72     	; 0x1cae <LCD_Intialization+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c66:	8e 01       	movw	r16, r28
    1c68:	0d 5b       	subi	r16, 0xBD	; 189
    1c6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	eb 5b       	subi	r30, 0xBB	; 187
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	60 81       	ld	r22, Z
    1c74:	71 81       	ldd	r23, Z+1	; 0x01
    1c76:	82 81       	ldd	r24, Z+2	; 0x02
    1c78:	93 81       	ldd	r25, Z+3	; 0x03
    1c7a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	f8 01       	movw	r30, r16
    1c84:	91 83       	std	Z+1, r25	; 0x01
    1c86:	80 83       	st	Z, r24
    1c88:	fe 01       	movw	r30, r28
    1c8a:	ed 5b       	subi	r30, 0xBD	; 189
    1c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8e:	80 81       	ld	r24, Z
    1c90:	91 81       	ldd	r25, Z+1	; 0x01
    1c92:	fe 01       	movw	r30, r28
    1c94:	ff 96       	adiw	r30, 0x3f	; 63
    1c96:	91 83       	std	Z+1, r25	; 0x01
    1c98:	80 83       	st	Z, r24
    1c9a:	fe 01       	movw	r30, r28
    1c9c:	ff 96       	adiw	r30, 0x3f	; 63
    1c9e:	80 81       	ld	r24, Z
    1ca0:	91 81       	ldd	r25, Z+1	; 0x01
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	f1 f7       	brne	.-4      	; 0x1ca2 <LCD_Intialization+0x194>
    1ca6:	fe 01       	movw	r30, r28
    1ca8:	ff 96       	adiw	r30, 0x3f	; 63
    1caa:	91 83       	std	Z+1, r25	; 0x01
    1cac:	80 83       	st	Z, r24
	_delay_ms(40);
	LCD_write_cmd(0b00111000);
    1cae:	88 e3       	ldi	r24, 0x38	; 56
    1cb0:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_write_cmd>
    1cb4:	80 e0       	ldi	r24, 0x00	; 0
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a8 e4       	ldi	r26, 0x48	; 72
    1cba:	b2 e4       	ldi	r27, 0x42	; 66
    1cbc:	8b af       	std	Y+59, r24	; 0x3b
    1cbe:	9c af       	std	Y+60, r25	; 0x3c
    1cc0:	ad af       	std	Y+61, r26	; 0x3d
    1cc2:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cc4:	6b ad       	ldd	r22, Y+59	; 0x3b
    1cc6:	7c ad       	ldd	r23, Y+60	; 0x3c
    1cc8:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cca:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ccc:	2b ea       	ldi	r18, 0xAB	; 171
    1cce:	3a ea       	ldi	r19, 0xAA	; 170
    1cd0:	4a e2       	ldi	r20, 0x2A	; 42
    1cd2:	50 e4       	ldi	r21, 0x40	; 64
    1cd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cd8:	dc 01       	movw	r26, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	8f ab       	std	Y+55, r24	; 0x37
    1cde:	98 af       	std	Y+56, r25	; 0x38
    1ce0:	a9 af       	std	Y+57, r26	; 0x39
    1ce2:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1ce4:	6f a9       	ldd	r22, Y+55	; 0x37
    1ce6:	78 ad       	ldd	r23, Y+56	; 0x38
    1ce8:	89 ad       	ldd	r24, Y+57	; 0x39
    1cea:	9a ad       	ldd	r25, Y+58	; 0x3a
    1cec:	20 e0       	ldi	r18, 0x00	; 0
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	40 e8       	ldi	r20, 0x80	; 128
    1cf2:	5f e3       	ldi	r21, 0x3F	; 63
    1cf4:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1cf8:	88 23       	and	r24, r24
    1cfa:	1c f4       	brge	.+6      	; 0x1d02 <LCD_Intialization+0x1f4>
		__ticks = 1;
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	8e ab       	std	Y+54, r24	; 0x36
    1d00:	91 c0       	rjmp	.+290    	; 0x1e24 <LCD_Intialization+0x316>
	else if (__tmp > 255)
    1d02:	6f a9       	ldd	r22, Y+55	; 0x37
    1d04:	78 ad       	ldd	r23, Y+56	; 0x38
    1d06:	89 ad       	ldd	r24, Y+57	; 0x39
    1d08:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	4f e7       	ldi	r20, 0x7F	; 127
    1d10:	53 e4       	ldi	r21, 0x43	; 67
    1d12:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d16:	18 16       	cp	r1, r24
    1d18:	0c f0       	brlt	.+2      	; 0x1d1c <LCD_Intialization+0x20e>
    1d1a:	7b c0       	rjmp	.+246    	; 0x1e12 <LCD_Intialization+0x304>
	{
		_delay_ms(__us / 1000.0);
    1d1c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d1e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d20:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d22:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	4a e7       	ldi	r20, 0x7A	; 122
    1d2a:	54 e4       	ldi	r21, 0x44	; 68
    1d2c:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1d30:	dc 01       	movw	r26, r24
    1d32:	cb 01       	movw	r24, r22
    1d34:	8a ab       	std	Y+50, r24	; 0x32
    1d36:	9b ab       	std	Y+51, r25	; 0x33
    1d38:	ac ab       	std	Y+52, r26	; 0x34
    1d3a:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d3c:	6a a9       	ldd	r22, Y+50	; 0x32
    1d3e:	7b a9       	ldd	r23, Y+51	; 0x33
    1d40:	8c a9       	ldd	r24, Y+52	; 0x34
    1d42:	9d a9       	ldd	r25, Y+53	; 0x35
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	4a ef       	ldi	r20, 0xFA	; 250
    1d4a:	54 e4       	ldi	r21, 0x44	; 68
    1d4c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	8e a7       	std	Y+46, r24	; 0x2e
    1d56:	9f a7       	std	Y+47, r25	; 0x2f
    1d58:	a8 ab       	std	Y+48, r26	; 0x30
    1d5a:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1d5c:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d5e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d60:	88 a9       	ldd	r24, Y+48	; 0x30
    1d62:	99 a9       	ldd	r25, Y+49	; 0x31
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	40 e8       	ldi	r20, 0x80	; 128
    1d6a:	5f e3       	ldi	r21, 0x3F	; 63
    1d6c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d70:	88 23       	and	r24, r24
    1d72:	2c f4       	brge	.+10     	; 0x1d7e <LCD_Intialization+0x270>
		__ticks = 1;
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	9d a7       	std	Y+45, r25	; 0x2d
    1d7a:	8c a7       	std	Y+44, r24	; 0x2c
    1d7c:	3f c0       	rjmp	.+126    	; 0x1dfc <LCD_Intialization+0x2ee>
	else if (__tmp > 65535)
    1d7e:	6e a5       	ldd	r22, Y+46	; 0x2e
    1d80:	7f a5       	ldd	r23, Y+47	; 0x2f
    1d82:	88 a9       	ldd	r24, Y+48	; 0x30
    1d84:	99 a9       	ldd	r25, Y+49	; 0x31
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	3f ef       	ldi	r19, 0xFF	; 255
    1d8a:	4f e7       	ldi	r20, 0x7F	; 127
    1d8c:	57 e4       	ldi	r21, 0x47	; 71
    1d8e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d92:	18 16       	cp	r1, r24
    1d94:	4c f5       	brge	.+82     	; 0x1de8 <LCD_Intialization+0x2da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d96:	6a a9       	ldd	r22, Y+50	; 0x32
    1d98:	7b a9       	ldd	r23, Y+51	; 0x33
    1d9a:	8c a9       	ldd	r24, Y+52	; 0x34
    1d9c:	9d a9       	ldd	r25, Y+53	; 0x35
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	40 e2       	ldi	r20, 0x20	; 32
    1da4:	51 e4       	ldi	r21, 0x41	; 65
    1da6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1daa:	dc 01       	movw	r26, r24
    1dac:	cb 01       	movw	r24, r22
    1dae:	bc 01       	movw	r22, r24
    1db0:	cd 01       	movw	r24, r26
    1db2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1db6:	dc 01       	movw	r26, r24
    1db8:	cb 01       	movw	r24, r22
    1dba:	9d a7       	std	Y+45, r25	; 0x2d
    1dbc:	8c a7       	std	Y+44, r24	; 0x2c
    1dbe:	0f c0       	rjmp	.+30     	; 0x1dde <LCD_Intialization+0x2d0>
    1dc0:	88 ec       	ldi	r24, 0xC8	; 200
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	9b a7       	std	Y+43, r25	; 0x2b
    1dc6:	8a a7       	std	Y+42, r24	; 0x2a
    1dc8:	8a a5       	ldd	r24, Y+42	; 0x2a
    1dca:	9b a5       	ldd	r25, Y+43	; 0x2b
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	f1 f7       	brne	.-4      	; 0x1dcc <LCD_Intialization+0x2be>
    1dd0:	9b a7       	std	Y+43, r25	; 0x2b
    1dd2:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dd4:	8c a5       	ldd	r24, Y+44	; 0x2c
    1dd6:	9d a5       	ldd	r25, Y+45	; 0x2d
    1dd8:	01 97       	sbiw	r24, 0x01	; 1
    1dda:	9d a7       	std	Y+45, r25	; 0x2d
    1ddc:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dde:	8c a5       	ldd	r24, Y+44	; 0x2c
    1de0:	9d a5       	ldd	r25, Y+45	; 0x2d
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	69 f7       	brne	.-38     	; 0x1dc0 <LCD_Intialization+0x2b2>
    1de6:	24 c0       	rjmp	.+72     	; 0x1e30 <LCD_Intialization+0x322>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de8:	6e a5       	ldd	r22, Y+46	; 0x2e
    1dea:	7f a5       	ldd	r23, Y+47	; 0x2f
    1dec:	88 a9       	ldd	r24, Y+48	; 0x30
    1dee:	99 a9       	ldd	r25, Y+49	; 0x31
    1df0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	9d a7       	std	Y+45, r25	; 0x2d
    1dfa:	8c a7       	std	Y+44, r24	; 0x2c
    1dfc:	8c a5       	ldd	r24, Y+44	; 0x2c
    1dfe:	9d a5       	ldd	r25, Y+45	; 0x2d
    1e00:	99 a7       	std	Y+41, r25	; 0x29
    1e02:	88 a7       	std	Y+40, r24	; 0x28
    1e04:	88 a5       	ldd	r24, Y+40	; 0x28
    1e06:	99 a5       	ldd	r25, Y+41	; 0x29
    1e08:	01 97       	sbiw	r24, 0x01	; 1
    1e0a:	f1 f7       	brne	.-4      	; 0x1e08 <LCD_Intialization+0x2fa>
    1e0c:	99 a7       	std	Y+41, r25	; 0x29
    1e0e:	88 a7       	std	Y+40, r24	; 0x28
    1e10:	0f c0       	rjmp	.+30     	; 0x1e30 <LCD_Intialization+0x322>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e12:	6f a9       	ldd	r22, Y+55	; 0x37
    1e14:	78 ad       	ldd	r23, Y+56	; 0x38
    1e16:	89 ad       	ldd	r24, Y+57	; 0x39
    1e18:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e1a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	cb 01       	movw	r24, r22
    1e22:	8e ab       	std	Y+54, r24	; 0x36
    1e24:	8e a9       	ldd	r24, Y+54	; 0x36
    1e26:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e28:	8f a1       	ldd	r24, Y+39	; 0x27
    1e2a:	8a 95       	dec	r24
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <LCD_Intialization+0x31c>
    1e2e:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(50);
	LCD_write_cmd(0b00001100);
    1e30:	8c e0       	ldi	r24, 0x0C	; 12
    1e32:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_write_cmd>
    1e36:	80 e0       	ldi	r24, 0x00	; 0
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	a8 e4       	ldi	r26, 0x48	; 72
    1e3c:	b2 e4       	ldi	r27, 0x42	; 66
    1e3e:	8b a3       	std	Y+35, r24	; 0x23
    1e40:	9c a3       	std	Y+36, r25	; 0x24
    1e42:	ad a3       	std	Y+37, r26	; 0x25
    1e44:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e46:	6b a1       	ldd	r22, Y+35	; 0x23
    1e48:	7c a1       	ldd	r23, Y+36	; 0x24
    1e4a:	8d a1       	ldd	r24, Y+37	; 0x25
    1e4c:	9e a1       	ldd	r25, Y+38	; 0x26
    1e4e:	2b ea       	ldi	r18, 0xAB	; 171
    1e50:	3a ea       	ldi	r19, 0xAA	; 170
    1e52:	4a e2       	ldi	r20, 0x2A	; 42
    1e54:	50 e4       	ldi	r21, 0x40	; 64
    1e56:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	cb 01       	movw	r24, r22
    1e5e:	8f 8f       	std	Y+31, r24	; 0x1f
    1e60:	98 a3       	std	Y+32, r25	; 0x20
    1e62:	a9 a3       	std	Y+33, r26	; 0x21
    1e64:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1e66:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e68:	78 a1       	ldd	r23, Y+32	; 0x20
    1e6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e8       	ldi	r20, 0x80	; 128
    1e74:	5f e3       	ldi	r21, 0x3F	; 63
    1e76:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e7a:	88 23       	and	r24, r24
    1e7c:	1c f4       	brge	.+6      	; 0x1e84 <LCD_Intialization+0x376>
		__ticks = 1;
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	8e 8f       	std	Y+30, r24	; 0x1e
    1e82:	91 c0       	rjmp	.+290    	; 0x1fa6 <LCD_Intialization+0x498>
	else if (__tmp > 255)
    1e84:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1e86:	78 a1       	ldd	r23, Y+32	; 0x20
    1e88:	89 a1       	ldd	r24, Y+33	; 0x21
    1e8a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	4f e7       	ldi	r20, 0x7F	; 127
    1e92:	53 e4       	ldi	r21, 0x43	; 67
    1e94:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e98:	18 16       	cp	r1, r24
    1e9a:	0c f0       	brlt	.+2      	; 0x1e9e <LCD_Intialization+0x390>
    1e9c:	7b c0       	rjmp	.+246    	; 0x1f94 <LCD_Intialization+0x486>
	{
		_delay_ms(__us / 1000.0);
    1e9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ea2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ea4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	4a e7       	ldi	r20, 0x7A	; 122
    1eac:	54 e4       	ldi	r21, 0x44	; 68
    1eae:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	cb 01       	movw	r24, r22
    1eb6:	8a 8f       	std	Y+26, r24	; 0x1a
    1eb8:	9b 8f       	std	Y+27, r25	; 0x1b
    1eba:	ac 8f       	std	Y+28, r26	; 0x1c
    1ebc:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebe:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ec0:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1ec2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1ec4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	4a ef       	ldi	r20, 0xFA	; 250
    1ecc:	54 e4       	ldi	r21, 0x44	; 68
    1ece:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	8e 8b       	std	Y+22, r24	; 0x16
    1ed8:	9f 8b       	std	Y+23, r25	; 0x17
    1eda:	a8 8f       	std	Y+24, r26	; 0x18
    1edc:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    1ede:	6e 89       	ldd	r22, Y+22	; 0x16
    1ee0:	7f 89       	ldd	r23, Y+23	; 0x17
    1ee2:	88 8d       	ldd	r24, Y+24	; 0x18
    1ee4:	99 8d       	ldd	r25, Y+25	; 0x19
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e8       	ldi	r20, 0x80	; 128
    1eec:	5f e3       	ldi	r21, 0x3F	; 63
    1eee:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ef2:	88 23       	and	r24, r24
    1ef4:	2c f4       	brge	.+10     	; 0x1f00 <LCD_Intialization+0x3f2>
		__ticks = 1;
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	9d 8b       	std	Y+21, r25	; 0x15
    1efc:	8c 8b       	std	Y+20, r24	; 0x14
    1efe:	3f c0       	rjmp	.+126    	; 0x1f7e <LCD_Intialization+0x470>
	else if (__tmp > 65535)
    1f00:	6e 89       	ldd	r22, Y+22	; 0x16
    1f02:	7f 89       	ldd	r23, Y+23	; 0x17
    1f04:	88 8d       	ldd	r24, Y+24	; 0x18
    1f06:	99 8d       	ldd	r25, Y+25	; 0x19
    1f08:	20 e0       	ldi	r18, 0x00	; 0
    1f0a:	3f ef       	ldi	r19, 0xFF	; 255
    1f0c:	4f e7       	ldi	r20, 0x7F	; 127
    1f0e:	57 e4       	ldi	r21, 0x47	; 71
    1f10:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f14:	18 16       	cp	r1, r24
    1f16:	4c f5       	brge	.+82     	; 0x1f6a <LCD_Intialization+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f18:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1f1a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1f1c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f1e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e2       	ldi	r20, 0x20	; 32
    1f26:	51 e4       	ldi	r21, 0x41	; 65
    1f28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	bc 01       	movw	r22, r24
    1f32:	cd 01       	movw	r24, r26
    1f34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	9d 8b       	std	Y+21, r25	; 0x15
    1f3e:	8c 8b       	std	Y+20, r24	; 0x14
    1f40:	0f c0       	rjmp	.+30     	; 0x1f60 <LCD_Intialization+0x452>
    1f42:	88 ec       	ldi	r24, 0xC8	; 200
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	9b 8b       	std	Y+19, r25	; 0x13
    1f48:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f4a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f4c:	9b 89       	ldd	r25, Y+19	; 0x13
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <LCD_Intialization+0x440>
    1f52:	9b 8b       	std	Y+19, r25	; 0x13
    1f54:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f56:	8c 89       	ldd	r24, Y+20	; 0x14
    1f58:	9d 89       	ldd	r25, Y+21	; 0x15
    1f5a:	01 97       	sbiw	r24, 0x01	; 1
    1f5c:	9d 8b       	std	Y+21, r25	; 0x15
    1f5e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f60:	8c 89       	ldd	r24, Y+20	; 0x14
    1f62:	9d 89       	ldd	r25, Y+21	; 0x15
    1f64:	00 97       	sbiw	r24, 0x00	; 0
    1f66:	69 f7       	brne	.-38     	; 0x1f42 <LCD_Intialization+0x434>
    1f68:	24 c0       	rjmp	.+72     	; 0x1fb2 <LCD_Intialization+0x4a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6a:	6e 89       	ldd	r22, Y+22	; 0x16
    1f6c:	7f 89       	ldd	r23, Y+23	; 0x17
    1f6e:	88 8d       	ldd	r24, Y+24	; 0x18
    1f70:	99 8d       	ldd	r25, Y+25	; 0x19
    1f72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f76:	dc 01       	movw	r26, r24
    1f78:	cb 01       	movw	r24, r22
    1f7a:	9d 8b       	std	Y+21, r25	; 0x15
    1f7c:	8c 8b       	std	Y+20, r24	; 0x14
    1f7e:	8c 89       	ldd	r24, Y+20	; 0x14
    1f80:	9d 89       	ldd	r25, Y+21	; 0x15
    1f82:	99 8b       	std	Y+17, r25	; 0x11
    1f84:	88 8b       	std	Y+16, r24	; 0x10
    1f86:	88 89       	ldd	r24, Y+16	; 0x10
    1f88:	99 89       	ldd	r25, Y+17	; 0x11
    1f8a:	01 97       	sbiw	r24, 0x01	; 1
    1f8c:	f1 f7       	brne	.-4      	; 0x1f8a <LCD_Intialization+0x47c>
    1f8e:	99 8b       	std	Y+17, r25	; 0x11
    1f90:	88 8b       	std	Y+16, r24	; 0x10
    1f92:	0f c0       	rjmp	.+30     	; 0x1fb2 <LCD_Intialization+0x4a4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f94:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f96:	78 a1       	ldd	r23, Y+32	; 0x20
    1f98:	89 a1       	ldd	r24, Y+33	; 0x21
    1f9a:	9a a1       	ldd	r25, Y+34	; 0x22
    1f9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	8e 8f       	std	Y+30, r24	; 0x1e
    1fa6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fa8:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1faa:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fac:	8a 95       	dec	r24
    1fae:	f1 f7       	brne	.-4      	; 0x1fac <LCD_Intialization+0x49e>
    1fb0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(50);
	LCD_write_cmd(0b00000001);
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_write_cmd>
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	a0 e0       	ldi	r26, 0x00	; 0
    1fbe:	b0 e4       	ldi	r27, 0x40	; 64
    1fc0:	8b 87       	std	Y+11, r24	; 0x0b
    1fc2:	9c 87       	std	Y+12, r25	; 0x0c
    1fc4:	ad 87       	std	Y+13, r26	; 0x0d
    1fc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fce:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	4a ef       	ldi	r20, 0xFA	; 250
    1fd6:	54 e4       	ldi	r21, 0x44	; 68
    1fd8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	8f 83       	std	Y+7, r24	; 0x07
    1fe2:	98 87       	std	Y+8, r25	; 0x08
    1fe4:	a9 87       	std	Y+9, r26	; 0x09
    1fe6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fea:	78 85       	ldd	r23, Y+8	; 0x08
    1fec:	89 85       	ldd	r24, Y+9	; 0x09
    1fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	40 e8       	ldi	r20, 0x80	; 128
    1ff6:	5f e3       	ldi	r21, 0x3F	; 63
    1ff8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ffc:	88 23       	and	r24, r24
    1ffe:	2c f4       	brge	.+10     	; 0x200a <LCD_Intialization+0x4fc>
		__ticks = 1;
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	9e 83       	std	Y+6, r25	; 0x06
    2006:	8d 83       	std	Y+5, r24	; 0x05
    2008:	3f c0       	rjmp	.+126    	; 0x2088 <LCD_Intialization+0x57a>
	else if (__tmp > 65535)
    200a:	6f 81       	ldd	r22, Y+7	; 0x07
    200c:	78 85       	ldd	r23, Y+8	; 0x08
    200e:	89 85       	ldd	r24, Y+9	; 0x09
    2010:	9a 85       	ldd	r25, Y+10	; 0x0a
    2012:	20 e0       	ldi	r18, 0x00	; 0
    2014:	3f ef       	ldi	r19, 0xFF	; 255
    2016:	4f e7       	ldi	r20, 0x7F	; 127
    2018:	57 e4       	ldi	r21, 0x47	; 71
    201a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    201e:	18 16       	cp	r1, r24
    2020:	4c f5       	brge	.+82     	; 0x2074 <LCD_Intialization+0x566>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2022:	6b 85       	ldd	r22, Y+11	; 0x0b
    2024:	7c 85       	ldd	r23, Y+12	; 0x0c
    2026:	8d 85       	ldd	r24, Y+13	; 0x0d
    2028:	9e 85       	ldd	r25, Y+14	; 0x0e
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	40 e2       	ldi	r20, 0x20	; 32
    2030:	51 e4       	ldi	r21, 0x41	; 65
    2032:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	bc 01       	movw	r22, r24
    203c:	cd 01       	movw	r24, r26
    203e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	9e 83       	std	Y+6, r25	; 0x06
    2048:	8d 83       	std	Y+5, r24	; 0x05
    204a:	0f c0       	rjmp	.+30     	; 0x206a <LCD_Intialization+0x55c>
    204c:	88 ec       	ldi	r24, 0xC8	; 200
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	9c 83       	std	Y+4, r25	; 0x04
    2052:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	9c 81       	ldd	r25, Y+4	; 0x04
    2058:	01 97       	sbiw	r24, 0x01	; 1
    205a:	f1 f7       	brne	.-4      	; 0x2058 <LCD_Intialization+0x54a>
    205c:	9c 83       	std	Y+4, r25	; 0x04
    205e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2060:	8d 81       	ldd	r24, Y+5	; 0x05
    2062:	9e 81       	ldd	r25, Y+6	; 0x06
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	9e 83       	std	Y+6, r25	; 0x06
    2068:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	00 97       	sbiw	r24, 0x00	; 0
    2070:	69 f7       	brne	.-38     	; 0x204c <LCD_Intialization+0x53e>
    2072:	14 c0       	rjmp	.+40     	; 0x209c <LCD_Intialization+0x58e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2074:	6f 81       	ldd	r22, Y+7	; 0x07
    2076:	78 85       	ldd	r23, Y+8	; 0x08
    2078:	89 85       	ldd	r24, Y+9	; 0x09
    207a:	9a 85       	ldd	r25, Y+10	; 0x0a
    207c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2080:	dc 01       	movw	r26, r24
    2082:	cb 01       	movw	r24, r22
    2084:	9e 83       	std	Y+6, r25	; 0x06
    2086:	8d 83       	std	Y+5, r24	; 0x05
    2088:	8d 81       	ldd	r24, Y+5	; 0x05
    208a:	9e 81       	ldd	r25, Y+6	; 0x06
    208c:	9a 83       	std	Y+2, r25	; 0x02
    208e:	89 83       	std	Y+1, r24	; 0x01
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	9a 81       	ldd	r25, Y+2	; 0x02
    2094:	01 97       	sbiw	r24, 0x01	; 1
    2096:	f1 f7       	brne	.-4      	; 0x2094 <LCD_Intialization+0x586>
    2098:	9a 83       	std	Y+2, r25	; 0x02
    209a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    209c:	c4 5b       	subi	r28, 0xB4	; 180
    209e:	df 4f       	sbci	r29, 0xFF	; 255
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	f8 94       	cli
    20a4:	de bf       	out	0x3e, r29	; 62
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	cd bf       	out	0x3d, r28	; 61
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	1f 91       	pop	r17
    20b0:	0f 91       	pop	r16
    20b2:	08 95       	ret

000020b4 <LCD_WRITE_POS>:

u8 LCD_WRITE_POS(u8*Data,u8 x_pos,u8 y_pos){
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	2a 97       	sbiw	r28, 0x0a	; 10
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	de bf       	out	0x3e, r29	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	cd bf       	out	0x3d, r28	; 61
    20c8:	9f 83       	std	Y+7, r25	; 0x07
    20ca:	8e 83       	std	Y+6, r24	; 0x06
    20cc:	68 87       	std	Y+8, r22	; 0x08
    20ce:	49 87       	std	Y+9, r20	; 0x09
	u8 error_stat=0; u8 ddramadd,frist_element=*Data,shifter,j=3;
    20d0:	1d 82       	std	Y+5, r1	; 0x05
    20d2:	ee 81       	ldd	r30, Y+6	; 0x06
    20d4:	ff 81       	ldd	r31, Y+7	; 0x07
    20d6:	80 81       	ld	r24, Z
    20d8:	8b 83       	std	Y+3, r24	; 0x03
    20da:	83 e0       	ldi	r24, 0x03	; 3
    20dc:	89 83       	std	Y+1, r24	; 0x01
	if ((x_pos<LCD_collom) &&( y_pos<LCD_row))
    20de:	88 85       	ldd	r24, Y+8	; 0x08
    20e0:	80 31       	cpi	r24, 0x10	; 16
    20e2:	98 f5       	brcc	.+102    	; 0x214a <LCD_WRITE_POS+0x96>
    20e4:	89 85       	ldd	r24, Y+9	; 0x09
    20e6:	82 30       	cpi	r24, 0x02	; 2
    20e8:	80 f5       	brcc	.+96     	; 0x214a <LCD_WRITE_POS+0x96>
	{
		ddramadd= (x_pos + (y_pos*64))|0b10000000;
    20ea:	89 85       	ldd	r24, Y+9	; 0x09
    20ec:	88 2f       	mov	r24, r24
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	00 24       	eor	r0, r0
    20f2:	96 95       	lsr	r25
    20f4:	87 95       	ror	r24
    20f6:	07 94       	ror	r0
    20f8:	96 95       	lsr	r25
    20fa:	87 95       	ror	r24
    20fc:	07 94       	ror	r0
    20fe:	98 2f       	mov	r25, r24
    2100:	80 2d       	mov	r24, r0
    2102:	98 2f       	mov	r25, r24
    2104:	88 85       	ldd	r24, Y+8	; 0x08
    2106:	89 0f       	add	r24, r25
    2108:	80 68       	ori	r24, 0x80	; 128
    210a:	8c 83       	std	Y+4, r24	; 0x04
		LCD_write_cmd(ddramadd);
    210c:	8c 81       	ldd	r24, Y+4	; 0x04
    210e:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_write_cmd>
    2112:	15 c0       	rjmp	.+42     	; 0x213e <LCD_WRITE_POS+0x8a>

		while(*Data!='\0')
		{if(ddramadd==LCD_max_collom_address)
    2114:	8c 81       	ldd	r24, Y+4	; 0x04
    2116:	80 39       	cpi	r24, 0x90	; 144
    2118:	29 f4       	brne	.+10     	; 0x2124 <LCD_WRITE_POS+0x70>
		{
			ddramadd=LCD_frist_second_collom;
    211a:	80 ec       	ldi	r24, 0xC0	; 192
    211c:	8c 83       	std	Y+4, r24	; 0x04
			LCD_write_cmd(ddramadd);}
    211e:	8c 81       	ldd	r24, Y+4	; 0x04
    2120:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_write_cmd>

		LCD_write_data(*Data);
    2124:	ee 81       	ldd	r30, Y+6	; 0x06
    2126:	ff 81       	ldd	r31, Y+7	; 0x07
    2128:	80 81       	ld	r24, Z
    212a:	0e 94 c2 0c 	call	0x1984	; 0x1984 <LCD_write_data>
		Data++;
    212e:	8e 81       	ldd	r24, Y+6	; 0x06
    2130:	9f 81       	ldd	r25, Y+7	; 0x07
    2132:	01 96       	adiw	r24, 0x01	; 1
    2134:	9f 83       	std	Y+7, r25	; 0x07
    2136:	8e 83       	std	Y+6, r24	; 0x06
		ddramadd++;
    2138:	8c 81       	ldd	r24, Y+4	; 0x04
    213a:	8f 5f       	subi	r24, 0xFF	; 255
    213c:	8c 83       	std	Y+4, r24	; 0x04
	if ((x_pos<LCD_collom) &&( y_pos<LCD_row))
	{
		ddramadd= (x_pos + (y_pos*64))|0b10000000;
		LCD_write_cmd(ddramadd);

		while(*Data!='\0')
    213e:	ee 81       	ldd	r30, Y+6	; 0x06
    2140:	ff 81       	ldd	r31, Y+7	; 0x07
    2142:	80 81       	ld	r24, Z
    2144:	88 23       	and	r24, r24
    2146:	31 f7       	brne	.-52     	; 0x2114 <LCD_WRITE_POS+0x60>
    2148:	04 c0       	rjmp	.+8      	; 0x2152 <LCD_WRITE_POS+0x9e>

		}*/

	}else {

		error_stat=1;
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	8d 83       	std	Y+5, r24	; 0x05
		return error_stat;}
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	8a 87       	std	Y+10, r24	; 0x0a


}
    2152:	8a 85       	ldd	r24, Y+10	; 0x0a
    2154:	2a 96       	adiw	r28, 0x0a	; 10
    2156:	0f b6       	in	r0, 0x3f	; 63
    2158:	f8 94       	cli
    215a:	de bf       	out	0x3e, r29	; 62
    215c:	0f be       	out	0x3f, r0	; 63
    215e:	cd bf       	out	0x3d, r28	; 61
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <LCD_WRITE_num>:



u8 LCD_WRITE_num(u32 num)//,u8 x_pos,u8 y_pos)
{u8 rem, arr[20],arr_index=0;
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
    216e:	6b 97       	sbiw	r28, 0x1b	; 27
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	6f 8b       	std	Y+23, r22	; 0x17
    217c:	78 8f       	std	Y+24, r23	; 0x18
    217e:	89 8f       	std	Y+25, r24	; 0x19
    2180:	9a 8f       	std	Y+26, r25	; 0x1a
    2182:	19 82       	std	Y+1, r1	; 0x01
	if (num==0)
    2184:	8f 89       	ldd	r24, Y+23	; 0x17
    2186:	98 8d       	ldd	r25, Y+24	; 0x18
    2188:	a9 8d       	ldd	r26, Y+25	; 0x19
    218a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    218c:	00 97       	sbiw	r24, 0x00	; 0
    218e:	a1 05       	cpc	r26, r1
    2190:	b1 05       	cpc	r27, r1
    2192:	f1 f5       	brne	.+124    	; 0x2210 <LCD_WRITE_num+0xaa>

{
	arr[arr_index]='0';
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	28 2f       	mov	r18, r24
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	ce 01       	movw	r24, r28
    219c:	03 96       	adiw	r24, 0x03	; 3
    219e:	fc 01       	movw	r30, r24
    21a0:	e2 0f       	add	r30, r18
    21a2:	f3 1f       	adc	r31, r19
    21a4:	80 e3       	ldi	r24, 0x30	; 48
    21a6:	80 83       	st	Z, r24
		arr_index++;}
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	8f 5f       	subi	r24, 0xFF	; 255
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	30 c0       	rjmp	.+96     	; 0x2210 <LCD_WRITE_num+0xaa>
	while(num!=0)
	{

	rem= num%10;
    21b0:	8f 89       	ldd	r24, Y+23	; 0x17
    21b2:	98 8d       	ldd	r25, Y+24	; 0x18
    21b4:	a9 8d       	ldd	r26, Y+25	; 0x19
    21b6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    21b8:	2a e0       	ldi	r18, 0x0A	; 10
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	40 e0       	ldi	r20, 0x00	; 0
    21be:	50 e0       	ldi	r21, 0x00	; 0
    21c0:	bc 01       	movw	r22, r24
    21c2:	cd 01       	movw	r24, r26
    21c4:	0e 94 9a 14 	call	0x2934	; 0x2934 <__udivmodsi4>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	8a 83       	std	Y+2, r24	; 0x02
	arr[arr_index]=rem+'0';//to know ascy for any char add num to ascy ((0)->48) ex know asccy num 5 -> (5+48=53)
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	28 2f       	mov	r18, r24
    21d2:	30 e0       	ldi	r19, 0x00	; 0
    21d4:	8a 81       	ldd	r24, Y+2	; 0x02
    21d6:	48 2f       	mov	r20, r24
    21d8:	40 5d       	subi	r20, 0xD0	; 208
    21da:	ce 01       	movw	r24, r28
    21dc:	03 96       	adiw	r24, 0x03	; 3
    21de:	fc 01       	movw	r30, r24
    21e0:	e2 0f       	add	r30, r18
    21e2:	f3 1f       	adc	r31, r19
    21e4:	40 83       	st	Z, r20
	arr_index++;
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	8f 5f       	subi	r24, 0xFF	; 255
    21ea:	89 83       	std	Y+1, r24	; 0x01
	num = num /10;
    21ec:	8f 89       	ldd	r24, Y+23	; 0x17
    21ee:	98 8d       	ldd	r25, Y+24	; 0x18
    21f0:	a9 8d       	ldd	r26, Y+25	; 0x19
    21f2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    21f4:	2a e0       	ldi	r18, 0x0A	; 10
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e0       	ldi	r20, 0x00	; 0
    21fa:	50 e0       	ldi	r21, 0x00	; 0
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	0e 94 9a 14 	call	0x2934	; 0x2934 <__udivmodsi4>
    2204:	da 01       	movw	r26, r20
    2206:	c9 01       	movw	r24, r18
    2208:	8f 8b       	std	Y+23, r24	; 0x17
    220a:	98 8f       	std	Y+24, r25	; 0x18
    220c:	a9 8f       	std	Y+25, r26	; 0x19
    220e:	ba 8f       	std	Y+26, r27	; 0x1a
	if (num==0)

{
	arr[arr_index]='0';
		arr_index++;}
	while(num!=0)
    2210:	8f 89       	ldd	r24, Y+23	; 0x17
    2212:	98 8d       	ldd	r25, Y+24	; 0x18
    2214:	a9 8d       	ldd	r26, Y+25	; 0x19
    2216:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	a1 05       	cpc	r26, r1
    221c:	b1 05       	cpc	r27, r1
    221e:	41 f6       	brne	.-112    	; 0x21b0 <LCD_WRITE_num+0x4a>
	rem= num%10;
	arr[arr_index]=rem+'0';//to know ascy for any char add num to ascy ((0)->48) ex know asccy num 5 -> (5+48=53)
	arr_index++;
	num = num /10;

	}arr[arr_index]='\0';
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	ce 01       	movw	r24, r28
    2228:	03 96       	adiw	r24, 0x03	; 3
    222a:	fc 01       	movw	r30, r24
    222c:	e2 0f       	add	r30, r18
    222e:	f3 1f       	adc	r31, r19
    2230:	10 82       	st	Z, r1
	reverse(arr,arr_index);
    2232:	ce 01       	movw	r24, r28
    2234:	03 96       	adiw	r24, 0x03	; 3
    2236:	69 81       	ldd	r22, Y+1	; 0x01
    2238:	0e 94 2b 11 	call	0x2256	; 0x2256 <reverse>

		send_string(arr);//LCD_WRITE_POS(arr,x_pos,y_pos);
    223c:	ce 01       	movw	r24, r28
    223e:	03 96       	adiw	r24, 0x03	; 3
    2240:	0e 94 ef 0b 	call	0x17de	; 0x17de <send_string>



}
    2244:	6b 96       	adiw	r28, 0x1b	; 27
    2246:	0f b6       	in	r0, 0x3f	; 63
    2248:	f8 94       	cli
    224a:	de bf       	out	0x3e, r29	; 62
    224c:	0f be       	out	0x3f, r0	; 63
    224e:	cd bf       	out	0x3d, r28	; 61
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret

00002256 <reverse>:
reverse(u8 *arr,u8 length)
{
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	00 d0       	rcall	.+0      	; 0x225c <reverse+0x6>
    225c:	00 d0       	rcall	.+0      	; 0x225e <reverse+0x8>
    225e:	0f 92       	push	r0
    2260:	cd b7       	in	r28, 0x3d	; 61
    2262:	de b7       	in	r29, 0x3e	; 62
    2264:	9c 83       	std	Y+4, r25	; 0x04
    2266:	8b 83       	std	Y+3, r24	; 0x03
    2268:	6d 83       	std	Y+5, r22	; 0x05
u8 start=0;
    226a:	1a 82       	std	Y+2, r1	; 0x02
u8 end=length-1;
    226c:	8d 81       	ldd	r24, Y+5	; 0x05
    226e:	81 50       	subi	r24, 0x01	; 1
    2270:	89 83       	std	Y+1, r24	; 0x01
    2272:	19 c0       	rjmp	.+50     	; 0x22a6 <reverse+0x50>
while (start<end)
{
swap(&arr[start],&arr[end]);
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	9c 81       	ldd	r25, Y+4	; 0x04
    227e:	ac 01       	movw	r20, r24
    2280:	42 0f       	add	r20, r18
    2282:	53 1f       	adc	r21, r19
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	28 2f       	mov	r18, r24
    2288:	30 e0       	ldi	r19, 0x00	; 0
    228a:	8b 81       	ldd	r24, Y+3	; 0x03
    228c:	9c 81       	ldd	r25, Y+4	; 0x04
    228e:	28 0f       	add	r18, r24
    2290:	39 1f       	adc	r19, r25
    2292:	ca 01       	movw	r24, r20
    2294:	b9 01       	movw	r22, r18
    2296:	0e 94 5f 11 	call	0x22be	; 0x22be <swap>
start++;
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	8f 5f       	subi	r24, 0xFF	; 255
    229e:	8a 83       	std	Y+2, r24	; 0x02
end--;}
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
    22a2:	81 50       	subi	r24, 0x01	; 1
    22a4:	89 83       	std	Y+1, r24	; 0x01
}
reverse(u8 *arr,u8 length)
{
u8 start=0;
u8 end=length-1;
while (start<end)
    22a6:	9a 81       	ldd	r25, Y+2	; 0x02
    22a8:	89 81       	ldd	r24, Y+1	; 0x01
    22aa:	98 17       	cp	r25, r24
    22ac:	18 f3       	brcs	.-58     	; 0x2274 <reverse+0x1e>
{
swap(&arr[start],&arr[end]);
start++;
end--;}

}
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	cf 91       	pop	r28
    22ba:	df 91       	pop	r29
    22bc:	08 95       	ret

000022be <swap>:

void swap (u8 *a,u8 *b)
{
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <swap+0x6>
    22c4:	00 d0       	rcall	.+0      	; 0x22c6 <swap+0x8>
    22c6:	0f 92       	push	r0
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
    22cc:	9b 83       	std	Y+3, r25	; 0x03
    22ce:	8a 83       	std	Y+2, r24	; 0x02
    22d0:	7d 83       	std	Y+5, r23	; 0x05
    22d2:	6c 83       	std	Y+4, r22	; 0x04
	u8 z =*a;
    22d4:	ea 81       	ldd	r30, Y+2	; 0x02
    22d6:	fb 81       	ldd	r31, Y+3	; 0x03
    22d8:	80 81       	ld	r24, Z
    22da:	89 83       	std	Y+1, r24	; 0x01
	*a=*b;
    22dc:	ec 81       	ldd	r30, Y+4	; 0x04
    22de:	fd 81       	ldd	r31, Y+5	; 0x05
    22e0:	80 81       	ld	r24, Z
    22e2:	ea 81       	ldd	r30, Y+2	; 0x02
    22e4:	fb 81       	ldd	r31, Y+3	; 0x03
    22e6:	80 83       	st	Z, r24
		*b=z;
    22e8:	ec 81       	ldd	r30, Y+4	; 0x04
    22ea:	fd 81       	ldd	r31, Y+5	; 0x05
    22ec:	89 81       	ldd	r24, Y+1	; 0x01
    22ee:	80 83       	st	Z, r24

}
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	0f 90       	pop	r0
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <kpd_pressed_key>:


//*************************study***************************************************************

u8 kpd_pressed_key(void)
{
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	00 d0       	rcall	.+0      	; 0x2306 <kpd_pressed_key+0x6>
    2306:	00 d0       	rcall	.+0      	; 0x2308 <kpd_pressed_key+0x8>
    2308:	0f 92       	push	r0
    230a:	cd b7       	in	r28, 0x3d	; 61
    230c:	de b7       	in	r29, 0x3e	; 62
	//arr[rows_num][colloms_num]=kpd_arr_impli;//static save in .data
	static u8 arr[rows_num][colloms_num]=kpd_arr_implimentation;//static save in .data  كل زرار عاوزه حاجه معينه ف أكتبه في الإمبليمنتيشن
	static u8 collom_arr[colloms_num]={kpd_collom_0_pin,kpd_collom_1_pin,kpd_collom_2_pin,kpd_collom_3_pin};
	static u8 row_arr[rows_num]={kpd_row_0_pin,kpd_row_1_pin,kpd_row_2_pin,kpd_row_3_pin};

	u8 pressed_key=kpd_no_pressed_key, collom_index,row_index,pin_state;//the key is pressed
    230e:	8f ef       	ldi	r24, 0xFF	; 255
    2310:	8b 83       	std	Y+3, r24	; 0x03

	for(collom_index=0;collom_index<colloms_num;collom_index++)
    2312:	1a 82       	std	Y+2, r1	; 0x02
    2314:	5e c0       	rjmp	.+188    	; 0x23d2 <kpd_pressed_key+0xd2>
	{
		//activate currant collom
		DIO_set_pin_value(kpd_col_port,collom_arr[collom_index],DIO_Low);
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	88 2f       	mov	r24, r24
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	fc 01       	movw	r30, r24
    231e:	ec 58       	subi	r30, 0x8C	; 140
    2320:	fe 4f       	sbci	r31, 0xFE	; 254
    2322:	90 81       	ld	r25, Z
    2324:	80 e0       	ldi	r24, 0x00	; 0
    2326:	69 2f       	mov	r22, r25
    2328:	40 e0       	ldi	r20, 0x00	; 0
    232a:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>

		for(row_index=0;row_index<rows_num;row_index++)
    232e:	19 82       	std	Y+1, r1	; 0x01
    2330:	3d c0       	rjmp	.+122    	; 0x23ac <kpd_pressed_key+0xac>
		{
			/*read currant row*/
			DIO_get_pin_value(kpd_col_port,row_arr[row_index],&pin_state);//read currant row
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	88 2f       	mov	r24, r24
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	fc 01       	movw	r30, r24
    233a:	e0 59       	subi	r30, 0x90	; 144
    233c:	fe 4f       	sbci	r31, 0xFE	; 254
    233e:	90 81       	ld	r25, Z
    2340:	9e 01       	movw	r18, r28
    2342:	2c 5f       	subi	r18, 0xFC	; 252
    2344:	3f 4f       	sbci	r19, 0xFF	; 255
    2346:	80 e0       	ldi	r24, 0x00	; 0
    2348:	69 2f       	mov	r22, r25
    234a:	a9 01       	movw	r20, r18
    234c:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_get_pin_value>
			/*check key pressed	*/
			if(pin_state==DIO_Low)
    2350:	8c 81       	ldd	r24, Y+4	; 0x04
    2352:	88 23       	and	r24, r24
    2354:	41 f5       	brne	.+80     	; 0x23a6 <kpd_pressed_key+0xa6>
			{
				pressed_key=arr[row_index][collom_index];
    2356:	89 81       	ldd	r24, Y+1	; 0x01
    2358:	48 2f       	mov	r20, r24
    235a:	50 e0       	ldi	r21, 0x00	; 0
    235c:	8a 81       	ldd	r24, Y+2	; 0x02
    235e:	28 2f       	mov	r18, r24
    2360:	30 e0       	ldi	r19, 0x00	; 0
    2362:	ca 01       	movw	r24, r20
    2364:	88 0f       	add	r24, r24
    2366:	99 1f       	adc	r25, r25
    2368:	88 0f       	add	r24, r24
    236a:	99 1f       	adc	r25, r25
    236c:	82 0f       	add	r24, r18
    236e:	93 1f       	adc	r25, r19
    2370:	fc 01       	movw	r30, r24
    2372:	e8 58       	subi	r30, 0x88	; 136
    2374:	fe 4f       	sbci	r31, 0xFE	; 254
    2376:	80 81       	ld	r24, Z
    2378:	8b 83       	std	Y+3, r24	; 0x03
    237a:	0f c0       	rjmp	.+30     	; 0x239a <kpd_pressed_key+0x9a>
				//to solve polling pusy waiting untill event عشان لو فضلت دايس علي الزرار untill key is released
				while(pin_state==DIO_Low)
				{
					DIO_get_pin_value(kpd_col_port,row_arr[row_index],&pin_state);//read currant row
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	88 2f       	mov	r24, r24
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	fc 01       	movw	r30, r24
    2384:	e0 59       	subi	r30, 0x90	; 144
    2386:	fe 4f       	sbci	r31, 0xFE	; 254
    2388:	90 81       	ld	r25, Z
    238a:	9e 01       	movw	r18, r28
    238c:	2c 5f       	subi	r18, 0xFC	; 252
    238e:	3f 4f       	sbci	r19, 0xFF	; 255
    2390:	80 e0       	ldi	r24, 0x00	; 0
    2392:	69 2f       	mov	r22, r25
    2394:	a9 01       	movw	r20, r18
    2396:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_get_pin_value>
			/*check key pressed	*/
			if(pin_state==DIO_Low)
			{
				pressed_key=arr[row_index][collom_index];
				//to solve polling pusy waiting untill event عشان لو فضلت دايس علي الزرار untill key is released
				while(pin_state==DIO_Low)
    239a:	8c 81       	ldd	r24, Y+4	; 0x04
    239c:	88 23       	and	r24, r24
    239e:	71 f3       	breq	.-36     	; 0x237c <kpd_pressed_key+0x7c>
				{
					DIO_get_pin_value(kpd_col_port,row_arr[row_index],&pin_state);//read currant row
				}
				return pressed_key;
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	8d 83       	std	Y+5, r24	; 0x05
    23a4:	1c c0       	rjmp	.+56     	; 0x23de <kpd_pressed_key+0xde>
	for(collom_index=0;collom_index<colloms_num;collom_index++)
	{
		//activate currant collom
		DIO_set_pin_value(kpd_col_port,collom_arr[collom_index],DIO_Low);

		for(row_index=0;row_index<rows_num;row_index++)
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	8f 5f       	subi	r24, 0xFF	; 255
    23aa:	89 83       	std	Y+1, r24	; 0x01
    23ac:	89 81       	ldd	r24, Y+1	; 0x01
    23ae:	84 30       	cpi	r24, 0x04	; 4
    23b0:	08 f4       	brcc	.+2      	; 0x23b4 <kpd_pressed_key+0xb4>
    23b2:	bf cf       	rjmp	.-130    	; 0x2332 <kpd_pressed_key+0x32>
				return pressed_key;

			}
		}
		/*de activate currant collom*/
		DIO_set_pin_value(kpd_col_port,collom_arr[collom_index],DIO_High);
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	88 2f       	mov	r24, r24
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	fc 01       	movw	r30, r24
    23bc:	ec 58       	subi	r30, 0x8C	; 140
    23be:	fe 4f       	sbci	r31, 0xFE	; 254
    23c0:	90 81       	ld	r25, Z
    23c2:	80 e0       	ldi	r24, 0x00	; 0
    23c4:	69 2f       	mov	r22, r25
    23c6:	41 e0       	ldi	r20, 0x01	; 1
    23c8:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
	static u8 collom_arr[colloms_num]={kpd_collom_0_pin,kpd_collom_1_pin,kpd_collom_2_pin,kpd_collom_3_pin};
	static u8 row_arr[rows_num]={kpd_row_0_pin,kpd_row_1_pin,kpd_row_2_pin,kpd_row_3_pin};

	u8 pressed_key=kpd_no_pressed_key, collom_index,row_index,pin_state;//the key is pressed

	for(collom_index=0;collom_index<colloms_num;collom_index++)
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	8f 5f       	subi	r24, 0xFF	; 255
    23d0:	8a 83       	std	Y+2, r24	; 0x02
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	84 30       	cpi	r24, 0x04	; 4
    23d6:	08 f4       	brcc	.+2      	; 0x23da <kpd_pressed_key+0xda>
    23d8:	9e cf       	rjmp	.-196    	; 0x2316 <kpd_pressed_key+0x16>
		DIO_set_pin_value(kpd_col_port,collom_arr[collom_index],DIO_High);

	}


return pressed_key;
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	8d 83       	std	Y+5, r24	; 0x05
    23de:	8d 81       	ldd	r24, Y+5	; 0x05
}
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <kpd_get_state>:



//*************************************************************************************************
void kpd_get_state(u8 kpd_status[kpd_no_keys])
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	00 d0       	rcall	.+0      	; 0x23f6 <kpd_get_state+0x6>
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <kpd_get_state+0x8>
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <kpd_get_state+0xa>
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	9e 83       	std	Y+6, r25	; 0x06
    2400:	8d 83       	std	Y+5, r24	; 0x05
	 u8 col_index,row_index,pin_value,key_index;

	 for(col_index=0;col_index<kpd_col;col_index++)
    2402:	1b 82       	std	Y+3, r1	; 0x03
    2404:	54 c0       	rjmp	.+168    	; 0x24ae <kpd_get_state+0xbe>
	 {
		 DIO_set_pin_value(kpd_col_port,kpd_col_pins[col_index],DIO_Low);
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	88 2f       	mov	r24, r24
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	fc 01       	movw	r30, r24
    240e:	e8 59       	subi	r30, 0x98	; 152
    2410:	fe 4f       	sbci	r31, 0xFE	; 254
    2412:	90 81       	ld	r25, Z
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	69 2f       	mov	r22, r25
    2418:	40 e0       	ldi	r20, 0x00	; 0
    241a:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
		 for (row_index=0;row_index<kpd_row;row_index++)
    241e:	1a 82       	std	Y+2, r1	; 0x02
    2420:	34 c0       	rjmp	.+104    	; 0x248a <kpd_get_state+0x9a>
		 {
			 DIO_get_pin_value(kpd_row_port,kpd_row_pins[row_index],&pin_value);
    2422:	8a 81       	ldd	r24, Y+2	; 0x02
    2424:	88 2f       	mov	r24, r24
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	fc 01       	movw	r30, r24
    242a:	e4 59       	subi	r30, 0x94	; 148
    242c:	fe 4f       	sbci	r31, 0xFE	; 254
    242e:	90 81       	ld	r25, Z
    2430:	9e 01       	movw	r18, r28
    2432:	2c 5f       	subi	r18, 0xFC	; 252
    2434:	3f 4f       	sbci	r19, 0xFF	; 255
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	69 2f       	mov	r22, r25
    243a:	a9 01       	movw	r20, r18
    243c:	0e 94 88 09 	call	0x1310	; 0x1310 <DIO_get_pin_value>
			 key_index= col_index + (row_index * kpd_col);
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	88 2f       	mov	r24, r24
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	88 0f       	add	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
    244e:	98 2f       	mov	r25, r24
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	89 0f       	add	r24, r25
    2454:	89 83       	std	Y+1, r24	; 0x01
			 if(pin_value==DIO_High)
    2456:	8c 81       	ldd	r24, Y+4	; 0x04
    2458:	81 30       	cpi	r24, 0x01	; 1
    245a:	51 f4       	brne	.+20     	; 0x2470 <kpd_get_state+0x80>
			 {
				 kpd_status[key_index]= kpd_not_pressed;
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	8d 81       	ldd	r24, Y+5	; 0x05
    2464:	9e 81       	ldd	r25, Y+6	; 0x06
    2466:	fc 01       	movw	r30, r24
    2468:	e2 0f       	add	r30, r18
    246a:	f3 1f       	adc	r31, r19
    246c:	10 82       	st	Z, r1
    246e:	0a c0       	rjmp	.+20     	; 0x2484 <kpd_get_state+0x94>



			 }else 				 kpd_status[key_index]= kpd_pressed;
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	28 2f       	mov	r18, r24
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	8d 81       	ldd	r24, Y+5	; 0x05
    2478:	9e 81       	ldd	r25, Y+6	; 0x06
    247a:	fc 01       	movw	r30, r24
    247c:	e2 0f       	add	r30, r18
    247e:	f3 1f       	adc	r31, r19
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	80 83       	st	Z, r24
	 u8 col_index,row_index,pin_value,key_index;

	 for(col_index=0;col_index<kpd_col;col_index++)
	 {
		 DIO_set_pin_value(kpd_col_port,kpd_col_pins[col_index],DIO_Low);
		 for (row_index=0;row_index<kpd_row;row_index++)
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	8f 5f       	subi	r24, 0xFF	; 255
    2488:	8a 83       	std	Y+2, r24	; 0x02
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	84 30       	cpi	r24, 0x04	; 4
    248e:	48 f2       	brcs	.-110    	; 0x2422 <kpd_get_state+0x32>
			 }else 				 kpd_status[key_index]= kpd_pressed;


		 }

		 DIO_set_pin_value(kpd_col_port,kpd_col_pins[col_index],DIO_High);
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	88 2f       	mov	r24, r24
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	fc 01       	movw	r30, r24
    2498:	e8 59       	subi	r30, 0x98	; 152
    249a:	fe 4f       	sbci	r31, 0xFE	; 254
    249c:	90 81       	ld	r25, Z
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	69 2f       	mov	r22, r25
    24a2:	41 e0       	ldi	r20, 0x01	; 1
    24a4:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
//*************************************************************************************************
void kpd_get_state(u8 kpd_status[kpd_no_keys])
{
	 u8 col_index,row_index,pin_value,key_index;

	 for(col_index=0;col_index<kpd_col;col_index++)
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
    24aa:	8f 5f       	subi	r24, 0xFF	; 255
    24ac:	8b 83       	std	Y+3, r24	; 0x03
    24ae:	8b 81       	ldd	r24, Y+3	; 0x03
    24b0:	84 30       	cpi	r24, 0x04	; 4
    24b2:	08 f4       	brcc	.+2      	; 0x24b6 <kpd_get_state+0xc6>
    24b4:	a8 cf       	rjmp	.-176    	; 0x2406 <kpd_get_state+0x16>

		 DIO_set_pin_value(kpd_col_port,kpd_col_pins[col_index],DIO_High);
	 }


 }
    24b6:	26 96       	adiw	r28, 0x06	; 6
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	cf 91       	pop	r28
    24c4:	df 91       	pop	r29
    24c6:	08 95       	ret

000024c8 <kpd_set_init>:

void kpd_set_init(void)
{ u8 col_index;u8 row_index;
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <kpd_set_init+0x6>
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
for(col_index=0;col_index<kpd_col;col_index++)
    24d2:	1a 82       	std	Y+2, r1	; 0x02
    24d4:	0f c0       	rjmp	.+30     	; 0x24f4 <kpd_set_init+0x2c>
	 {
		DIO_set_pin_direction(kpd_col_port,kpd_col_pins[col_index],DIO_Output);
    24d6:	8a 81       	ldd	r24, Y+2	; 0x02
    24d8:	88 2f       	mov	r24, r24
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	fc 01       	movw	r30, r24
    24de:	e8 59       	subi	r30, 0x98	; 152
    24e0:	fe 4f       	sbci	r31, 0xFE	; 254
    24e2:	90 81       	ld	r25, Z
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	69 2f       	mov	r22, r25
    24e8:	41 e0       	ldi	r20, 0x01	; 1
    24ea:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_set_pin_direction>

 }

void kpd_set_init(void)
{ u8 col_index;u8 row_index;
for(col_index=0;col_index<kpd_col;col_index++)
    24ee:	8a 81       	ldd	r24, Y+2	; 0x02
    24f0:	8f 5f       	subi	r24, 0xFF	; 255
    24f2:	8a 83       	std	Y+2, r24	; 0x02
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	84 30       	cpi	r24, 0x04	; 4
    24f8:	70 f3       	brcs	.-36     	; 0x24d6 <kpd_set_init+0xe>
	 {
		DIO_set_pin_direction(kpd_col_port,kpd_col_pins[col_index],DIO_Output);
	 }
for (row_index=0;row_index<kpd_row;row_index++)
    24fa:	19 82       	std	Y+1, r1	; 0x01
    24fc:	1b c0       	rjmp	.+54     	; 0x2534 <kpd_set_init+0x6c>
		 {

	DIO_set_pin_direction(kpd_row_port,kpd_row_pins[row_index],DIO_Input);
    24fe:	89 81       	ldd	r24, Y+1	; 0x01
    2500:	88 2f       	mov	r24, r24
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	fc 01       	movw	r30, r24
    2506:	e4 59       	subi	r30, 0x94	; 148
    2508:	fe 4f       	sbci	r31, 0xFE	; 254
    250a:	90 81       	ld	r25, Z
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	69 2f       	mov	r22, r25
    2510:	40 e0       	ldi	r20, 0x00	; 0
    2512:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_set_pin_direction>
	DIO_set_pin_value(kpd_row_port,kpd_row_pins[row_index],DIO_High);
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	88 2f       	mov	r24, r24
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	fc 01       	movw	r30, r24
    251e:	e4 59       	subi	r30, 0x94	; 148
    2520:	fe 4f       	sbci	r31, 0xFE	; 254
    2522:	90 81       	ld	r25, Z
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	69 2f       	mov	r22, r25
    2528:	41 e0       	ldi	r20, 0x01	; 1
    252a:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
{ u8 col_index;u8 row_index;
for(col_index=0;col_index<kpd_col;col_index++)
	 {
		DIO_set_pin_direction(kpd_col_port,kpd_col_pins[col_index],DIO_Output);
	 }
for (row_index=0;row_index<kpd_row;row_index++)
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	8f 5f       	subi	r24, 0xFF	; 255
    2532:	89 83       	std	Y+1, r24	; 0x01
    2534:	89 81       	ldd	r24, Y+1	; 0x01
    2536:	84 30       	cpi	r24, 0x04	; 4
    2538:	10 f3       	brcs	.-60     	; 0x24fe <kpd_set_init+0x36>
	DIO_set_pin_value(kpd_row_port,kpd_row_pins[row_index],DIO_High);


		 }

}
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	08 95       	ret

00002544 <show_num_on_lcd_keypad>:



void show_num_on_lcd_keypad(u8 arr[kpd_no_keys],u8 *count)

{
    2544:	df 93       	push	r29
    2546:	cf 93       	push	r28
    2548:	00 d0       	rcall	.+0      	; 0x254a <show_num_on_lcd_keypad+0x6>
    254a:	00 d0       	rcall	.+0      	; 0x254c <show_num_on_lcd_keypad+0x8>
    254c:	cd b7       	in	r28, 0x3d	; 61
    254e:	de b7       	in	r29, 0x3e	; 62
    2550:	9a 83       	std	Y+2, r25	; 0x02
    2552:	89 83       	std	Y+1, r24	; 0x01
    2554:	7c 83       	std	Y+4, r23	; 0x04
    2556:	6b 83       	std	Y+3, r22	; 0x03





			if (arr[0]==kpd_pressed)
    2558:	e9 81       	ldd	r30, Y+1	; 0x01
    255a:	fa 81       	ldd	r31, Y+2	; 0x02
    255c:	80 81       	ld	r24, Z
    255e:	81 30       	cpi	r24, 0x01	; 1
    2560:	91 f4       	brne	.+36     	; 0x2586 <show_num_on_lcd_keypad+0x42>
			{
				LCD_WRITE_num(1,*count,0);
    2562:	eb 81       	ldd	r30, Y+3	; 0x03
    2564:	fc 81       	ldd	r31, Y+4	; 0x04
    2566:	80 81       	ld	r24, Z
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	b9 01       	movw	r22, r18
    2572:	40 e0       	ldi	r20, 0x00	; 0
    2574:	50 e0       	ldi	r21, 0x00	; 0
    2576:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_WRITE_num>

				*count++;
    257a:	8b 81       	ldd	r24, Y+3	; 0x03
    257c:	9c 81       	ldd	r25, Y+4	; 0x04
    257e:	01 96       	adiw	r24, 0x01	; 1
    2580:	9c 83       	std	Y+4, r25	; 0x04
    2582:	8b 83       	std	Y+3, r24	; 0x03
    2584:	e0 c0       	rjmp	.+448    	; 0x2746 <show_num_on_lcd_keypad+0x202>
			}
			else if (arr[1]==kpd_pressed)
    2586:	89 81       	ldd	r24, Y+1	; 0x01
    2588:	9a 81       	ldd	r25, Y+2	; 0x02
    258a:	fc 01       	movw	r30, r24
    258c:	31 96       	adiw	r30, 0x01	; 1
    258e:	80 81       	ld	r24, Z
    2590:	81 30       	cpi	r24, 0x01	; 1
    2592:	91 f4       	brne	.+36     	; 0x25b8 <show_num_on_lcd_keypad+0x74>
			{
				LCD_WRITE_num(2,*count,0);
    2594:	eb 81       	ldd	r30, Y+3	; 0x03
    2596:	fc 81       	ldd	r31, Y+4	; 0x04
    2598:	80 81       	ld	r24, Z
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	82 e0       	ldi	r24, 0x02	; 2
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	b9 01       	movw	r22, r18
    25a4:	40 e0       	ldi	r20, 0x00	; 0
    25a6:	50 e0       	ldi	r21, 0x00	; 0
    25a8:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_WRITE_num>
						*count++;
    25ac:	8b 81       	ldd	r24, Y+3	; 0x03
    25ae:	9c 81       	ldd	r25, Y+4	; 0x04
    25b0:	01 96       	adiw	r24, 0x01	; 1
    25b2:	9c 83       	std	Y+4, r25	; 0x04
    25b4:	8b 83       	std	Y+3, r24	; 0x03
    25b6:	c7 c0       	rjmp	.+398    	; 0x2746 <show_num_on_lcd_keypad+0x202>
			}
			else if (arr[2]==kpd_pressed)
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	9a 81       	ldd	r25, Y+2	; 0x02
    25bc:	fc 01       	movw	r30, r24
    25be:	32 96       	adiw	r30, 0x02	; 2
    25c0:	80 81       	ld	r24, Z
    25c2:	81 30       	cpi	r24, 0x01	; 1
    25c4:	91 f4       	brne	.+36     	; 0x25ea <show_num_on_lcd_keypad+0xa6>
				{
					LCD_WRITE_num(3,*count,0);
    25c6:	eb 81       	ldd	r30, Y+3	; 0x03
    25c8:	fc 81       	ldd	r31, Y+4	; 0x04
    25ca:	80 81       	ld	r24, Z
    25cc:	28 2f       	mov	r18, r24
    25ce:	30 e0       	ldi	r19, 0x00	; 0
    25d0:	83 e0       	ldi	r24, 0x03	; 3
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	b9 01       	movw	r22, r18
    25d6:	40 e0       	ldi	r20, 0x00	; 0
    25d8:	50 e0       	ldi	r21, 0x00	; 0
    25da:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_WRITE_num>
							*count++;
    25de:	8b 81       	ldd	r24, Y+3	; 0x03
    25e0:	9c 81       	ldd	r25, Y+4	; 0x04
    25e2:	01 96       	adiw	r24, 0x01	; 1
    25e4:	9c 83       	std	Y+4, r25	; 0x04
    25e6:	8b 83       	std	Y+3, r24	; 0x03
    25e8:	ae c0       	rjmp	.+348    	; 0x2746 <show_num_on_lcd_keypad+0x202>
				}
			else if (arr[4]==kpd_pressed)
    25ea:	89 81       	ldd	r24, Y+1	; 0x01
    25ec:	9a 81       	ldd	r25, Y+2	; 0x02
    25ee:	fc 01       	movw	r30, r24
    25f0:	34 96       	adiw	r30, 0x04	; 4
    25f2:	80 81       	ld	r24, Z
    25f4:	81 30       	cpi	r24, 0x01	; 1
    25f6:	91 f4       	brne	.+36     	; 0x261c <show_num_on_lcd_keypad+0xd8>
				{
					LCD_WRITE_num(4,*count,0);
    25f8:	eb 81       	ldd	r30, Y+3	; 0x03
    25fa:	fc 81       	ldd	r31, Y+4	; 0x04
    25fc:	80 81       	ld	r24, Z
    25fe:	28 2f       	mov	r18, r24
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	84 e0       	ldi	r24, 0x04	; 4
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	b9 01       	movw	r22, r18
    2608:	40 e0       	ldi	r20, 0x00	; 0
    260a:	50 e0       	ldi	r21, 0x00	; 0
    260c:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_WRITE_num>
							*count++;
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	9c 81       	ldd	r25, Y+4	; 0x04
    2614:	01 96       	adiw	r24, 0x01	; 1
    2616:	9c 83       	std	Y+4, r25	; 0x04
    2618:	8b 83       	std	Y+3, r24	; 0x03
    261a:	95 c0       	rjmp	.+298    	; 0x2746 <show_num_on_lcd_keypad+0x202>
				}
			else if (arr[5]==kpd_pressed)
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	9a 81       	ldd	r25, Y+2	; 0x02
    2620:	fc 01       	movw	r30, r24
    2622:	35 96       	adiw	r30, 0x05	; 5
    2624:	80 81       	ld	r24, Z
    2626:	81 30       	cpi	r24, 0x01	; 1
    2628:	91 f4       	brne	.+36     	; 0x264e <show_num_on_lcd_keypad+0x10a>
				{
					LCD_WRITE_num(5,*count,0);
    262a:	eb 81       	ldd	r30, Y+3	; 0x03
    262c:	fc 81       	ldd	r31, Y+4	; 0x04
    262e:	80 81       	ld	r24, Z
    2630:	28 2f       	mov	r18, r24
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	85 e0       	ldi	r24, 0x05	; 5
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	b9 01       	movw	r22, r18
    263a:	40 e0       	ldi	r20, 0x00	; 0
    263c:	50 e0       	ldi	r21, 0x00	; 0
    263e:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_WRITE_num>
							*count++;
    2642:	8b 81       	ldd	r24, Y+3	; 0x03
    2644:	9c 81       	ldd	r25, Y+4	; 0x04
    2646:	01 96       	adiw	r24, 0x01	; 1
    2648:	9c 83       	std	Y+4, r25	; 0x04
    264a:	8b 83       	std	Y+3, r24	; 0x03
    264c:	7c c0       	rjmp	.+248    	; 0x2746 <show_num_on_lcd_keypad+0x202>
				}
			else if (arr[6]==kpd_pressed)
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	9a 81       	ldd	r25, Y+2	; 0x02
    2652:	fc 01       	movw	r30, r24
    2654:	36 96       	adiw	r30, 0x06	; 6
    2656:	80 81       	ld	r24, Z
    2658:	81 30       	cpi	r24, 0x01	; 1
    265a:	91 f4       	brne	.+36     	; 0x2680 <show_num_on_lcd_keypad+0x13c>
				{
					LCD_WRITE_num(6,*count,0);
    265c:	eb 81       	ldd	r30, Y+3	; 0x03
    265e:	fc 81       	ldd	r31, Y+4	; 0x04
    2660:	80 81       	ld	r24, Z
    2662:	28 2f       	mov	r18, r24
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	86 e0       	ldi	r24, 0x06	; 6
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	b9 01       	movw	r22, r18
    266c:	40 e0       	ldi	r20, 0x00	; 0
    266e:	50 e0       	ldi	r21, 0x00	; 0
    2670:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_WRITE_num>
							*count++;
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	9c 81       	ldd	r25, Y+4	; 0x04
    2678:	01 96       	adiw	r24, 0x01	; 1
    267a:	9c 83       	std	Y+4, r25	; 0x04
    267c:	8b 83       	std	Y+3, r24	; 0x03
    267e:	63 c0       	rjmp	.+198    	; 0x2746 <show_num_on_lcd_keypad+0x202>
				}
			else if (arr[8]==kpd_pressed)
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	9a 81       	ldd	r25, Y+2	; 0x02
    2684:	fc 01       	movw	r30, r24
    2686:	38 96       	adiw	r30, 0x08	; 8
    2688:	80 81       	ld	r24, Z
    268a:	81 30       	cpi	r24, 0x01	; 1
    268c:	91 f4       	brne	.+36     	; 0x26b2 <show_num_on_lcd_keypad+0x16e>
				{
					LCD_WRITE_num(7,*count,0);
    268e:	eb 81       	ldd	r30, Y+3	; 0x03
    2690:	fc 81       	ldd	r31, Y+4	; 0x04
    2692:	80 81       	ld	r24, Z
    2694:	28 2f       	mov	r18, r24
    2696:	30 e0       	ldi	r19, 0x00	; 0
    2698:	87 e0       	ldi	r24, 0x07	; 7
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	b9 01       	movw	r22, r18
    269e:	40 e0       	ldi	r20, 0x00	; 0
    26a0:	50 e0       	ldi	r21, 0x00	; 0
    26a2:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_WRITE_num>
							*count++;
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	9c 81       	ldd	r25, Y+4	; 0x04
    26aa:	01 96       	adiw	r24, 0x01	; 1
    26ac:	9c 83       	std	Y+4, r25	; 0x04
    26ae:	8b 83       	std	Y+3, r24	; 0x03
    26b0:	4a c0       	rjmp	.+148    	; 0x2746 <show_num_on_lcd_keypad+0x202>
				}
			else if (arr[9]==kpd_pressed)
    26b2:	89 81       	ldd	r24, Y+1	; 0x01
    26b4:	9a 81       	ldd	r25, Y+2	; 0x02
    26b6:	fc 01       	movw	r30, r24
    26b8:	39 96       	adiw	r30, 0x09	; 9
    26ba:	80 81       	ld	r24, Z
    26bc:	81 30       	cpi	r24, 0x01	; 1
    26be:	91 f4       	brne	.+36     	; 0x26e4 <show_num_on_lcd_keypad+0x1a0>
				{
					LCD_WRITE_num(8,*count,0);
    26c0:	eb 81       	ldd	r30, Y+3	; 0x03
    26c2:	fc 81       	ldd	r31, Y+4	; 0x04
    26c4:	80 81       	ld	r24, Z
    26c6:	28 2f       	mov	r18, r24
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	88 e0       	ldi	r24, 0x08	; 8
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	b9 01       	movw	r22, r18
    26d0:	40 e0       	ldi	r20, 0x00	; 0
    26d2:	50 e0       	ldi	r21, 0x00	; 0
    26d4:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_WRITE_num>
							*count++;
    26d8:	8b 81       	ldd	r24, Y+3	; 0x03
    26da:	9c 81       	ldd	r25, Y+4	; 0x04
    26dc:	01 96       	adiw	r24, 0x01	; 1
    26de:	9c 83       	std	Y+4, r25	; 0x04
    26e0:	8b 83       	std	Y+3, r24	; 0x03
    26e2:	31 c0       	rjmp	.+98     	; 0x2746 <show_num_on_lcd_keypad+0x202>
				}
			else if (arr[10]==kpd_pressed)
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	9a 81       	ldd	r25, Y+2	; 0x02
    26e8:	fc 01       	movw	r30, r24
    26ea:	3a 96       	adiw	r30, 0x0a	; 10
    26ec:	80 81       	ld	r24, Z
    26ee:	81 30       	cpi	r24, 0x01	; 1
    26f0:	91 f4       	brne	.+36     	; 0x2716 <show_num_on_lcd_keypad+0x1d2>
					{
						LCD_WRITE_num(9,*count,0);
    26f2:	eb 81       	ldd	r30, Y+3	; 0x03
    26f4:	fc 81       	ldd	r31, Y+4	; 0x04
    26f6:	80 81       	ld	r24, Z
    26f8:	28 2f       	mov	r18, r24
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	89 e0       	ldi	r24, 0x09	; 9
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	b9 01       	movw	r22, r18
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	50 e0       	ldi	r21, 0x00	; 0
    2706:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_WRITE_num>
								*count++;
    270a:	8b 81       	ldd	r24, Y+3	; 0x03
    270c:	9c 81       	ldd	r25, Y+4	; 0x04
    270e:	01 96       	adiw	r24, 0x01	; 1
    2710:	9c 83       	std	Y+4, r25	; 0x04
    2712:	8b 83       	std	Y+3, r24	; 0x03
    2714:	18 c0       	rjmp	.+48     	; 0x2746 <show_num_on_lcd_keypad+0x202>
					}
			else if (arr[13]==kpd_pressed)
    2716:	89 81       	ldd	r24, Y+1	; 0x01
    2718:	9a 81       	ldd	r25, Y+2	; 0x02
    271a:	fc 01       	movw	r30, r24
    271c:	3d 96       	adiw	r30, 0x0d	; 13
    271e:	80 81       	ld	r24, Z
    2720:	81 30       	cpi	r24, 0x01	; 1
    2722:	89 f4       	brne	.+34     	; 0x2746 <show_num_on_lcd_keypad+0x202>
					{
						LCD_WRITE_num(0,*count,0);
    2724:	eb 81       	ldd	r30, Y+3	; 0x03
    2726:	fc 81       	ldd	r31, Y+4	; 0x04
    2728:	80 81       	ld	r24, Z
    272a:	28 2f       	mov	r18, r24
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	80 e0       	ldi	r24, 0x00	; 0
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	b9 01       	movw	r22, r18
    2734:	40 e0       	ldi	r20, 0x00	; 0
    2736:	50 e0       	ldi	r21, 0x00	; 0
    2738:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_WRITE_num>
								*count++;
    273c:	8b 81       	ldd	r24, Y+3	; 0x03
    273e:	9c 81       	ldd	r25, Y+4	; 0x04
    2740:	01 96       	adiw	r24, 0x01	; 1
    2742:	9c 83       	std	Y+4, r25	; 0x04
    2744:	8b 83       	std	Y+3, r24	; 0x03





}
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <all_col_high>:
void all_col_high(void)
{
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
	 DIO_set_pin_value(kpd_col_port,kpd_col_pins[0],DIO_High);
    275c:	90 91 68 01 	lds	r25, 0x0168
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	69 2f       	mov	r22, r25
    2764:	41 e0       	ldi	r20, 0x01	; 1
    2766:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
			 DIO_set_pin_value(kpd_col_port,kpd_col_pins[1],DIO_High);
    276a:	90 91 69 01 	lds	r25, 0x0169
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	69 2f       	mov	r22, r25
    2772:	41 e0       	ldi	r20, 0x01	; 1
    2774:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
			 DIO_set_pin_value(kpd_col_port,kpd_col_pins[2],DIO_High);
    2778:	90 91 6a 01 	lds	r25, 0x016A
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	69 2f       	mov	r22, r25
    2780:	41 e0       	ldi	r20, 0x01	; 1
    2782:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>
			 DIO_set_pin_value(kpd_col_port,kpd_col_pins[3],DIO_High);
    2786:	90 91 6b 01 	lds	r25, 0x016B
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	69 2f       	mov	r22, r25
    278e:	41 e0       	ldi	r20, 0x01	; 1
    2790:	0e 94 92 07 	call	0xf24	; 0xf24 <DIO_set_pin_value>

}
    2794:	cf 91       	pop	r28
    2796:	df 91       	pop	r29
    2798:	08 95       	ret

0000279a <main>:
#include"LCD_Interface.h"



void main (void)
{
    279a:	df 93       	push	r29
    279c:	cf 93       	push	r28
    279e:	cd b7       	in	r28, 0x3d	; 61
    27a0:	de b7       	in	r29, 0x3e	; 62
    27a2:	68 97       	sbiw	r28, 0x18	; 24
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61

	u16 digital;
f32 analog;
f32 temp;
	DIO_set_pin_direction(Group_A,DIO_Pin_0,DIO_Input);
    27ae:	80 e0       	ldi	r24, 0x00	; 0
    27b0:	60 e0       	ldi	r22, 0x00	; 0
    27b2:	40 e0       	ldi	r20, 0x00	; 0
    27b4:	0e 94 8d 08 	call	0x111a	; 0x111a <DIO_set_pin_direction>
//	DIO_set_pin_direction(Group_B,DIO_Pin_5,DIO_Output);
	//DIO_set_pin_direction(Group_B,DIO_Pin_6,DIO_Output);
//	DIO_set_pin_direction(Group_B,DIO_Pin_7,DIO_Output);
	LCD_Intialization();
    27b8:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <LCD_Intialization>
ADC_INT();
    27bc:	0e 94 0f 07 	call	0xe1e	; 0xe1e <ADC_INT>
while(1)
{
	digital=ADC_READ(ADC_CH_0);//عدد العدات digital is steps
    27c0:	80 e0       	ldi	r24, 0x00	; 0
    27c2:	0e 94 47 07 	call	0xe8e	; 0xe8e <ADC_READ>
    27c6:	98 8f       	std	Y+24, r25	; 0x18
    27c8:	8f 8b       	std	Y+23, r24	; 0x17
analog=(digital*refrance_volt)/resolution;//عشان اعرف الفولت هستخدم المعادله بناعت الإستبس
    27ca:	8f 89       	ldd	r24, Y+23	; 0x17
    27cc:	98 8d       	ldd	r25, Y+24	; 0x18
    27ce:	cc 01       	movw	r24, r24
    27d0:	a0 e0       	ldi	r26, 0x00	; 0
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	bc 01       	movw	r22, r24
    27d6:	cd 01       	movw	r24, r26
    27d8:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
    27dc:	dc 01       	movw	r26, r24
    27de:	cb 01       	movw	r24, r22
    27e0:	bc 01       	movw	r22, r24
    27e2:	cd 01       	movw	r24, r26
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 ea       	ldi	r20, 0xA0	; 160
    27ea:	50 e4       	ldi	r21, 0x40	; 64
    27ec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	bc 01       	movw	r22, r24
    27f6:	cd 01       	movw	r24, r26
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e8       	ldi	r20, 0x80	; 128
    27fe:	54 e4       	ldi	r21, 0x44	; 68
    2800:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	8b 8b       	std	Y+19, r24	; 0x13
    280a:	9c 8b       	std	Y+20, r25	; 0x14
    280c:	ad 8b       	std	Y+21, r26	; 0x15
    280e:	be 8b       	std	Y+22, r27	; 0x16
temp=(analog*100.0);//الأنالوج مضروب في 1000 عشان احوله للملي وبعدين هقسمه علي 10ملي فولت
    2810:	6b 89       	ldd	r22, Y+19	; 0x13
    2812:	7c 89       	ldd	r23, Y+20	; 0x14
    2814:	8d 89       	ldd	r24, Y+21	; 0x15
    2816:	9e 89       	ldd	r25, Y+22	; 0x16
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	48 ec       	ldi	r20, 0xC8	; 200
    281e:	52 e4       	ldi	r21, 0x42	; 66
    2820:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	8f 87       	std	Y+15, r24	; 0x0f
    282a:	98 8b       	std	Y+16, r25	; 0x10
    282c:	a9 8b       	std	Y+17, r26	; 0x11
    282e:	ba 8b       	std	Y+18, r27	; 0x12

LCD_WRITE_num(analog);
    2830:	6b 89       	ldd	r22, Y+19	; 0x13
    2832:	7c 89       	ldd	r23, Y+20	; 0x14
    2834:	8d 89       	ldd	r24, Y+21	; 0x15
    2836:	9e 89       	ldd	r25, Y+22	; 0x16
    2838:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    283c:	dc 01       	movw	r26, r24
    283e:	cb 01       	movw	r24, r22
    2840:	bc 01       	movw	r22, r24
    2842:	cd 01       	movw	r24, r26
    2844:	0e 94 b3 10 	call	0x2166	; 0x2166 <LCD_WRITE_num>
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	aa e7       	ldi	r26, 0x7A	; 122
    284e:	b4 e4       	ldi	r27, 0x44	; 68
    2850:	8b 87       	std	Y+11, r24	; 0x0b
    2852:	9c 87       	std	Y+12, r25	; 0x0c
    2854:	ad 87       	std	Y+13, r26	; 0x0d
    2856:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2858:	6b 85       	ldd	r22, Y+11	; 0x0b
    285a:	7c 85       	ldd	r23, Y+12	; 0x0c
    285c:	8d 85       	ldd	r24, Y+13	; 0x0d
    285e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	4a ef       	ldi	r20, 0xFA	; 250
    2866:	54 e4       	ldi	r21, 0x44	; 68
    2868:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	8f 83       	std	Y+7, r24	; 0x07
    2872:	98 87       	std	Y+8, r25	; 0x08
    2874:	a9 87       	std	Y+9, r26	; 0x09
    2876:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2878:	6f 81       	ldd	r22, Y+7	; 0x07
    287a:	78 85       	ldd	r23, Y+8	; 0x08
    287c:	89 85       	ldd	r24, Y+9	; 0x09
    287e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2880:	20 e0       	ldi	r18, 0x00	; 0
    2882:	30 e0       	ldi	r19, 0x00	; 0
    2884:	40 e8       	ldi	r20, 0x80	; 128
    2886:	5f e3       	ldi	r21, 0x3F	; 63
    2888:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    288c:	88 23       	and	r24, r24
    288e:	2c f4       	brge	.+10     	; 0x289a <main+0x100>
		__ticks = 1;
    2890:	81 e0       	ldi	r24, 0x01	; 1
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	9e 83       	std	Y+6, r25	; 0x06
    2896:	8d 83       	std	Y+5, r24	; 0x05
    2898:	3f c0       	rjmp	.+126    	; 0x2918 <main+0x17e>
	else if (__tmp > 65535)
    289a:	6f 81       	ldd	r22, Y+7	; 0x07
    289c:	78 85       	ldd	r23, Y+8	; 0x08
    289e:	89 85       	ldd	r24, Y+9	; 0x09
    28a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	3f ef       	ldi	r19, 0xFF	; 255
    28a6:	4f e7       	ldi	r20, 0x7F	; 127
    28a8:	57 e4       	ldi	r21, 0x47	; 71
    28aa:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    28ae:	18 16       	cp	r1, r24
    28b0:	4c f5       	brge	.+82     	; 0x2904 <main+0x16a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ba:	20 e0       	ldi	r18, 0x00	; 0
    28bc:	30 e0       	ldi	r19, 0x00	; 0
    28be:	40 e2       	ldi	r20, 0x20	; 32
    28c0:	51 e4       	ldi	r21, 0x41	; 65
    28c2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28c6:	dc 01       	movw	r26, r24
    28c8:	cb 01       	movw	r24, r22
    28ca:	bc 01       	movw	r22, r24
    28cc:	cd 01       	movw	r24, r26
    28ce:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	9e 83       	std	Y+6, r25	; 0x06
    28d8:	8d 83       	std	Y+5, r24	; 0x05
    28da:	0f c0       	rjmp	.+30     	; 0x28fa <main+0x160>
    28dc:	88 ec       	ldi	r24, 0xC8	; 200
    28de:	90 e0       	ldi	r25, 0x00	; 0
    28e0:	9c 83       	std	Y+4, r25	; 0x04
    28e2:	8b 83       	std	Y+3, r24	; 0x03
    28e4:	8b 81       	ldd	r24, Y+3	; 0x03
    28e6:	9c 81       	ldd	r25, Y+4	; 0x04
    28e8:	01 97       	sbiw	r24, 0x01	; 1
    28ea:	f1 f7       	brne	.-4      	; 0x28e8 <main+0x14e>
    28ec:	9c 83       	std	Y+4, r25	; 0x04
    28ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28f0:	8d 81       	ldd	r24, Y+5	; 0x05
    28f2:	9e 81       	ldd	r25, Y+6	; 0x06
    28f4:	01 97       	sbiw	r24, 0x01	; 1
    28f6:	9e 83       	std	Y+6, r25	; 0x06
    28f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28fa:	8d 81       	ldd	r24, Y+5	; 0x05
    28fc:	9e 81       	ldd	r25, Y+6	; 0x06
    28fe:	00 97       	sbiw	r24, 0x00	; 0
    2900:	69 f7       	brne	.-38     	; 0x28dc <main+0x142>
    2902:	14 c0       	rjmp	.+40     	; 0x292c <main+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2904:	6f 81       	ldd	r22, Y+7	; 0x07
    2906:	78 85       	ldd	r23, Y+8	; 0x08
    2908:	89 85       	ldd	r24, Y+9	; 0x09
    290a:	9a 85       	ldd	r25, Y+10	; 0x0a
    290c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2910:	dc 01       	movw	r26, r24
    2912:	cb 01       	movw	r24, r22
    2914:	9e 83       	std	Y+6, r25	; 0x06
    2916:	8d 83       	std	Y+5, r24	; 0x05
    2918:	8d 81       	ldd	r24, Y+5	; 0x05
    291a:	9e 81       	ldd	r25, Y+6	; 0x06
    291c:	9a 83       	std	Y+2, r25	; 0x02
    291e:	89 83       	std	Y+1, r24	; 0x01
    2920:	89 81       	ldd	r24, Y+1	; 0x01
    2922:	9a 81       	ldd	r25, Y+2	; 0x02
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	f1 f7       	brne	.-4      	; 0x2924 <main+0x18a>
    2928:	9a 83       	std	Y+2, r25	; 0x02
    292a:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(1000);
LCD_write_cmd(0b00000001);
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	0e 94 b0 0c 	call	0x1960	; 0x1960 <LCD_write_cmd>
    2932:	46 cf       	rjmp	.-372    	; 0x27c0 <main+0x26>

00002934 <__udivmodsi4>:
    2934:	a1 e2       	ldi	r26, 0x21	; 33
    2936:	1a 2e       	mov	r1, r26
    2938:	aa 1b       	sub	r26, r26
    293a:	bb 1b       	sub	r27, r27
    293c:	fd 01       	movw	r30, r26
    293e:	0d c0       	rjmp	.+26     	; 0x295a <__udivmodsi4_ep>

00002940 <__udivmodsi4_loop>:
    2940:	aa 1f       	adc	r26, r26
    2942:	bb 1f       	adc	r27, r27
    2944:	ee 1f       	adc	r30, r30
    2946:	ff 1f       	adc	r31, r31
    2948:	a2 17       	cp	r26, r18
    294a:	b3 07       	cpc	r27, r19
    294c:	e4 07       	cpc	r30, r20
    294e:	f5 07       	cpc	r31, r21
    2950:	20 f0       	brcs	.+8      	; 0x295a <__udivmodsi4_ep>
    2952:	a2 1b       	sub	r26, r18
    2954:	b3 0b       	sbc	r27, r19
    2956:	e4 0b       	sbc	r30, r20
    2958:	f5 0b       	sbc	r31, r21

0000295a <__udivmodsi4_ep>:
    295a:	66 1f       	adc	r22, r22
    295c:	77 1f       	adc	r23, r23
    295e:	88 1f       	adc	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	1a 94       	dec	r1
    2964:	69 f7       	brne	.-38     	; 0x2940 <__udivmodsi4_loop>
    2966:	60 95       	com	r22
    2968:	70 95       	com	r23
    296a:	80 95       	com	r24
    296c:	90 95       	com	r25
    296e:	9b 01       	movw	r18, r22
    2970:	ac 01       	movw	r20, r24
    2972:	bd 01       	movw	r22, r26
    2974:	cf 01       	movw	r24, r30
    2976:	08 95       	ret

00002978 <__prologue_saves__>:
    2978:	2f 92       	push	r2
    297a:	3f 92       	push	r3
    297c:	4f 92       	push	r4
    297e:	5f 92       	push	r5
    2980:	6f 92       	push	r6
    2982:	7f 92       	push	r7
    2984:	8f 92       	push	r8
    2986:	9f 92       	push	r9
    2988:	af 92       	push	r10
    298a:	bf 92       	push	r11
    298c:	cf 92       	push	r12
    298e:	df 92       	push	r13
    2990:	ef 92       	push	r14
    2992:	ff 92       	push	r15
    2994:	0f 93       	push	r16
    2996:	1f 93       	push	r17
    2998:	cf 93       	push	r28
    299a:	df 93       	push	r29
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	ca 1b       	sub	r28, r26
    29a2:	db 0b       	sbc	r29, r27
    29a4:	0f b6       	in	r0, 0x3f	; 63
    29a6:	f8 94       	cli
    29a8:	de bf       	out	0x3e, r29	; 62
    29aa:	0f be       	out	0x3f, r0	; 63
    29ac:	cd bf       	out	0x3d, r28	; 61
    29ae:	09 94       	ijmp

000029b0 <__epilogue_restores__>:
    29b0:	2a 88       	ldd	r2, Y+18	; 0x12
    29b2:	39 88       	ldd	r3, Y+17	; 0x11
    29b4:	48 88       	ldd	r4, Y+16	; 0x10
    29b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    29b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    29ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    29bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    29be:	9b 84       	ldd	r9, Y+11	; 0x0b
    29c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    29c2:	b9 84       	ldd	r11, Y+9	; 0x09
    29c4:	c8 84       	ldd	r12, Y+8	; 0x08
    29c6:	df 80       	ldd	r13, Y+7	; 0x07
    29c8:	ee 80       	ldd	r14, Y+6	; 0x06
    29ca:	fd 80       	ldd	r15, Y+5	; 0x05
    29cc:	0c 81       	ldd	r16, Y+4	; 0x04
    29ce:	1b 81       	ldd	r17, Y+3	; 0x03
    29d0:	aa 81       	ldd	r26, Y+2	; 0x02
    29d2:	b9 81       	ldd	r27, Y+1	; 0x01
    29d4:	ce 0f       	add	r28, r30
    29d6:	d1 1d       	adc	r29, r1
    29d8:	0f b6       	in	r0, 0x3f	; 63
    29da:	f8 94       	cli
    29dc:	de bf       	out	0x3e, r29	; 62
    29de:	0f be       	out	0x3f, r0	; 63
    29e0:	cd bf       	out	0x3d, r28	; 61
    29e2:	ed 01       	movw	r28, r26
    29e4:	08 95       	ret

000029e6 <_exit>:
    29e6:	f8 94       	cli

000029e8 <__stop_program>:
    29e8:	ff cf       	rjmp	.-2      	; 0x29e8 <__stop_program>
